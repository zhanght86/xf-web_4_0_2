'use strict';
// Source: app/static/ApplicationController.js
/**
 * Created by mileS on 2017/5/17.
 * describe : 总控制器，处理一些整体参数，提供下游调用方法
 * info  控制器嵌套
 */
knowledge_static_web.controller('ApplicationController',
    ['$scope', '$location', '$anchorScroll', 'AuthService', 'TipService','AUTH_EVENTS',"$timeout","ngDialog" ,"$interval" ,
        '$state','localStorageService','$stateParams','$sce','$window',"KnowDocService","knowledgeAddServer","$cookieStore",
        function ($scope, $location, $anchorScroll, AuthService, TipService,AUTH_EVENTS,$timeout ,ngDialog ,$interval ,
                  $state , localStorageService,$stateParams,$sce,$window,KnowDocService,knowledgeAddServer,$cookieStore) {
/***************************************************************  MASTER   **************************************************************************************/
               /**
                * @Name  master
                * @For   下游调用
                * @Info  self === $scope
                * */
            $scope.master = { 
                //const for Downstream
                    headImage : $cookieStore.get("robotHead") ,
                    applicationName : APPLICATION_NAME,
                //method for DownStream simple
                    slideToggle : slideToggle ,   //滑动控制
                                                  // @params el callBack
                    openNgDialog : openNgDialog ,  //打开弹框
                    setNgTimeOut : setNgTimeOut ,  //延时器
                    setNgInterval : setNgInterval ,//定时器
                    dimensionList : "" ,
                    channelList : "" ,
                //method for Downstream
                    getDimensions : getDimensions ,
                    getChannels : getChannels ,
                    isBotRepeat : isBotRepeat ,// 验证Bot 是否重复      For 知识新增bot添加
                    searchBotAutoTag : searchBotAutoTag , //BOT搜索自动补全   For 知识新增bot添加
                    searchAppointAutoTag : searchAppointAutoTag ,    //相关问搜索自动补全
                    isExtensionTagRepeat : isExtensionTagRepeat ,  // 检测扩展问标签是否重复    营销 概念 列表 富文本知识新增
                    removeExtensionHasTag : removeExtensionHasTag , //对删除的扩展问备份     营销 概念 列表 富文本知识新增
                    //getFrameByClassId : getFrameByClassId  //通过类目id 获取业务框架
                    //getExtensionByFrameId : getExtensionByFrameId //通过业务框架id 获取扩展问
                isTitleHasTag : isTitleHasTag ,
            /* bot 下拉树的公共方法 */
                   botTreeOperate : botTreeOperate

            } ;


            function isTitleHasTag(title,arr){
                var result = false ;
                angular.forEach(arr,function(item){
                    if(item.extensionQuestionTitle==title){
                        result = true ;
                    }
                }) ;
                return result
            }
            /*
            * 9/5
            *
            * */
            //獲取纬度
            function querydimensionList(applicationId){
                //var dimensions = [] ;
                knowledgeAddServer.getDimensions({ "applicationId" : applicationId},
                    function(data) {
                        if(data.data){
                            $scope.master.dimensionList = data.data ;
                        }
                    }, function(error) {
                        console.log(error)
                    });
                //return dimensions ;
            };
            querydimensionList(APPLICATION_ID) ;
            function queryChannelList(applicationId){
                //var  channels = [] ;
                knowledgeAddServer.getChannels({ "applicationId" : applicationId},
                    function(data) {
                        if(data.data){
                            $scope.master.channelList = data.data ;
                        }
                    }, function(error) {
                        console.log(error) ;
                    });
                //return   channels ;
            }
            queryChannelList(APPLICATION_ID)
            /*
             * 9/5
             *
             * */





            //滑动
            function slideToggle(el,callBack){
                $timeout(function(){
                    angular.element(el).slideToggle();
                },50)
                if(callBack){
                    callBack()
                }
            }
            function setNgTimeOut(callBack,time){
                $timeout(callBack,time)
            }
            function setNgInterval(callBack,time){
                $interval(callBack,time)
            }
            /**
             * 打开弹框
             * @params ｛self｝  $scope
             * @params ｛tempUrl｝  “”          模板地址
             * @params ｛closeIssue｝   fn        条件关闭
             * @params ｛closeClear｝   fn       无条件关闭
             * @params ｛closeCondition｝ fn    关闭弹框回调
             * @params ｛complex｝  {Booleans}  是否可以打开多个弹框 默认 “false”一个
             * */
            function openNgDialog(self,tempUrl,width,closeIssue,closeClear,closeCondition,complex){
                var diaSize = angular.element(".ngdialog ").length;
                if(complex != "true" && diaSize<1){
                    open() ;
                }else  if(complex == "true"){
                    open() ;
                }
                function open(){
                    var dialog = ngDialog.openConfirm({
                        template: tempUrl,
                        width:width,
                        scope: self,
                        closeByDocument: false,
                        closeByEscape: true,
                        showClose: true,
                        backdrop: 'static',
                        preCloseCallback: function (e) {    //关闭回掉
                            if (e === 1) {
                                if(closeIssue){
                                    closeIssue()
                                }
                            } else {
                                if(closeClear){
                                    closeClear()
                                }
                            }
                            if(closeCondition){
                                closeCondition()
                            }
                        }
                    });
                }
            }
            //獲取纬度
            function getDimensions(self,arr){
                //var dimensions = [] ;
                knowledgeAddServer.getDimensions({ "applicationId" : APPLICATION_ID},
                    function(data) {
                        if(data.data){
                            angular.forEach(arr,function(item){
                                self.vm[item] = data.data
                            }) ;
                            //dimensions = data.data ;
                        }
                    }, function(error) {
                        console.log(error)
                    });
                //return dimensions ;
            }
            //获取渠道
            function getChannels(self,arr){
                //var  channels = [] ;
                knowledgeAddServer.getChannels({ "applicationId" : APPLICATION_ID},
                    function(data) {
                        if(data.data){
                            angular.forEach(arr,function(item){
                                self.vm[item] = data.data
                            }) ;
                        }
                    }, function(error) {
                        console.log(error) ;
                    });
                //return   channels ;
            }
            function isBotRepeat(id,path,type,allBot){
                //className  classificationId  classificationType(不推送)
                //重复 提示   不重复返回bot对象
                // 校验对象  className
                var result = {             //定义bot对象
                    "className" : path,
                    "classificationId" : id,
                    "classificationType" : type?type:67
                } ;    //返回對象
                var len = allBot.length;  //所有bot 長度
                // 集合转为string 便于比较  并不改变原数组
                var backUpPath = angular.copy(path).join("/") ;
                if(len){                  //需要验证
                    angular.forEach(allBot,function(item){
                        console.log(item.className.join("/"),backUpPath) ;
                        if(item.className.join("/") == backUpPath){
                            result = false ;
                            return  layer.msg("添加分类重复，已阻止添加");
                        }
                    });
                }
                return result;
            }
            //BOT搜索自动补全
            function searchBotAutoTag(el,url,callback){
                $(el).autocomplete({
                    serviceUrl: url,
                    type:'POST',
                    params:{
                        "categoryName":$(el).val(),
                        "categoryAttributeName":"node",
                        "categoryApplicationId":APPLICATION_ID
                    },
                    paramName:'categoryName',
                    dataType:'json',
                    transformResult:function(data){
                        var result = {
                            suggestions : []
                        };
                        if(data.data){
                            angular.forEach(data.data,function(item){
                                result.suggestions.push({
                                    data:item.categoryId,
                                    value:item.categoryName,
                                    type : item.categoryTypeId
                                })
                            }) ;
                        }
                        return result;
                    },
                    onSelect: function(suggestion) {
                        console.log(suggestion) ;
                        callback(suggestion) ;
                    }
                });
            }
            //相关问搜索自动补全
            /**
             * @params ｛self｝  $scope
             * @params ｛url｝
             * @params ｛el｝
             * @params ｛self｝  responseList
             *  defs :  {listener}{blur}{select}{remove}    监听输入 -  失去焦点隐藏 - 选择添加 - 删除所选项
             * */
            function searchAppointAutoTag(self,el,url,responseList,callback){
                return {
                    listener : listener ,
                    blur : blur ,
                    select : select ,
                    remove : remove
                } ;
                function listener(){
                    $(el).on("input",function(){
                        var title = $(el).val() ;
                        httpRequestPost(url,{"title":title , "applicationId" : APPLICATION_ID},function(data){
                            self.$apply(function(){
                                self.vm[responseList] = data.data
                            })
                        },function(){}) ;
                    }) ;
                }
               function blur(){
                   $timeout(function(){
                       self.$apply(function(){
                           self.vm[responseList] = [] ;
                       })
                   },200)
               }
                function select(item,arr){
                        if(arr.indexOf(item)==-1){
                            arr.push(item) ;
                            //$(el).val("")
                        }else{
                            layer.msg("相关问添加重复")
                        }
                        //self.appointRelative = "";  //清楚title
                        //$scope.vm.appointRelativeList = [];  //清除 列表
                }
                function remove(item){
                   self.vm.appointRelativeGroup.remove(item);
                }
            }
            /**
             * 检测扩展问标签是否重复
             * false   return   ；  true  return ext
             * */
            function isExtensionTagRepeat(current,allExtension,title,weight){
                console.log(allExtension) ;
                var isRepeat = true ;
                var tag = [] ;
                angular.forEach(current,function(tagList){
                    angular.forEach(tagList.extensionQuestionTagList,function(item){
                        if(item.exist){   //标签存在情况下
                            tag.push(item.tagName);
                        }
                    });
                });
                angular.forEach(allExtension,function(extension){
                    var tagLen = 0 ;
                    var itemTag = [] ;
                    angular.forEach(extension.extensionQuestionTagList,function(item){
                        if(item.exist){       //存在标签
                            itemTag.push(item.tagName);
                        }
                        if(tag.inArray(item.tagName) && item.exist){   //标签重复数量
                            tagLen += 1;
                        }
                    }) ;
                    if(tagLen == itemTag.length && tag.length == itemTag.length){
                        layer.msg('根据"'+ title+ '"生成扩展问重复,已阻止添加') ;
                        isRepeat = false ;
                    }
                }) ;
                //判断是否是重复
                if(isRepeat != false){
                    var extension = {
                        "extensionQuestionTitle" : title ,
                        "extensionQuestionType" : weight ,
                        "wholeDecorateTagList" : [
                            {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"36"},
                            {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"37"},
                            {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"38"}
                        ] ,
                        "extensionQuestionTagList" : []
                    }  ;
                    angular.forEach(current,function(tagList){
                        angular.forEach(tagList.extensionQuestionTagList,function(item){
                            var tagTem = {
                                "exist" : item.exist ,
                                "tagClass" : item.tagClass ,
                                "tagName" : item.tagName ,
                                "tagType" : item.tagType
                            };
                            extension.extensionQuestionTagList.push(tagTem) ;
                        });
                    });
                    isRepeat = extension
                }
                return isRepeat
            }
            function removeExtensionHasTag(self,container,item){
                item.wholeDecorateTagList = [
                    {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"36"},
                    {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"37"},
                    {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"38"}
                ] ;
                self.vm[container].push(item)  ;
                //return container ;
            }

            /*bot*/
            function botTreeOperate(self,initUrl,getNodeUrl,selectCall,searchAutoUrl,parentNode){
                parentNode = parentNode?parentNode:".aside-navs"
                var tree = {
                    init : function(){
                        httpRequestPost(initUrl,{
                            "categoryApplicationId": APPLICATION_ID,
                            "categoryPid": "root"
                        },function(data){
                            self.vm.botRoot = data.data;
                        },function(error){
                            console.log(error)
                        });
                    } ,
                    getChildNode : getChildNode ,
                    selectNode : selectNode ,
                } ;
                function getChildNode(){
                    $(parentNode).on("click",'i',function(){
                        var id = $(this).attr("data-option");
                        var that = $(this);
                        if(!that.parent().parent().siblings().length){
                            that.css("backgroundPosition","0% 100%");
                            httpRequestPost(getNodeUrl,{
                                "categoryApplicationId":APPLICATION_ID,
                                "categoryPid": id
                            },function(data){
                                console.log(data) ;
                                if(data.data){
                                    var  html = '<ul class="menus">';
                                    for(var i=0;i<data.data.length;i++){
                                        var typeClass ;
                                        // 叶子节点 node
                                        if((data.data[i].categoryLeaf == 0)){
                                            typeClass = "bot-leaf"　;
                                        }else if((data.data[i].categoryLeaf != 0) && (data.data[i].categoryAttributeName == "edge" )){
                                            typeClass = "bot-edge"　;
                                        }else if((data.data[i].categoryLeaf != 0) && (data.data[i].categoryAttributeName == "node" )){
                                            typeClass = "icon-jj"
                                        }
                                        var  backImage ;
                                        switch(data.data[i].categoryTypeId){
                                            case 160 :
                                                backImage = " bot-divide" ;
                                                break  ;
                                            case 161 :
                                                backImage = " bot-process";
                                                break  ;
                                            case 162 :
                                                backImage = " bot-attr" ;
                                                break  ;
                                            case 163 :
                                                backImage = " bot-default" ;
                                                break  ;
                                        }
                                        html+= '<li>' +
                                            '<div class="slide-a">'+
                                            ' <a class="ellipsis" href="javascript:;">' ;

                                        html+=            '<i class="'+typeClass + backImage +'" data-option="'+data.data[i].categoryId+'"></i>' ;

                                        html+=             '<span>'+data.data[i].categoryName+'</span>'+
                                            '</a>' +
                                            '</div>' +
                                            '</li>'
                                    }
                                    html+="</ul>";
                                    $(html).appendTo((that.parent().parent().parent()));
                                    that.parent().parent().next().slideDown()
                                }
                            },function(err){
                                //layer.msg(err)
                            });
                        }else{
                            if(that.css("backgroundPosition")=="0% 0%"){
                                that.css("backgroundPosition","0% 100%");
                                that.parent().parent().next().slideDown()
                            }else{
                                that.css("backgroundPosition","0% 0%");
                                that.parent().parent().next().slideUp()
                            }
                        }
                    });
                }
                function selectNode(){
                    $(parentNode).on("click","span",function(){
                        //类型节点
                        var pre = $(this).prev() ;
                        angular.element(".icon-jj").css("backgroundPosition","0% 0%");
                        var id = pre.attr("data-option");
                        selectCall(id) ;   //添加bot分類
                        angular.element(parentNode).slideToggle();
                        angular.element(".menu").slideToggle()
                        //$scope.$apply();
                        //}
                    });
                }
                tree.init() ;
                tree.getChildNode() ;
                tree.selectNode() ;
                //return tree ;
            }

/***********************************************************************************************************************************************************************/



















            $scope.currentUser = null;
            $scope.isAuthorized = AuthService.isAuthorized;
            $scope.currentPage = 1;
            $scope.pageSize = 10;

            $scope.tipService = TipService;

            $scope.backTage = $location.url().indexOf("index")>0?false:true;

            //$scope.setCurrentUser = function (data) {
            //    $scope.currentUser = {
            //        id: data.id,
            //        userName: data.name,
            //        realName: data.realName,
            //        sex: data.sex,
            //        email: data.email,
            //        protarit: data.protarit,
            //        phone: data.phone,
            //        identity: data.identity,
            //        birthday: data.birthday,
            //        status: data.status,
            //        role: data.role,
            //        lastLoginTime: data.lastLoginTime,
            //        privileges:data.privileges
            //    };
            //};
            //$scope.getCurrentUserPrivileges = function () {
            //    if($scope.currentUser.privileges)  {
            //        return $scope.currentUser.privileges
            //    }else if(localStorageService.get("privileges")){
            //        return localStorageService.get("privileges")
            //    }else{
            //        return null;
            //    }
            //};

            $scope.getCurrentUserId = function () {
                if($scope.currentUser && $scope.currentUser.id)  {
                    return $scope.currentUser.id;
                }else if(localStorageService.get("SessionId")){
                    return localStorageService.get("SessionId");
                }else{
                    return null;
                }
            };

            $scope.goto = function (id) {
                $location.hash(id);
                $anchorScroll();
            };

            /**  for  文档加工
             * 处理一些共有方法
             * @returns {{currentPage: *, pageSize: *}}
             */
            $scope.initSearchPOJO = function () {
                if($stateParams.isGo || !localStorageService.get($state.current.name)){
                    //页面正常跳转 或 localStore中没有存储参数  默认初始化即可
                    return {
                        currentPage: $scope.currentPage,
                        pageSize: $scope.pageSize
                    };
                }else{
                    //否则 用localStore中的参数去初始化
                    return localStorageService.get($state.current.name);
                }
            };

            /**
             * 非空判断
             */
            $scope.notEmpty = function (param) {
                if(param!=null && param!=undefined && $.trim(param)!=''){
                    return true;
                }
                return false;
            };

            /**
             * 转化成html
             */
            $scope.sceConvertHtml = function (objectList) {
                if($scope.notEmpty(objectList) &&objectList.length>0){
                    objectList.forEach(function (item) {
                        var title = $sce.trustAsHtml(item.title);
                        var content = $sce.trustAsHtml(item.content);
                        item.titleHtml = title;
                        item.contentHtml = content;
                    })
                }
                return objectList;
            };

            //校验特殊字符
            $scope.CheckStr = function (str) {
                var myReg = new RegExp("[`~!@#$^&*()=|{}':;',\\[\\].<>/?~！@#￥……&*（）——|{}\"%'+-/_【】‘；：”“'。，、？]");
                if(myReg.test(str)) return true;
                return false;
            };


            /**
             * 格式化时间
             */
                // 格式化时间
            $scope.format = function(time, format){
                var t = new Date(time);
                var tf = function(i){return (i < 10 ? '0' : '') + i};
                return format.replace(/yyyy|MM|dd|HH|mm|ss/g, function(a){
                    switch(a){
                        case 'yyyy':
                            return tf(t.getFullYear());
                            break;
                        case 'MM':
                            return tf(t.getMonth() + 1);
                            break;
                        case 'mm':
                            return tf(t.getMinutes());
                            break;
                        case 'dd':
                            return tf(t.getDate());
                            break;
                        case 'HH':
                            return tf(t.getHours());
                            break;
                        case 'ss':
                            return tf(t.getSeconds());
                            break;
                    }
                })
            };

            $scope.changeURLArg = function(url,arg,arg_val){
                var pattern=arg+'=([^&]*)';
                var replaceText=arg+'='+arg_val;
                if(url.match(pattern)){
                    var tmp='/('+ arg+'=)([^&]*)/gi';
                    tmp=url.replace(eval(tmp),replaceText);
                    return tmp;
                }else{
                    if(url.match('[\?]')){
                        return url+'&'+replaceText;
                    }else{
                        return url+'?'+replaceText;
                    }
                }
            };

            $scope.storeParams = function(value){
                var key = $state.current.name;
                //var key = $stateParams.current.name;
                localStorageService.set(key,value);
            };

            $scope.goHistory = function(){
                $window.history.back();
            };



            // alert(format(new Date().getTime(), 'yyyy-MM-dd HH:mm:ss'))
            // $scope.$on(AUTH_EVENTS.notAuthenticated, function (event) {
            //     $state.go('login');
            // });
            $scope.$on(AUTH_EVENTS.notAuthorized, function (event,data) {

            });
            $scope.$on(AUTH_EVENTS.logoutSuccess, function (event,data) {

            });
            $scope.$on(AUTH_EVENTS.loginSuccess, function (event,data) {
                $scope.initKnowCheckNoticeView();
                $scope.initNoCheckTaskView();
                $scope.initAnalyseTaskCount();
            });

        }]);
// Source: app/static/admin/js/controller/admin.controller.js
/**
 * Created by mileS on 2017/6/13
 * 控制器
 */
angular.module('adminModule').controller('adminController', [
    '$scope',  "$state", "$stateParams",
    function ($scope,  $state ,$stateParams) {
        $state.go("admin.manage",{userPermission:$stateParams.userPermission});              
    }                       
]);
// Source: app/static/admin/js/controller/application.controller.js

/**
 * Created by mileS on 2017/6/13
 * 控制器
 */

angular.module('adminModule').controller('adminContentController', [
    '$scope',"$state","$timeout","$stateParams","ngDialog","$cookieStore","$rootScope",
    function ($scope,  $state,$timeout,$stateParams,ngDialog,$cookieStore,$rootScope) {
        $scope.vm = {
            userName : $cookieStore.get("userName"),
            userPermission : $stateParams.userPermission,
            addApplicationWindow : addApplicationWindow,
            myApplication : "",
            selectLicence : "",
            newApplicationName : "",
            newScene : "",
            newLicence : "",
            newDescribe : "",
            selectScene : selectScene
        };
        function selectScene(id,applicationId){
            $cookieStore.put("sceneId",id);
            $cookieStore.put("applicationId",applicationId);
            $.getScript('/js/common/config.js');
        }
        getUserInfo();
        myApplication();
        selectLicence();
        //获取用户信息
        function getUserInfo(){
            httpRequestPost("/api/user/findRoleIdByUserId",{
                "userId":$cookieStore.get("userId")
            },function(data){
                //if(data.status==200){
                    console.log(data);
                    $scope.vm.userPermission = data.data.roleList;
                $scope.$apply();
                //}
            },function(err){
            });
        }
        //获取当前 应用场景
        function myApplication(){
            //console.log(getCookie("userId"));
            httpRequestPost("/api/application/application/listApplicationByUserId",{
                "userId":$cookieStore.get("userId")
            },function(data){
                console.log(data);
                $scope.vm.myApplication = data.data;
                $scope.$apply();
            },function(err){
                //console.log(err)
            });

        }

        //var timeout = $timeout(function () {
        //     $scope.vm.selectLicence = ["d","a","b"]
        //},3000);
        //获取 scene
       function selectLicence(){
           httpRequestPost("/api/application/scene/listAllScene",{
            },function(data){
                $scope.vm.selectLicence = data.data;
                $scope.vm.newScene=data.data[0].sceneId;
                console.log(data.data);
                $scope.$apply();
                return data.data
            },function(err){
                console.log(err)
         });
       }

        //打开添加窗口
        function addApplicationWindow() {
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/addAdmin.html",
                scope:$scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(applicationValidate()==false){
                            return false;
                        }
                        addApplication();
                    }else{
                        $scope.vm.newApplicationName="";
                        $scope.vm.newLicence="";
                        $scope.vm.newDescribe="";
                    }
                }

            });
        }
        function applicationValidate(){
            if(lengthCheck($scope.vm.newApplicationName,0,50)==false){
                layer.msg("应用名称不能为空或超过长度限制50");
                return false;
            }
            if(lengthCheck($scope.vm.newLicence,0,20)==false){
                layer.msg("LICENSE不能为空或超过长度限制20");
                return false;
            }
            return true;
        }
        //添加
        function addApplication(){
            //console.log(getCookie("userId"),$scope.vm.newApplicationName,$scope.vm.newScene,$scope.vm.newLicence,$scope.vm.newDescribe);
            httpRequestPost("/api/application/application/addApplication",{
                "userId":$cookieStore.get("userId"),
                "applicationName": $scope.vm.newApplicationName,
                "sceneId": $scope.vm.newScene,
                "applicationLisence": $scope.vm.newLicence,
                "applicationDescription": $scope.vm.newDescribe
            },function(data){
                if(data.status==200){
                    $state.reload();
                }else{
                    layer.msg(data.info);
                    $scope.vm.newApplicationName="";
                    $scope.vm.newLicence="";
                    $scope.vm.newDescribe="";
                }
                console.log(data) ;
            },function(err){
                console.log(err)
            });
        }


    }
]);
// Source: app/static/admin/js/controller/permission.controller.js
/**
 * Created by mileS on 2017/3/21.
 */
angular.module('adminModule').controller('userManageController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",

    function ($scope,localStorageService, $state,$timeout,$stateParams,ngDialog,$cookieStore) {
        $state.go("admin.userManage");
        $scope.vm = {
            listData : "",   // table 数据
            getData : getData,
            paginationConf : "", //分页条件
            userDataTotal:"",   //用户总数
            pageSize : 5,
            addUser : addUser,
            editUser : editUser,
            deleteUser:deleteUser,
            search:search,
            stop:stop,
            userId:$cookieStore.get("userId"),
            verifyRelease:verifyRelease,
            //添加用户所需要数据
            userName : "",
            userLonginName :  "",
            userPassword :  "",
            userPassWord : "", //用户所输入确认密码
            userPhoneNumber  :  "",
            userEmail :"",
            remark:"",
            allowSubmit : 1, //是否允许提交
            //查询所需数据
            searchName:"",
            //查询当前所有应用
            listApplication : "",
            //查询当前所有角色
            listRole:"",
            roleId :"",
            prop :[],
            applicationIds:[],
            savaProp : savaProp,
            saveProp : saveProp ,
            filter : filter,
            selectAll : selectAll,
            selectSingle : selectSingle,
            deleteIds : [],
            selectAllCheck : false,
            deleteUsers : deleteUsers,
            modifyRoleid:'',
        };

        function selectAll(ev){
            //var self = $(ev.target);
            if(!$scope.vm.selectAllCheck){
                $scope.vm.selectAllCheck = true;
                $scope.vm.deleteIds = [];
                angular.forEach($scope.vm.listData,function(item){
                    $scope.vm.deleteIds.push(item.userId);
                });
            }else{
                $scope.vm.selectAllCheck = false
                $scope.vm.deleteIds = [];
            }
            console.log( $scope.vm.deleteIds)
        }
        function selectSingle(ev,id){
            if($scope.vm.deleteIds.inArray(id)){
                $scope.vm.deleteIds.remove(id);
                $scope.vm.selectAllCheck = false ;
            }else{
                 $scope.vm.deleteIds.push(id) ;
            }
            console.log( $scope.vm.deleteIds)
        }


        getData(1);
        //查询列表
        function getData(index){
            $scope.vm.deleteIds = [];
            httpRequestPost("/api/user/listUser",{
                index:(index -1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
            },function(data){
                console.log(data)
                $scope.vm.listData = data.data.userManageList;
                $scope.vm.userDataTotal = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 8,//分页框数量
                };
                $scope.$apply()
            },function(){
                //layer.msg("请求失败")
                console.log("请求失败");
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if($scope.vm.searchName){
                        search(current);
                    }else{
                        getData(current);
                    }
                }, 0)
            }
        },true);

        //添加用户校验
        function verifyRelease(){
            if($scope.vm.userName == null || $scope.vm.userName == ""){
                layer.msg("姓名不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            var name = /^[A-Za-z\u4e00-\u9fa5]+$/;
            if(!name.test($scope.vm.userName)){
                layer.msg("姓名只可以输入汉字或字母的组合!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.userName.length > 20){
                layer.msg("姓名的长度不能超过20个字符!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.userLoginName == null || $scope.vm.userLoginName == ""){
                layer.msg("登录名不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            var reg = /^[0-9a-zA-Z_]{4,20}$/;
            if(!reg.test($scope.vm.userLoginName)){
                layer.msg("登录名只可以是数字、字母、下划线组合，4-20个字符!",{time:1000})
                $scope.vm.allowSubmit=0;
                return 0;
            }

            if($scope.vm.userPassword == null || $scope.vm.userPassword == ""){
                layer.msg("密码不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            var password = /^[0-9a-zA-Z]+$/;
            if(!password.test($scope.vm.userPassword)){
                layer.msg("密码只可以是数字和字母组合!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.userPassword.length>20){
                layer.msg("密码长度不能超过20个字符!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.userPhoneNumber == null || $scope.vm.userPhoneNumber == ""){
                layer.msg("手机号不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            var re = /^1[0-9]{10}$/;
            if (!re.test($scope.vm.userPhoneNumber)) {
                layer.msg("手机号只可以为1开头的11位数字!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.userEmail == null || $scope.vm.userEmail == ""){
                layer.msg("邮箱不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.prop.length == 0){
                layer.msg("请至少选择一个应用!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            return 1;
        }

        //添加用户
        function addUser(){
            console.log($scope.vm.roleId)
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/userManageDialog.html",
                //controller:function($scope){
                //    $scope.show = function(){
                //        console.log(6688688);
                //        $scope.closeThisDialog(); //关闭弹窗
                //    }},
                width : "680px" ,
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                           console.log("--------------")
                            console.log($scope.vm.roleId)
                        if($scope.vm.allowSubmit) {
    
                            httpRequestPost("/api/user/addUser", {
                                userId: $scope.vm.userId,
                                userName: $scope.vm.userName,
                                userLoginName: $scope.vm.userLoginName,
                                userPassword: $scope.vm.userPassword,
                                userPhoneNumber: $scope.vm.userPhoneNumber,
                                userEmail: $scope.vm.userEmail,
                                roleId: $scope.vm.roleId,
                                applicationIds: $scope.vm.prop,
                                remark: $scope.vm.remark,
                            }, function (data) {
                                //刷新页面
                                $state.reload();
                                if (data.status == 10009) {
                                    layer.msg("该登录名已经存在，请重新添加!")
                                } else if (data.status == 10008) {
                                    layer.msg("用户添加成功!");
                                } else {
                                    //layer.msg("用户添加失败!");
                                    console.log("用户添加失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败")
                                console.log("请求失败");
                            })
                        }
                        //保存的同时清空数据
                        $scope.vm.userName = "";
                        $scope.vm.userLoginName = "";
                        $scope.vm.userPassword = "";
                        $scope.vm.userPassWord = "";
                        $scope.vm.userPhoneNumber = "";
                        $scope.vm.userEmail = "";
                        $scope.vm.prop = [];
                        $scope.vm.remark = "";
                    }else{
                        //取消的同时清空数据
                        $scope.vm.userName = "";
                        $scope.vm.userLoginName = "";
                        $scope.vm.userPassword = "";
                        $scope.vm.userPassWord = "";
                        $scope.vm.userPhoneNumber = "";
                        $scope.vm.userEmail = "";
                        $scope.vm.prop = [];
                        $scope.vm.remark = "";
                    }
                }
            });
        }
        //编辑用户

        function editUser(data){
            $scope.vm.userId = data.userId;
            $scope.vm.userName = data.userName;
            $scope.vm.userLoginName = data.userLoginName;
            $scope.vm.userPassword = data.userPassword;
            $scope.vm.userPassWord = data.userPassword;
            $scope.vm.userPhoneNumber = data.userPhoneNumber;
            $scope.vm.userEmail = data.userEmail;
            $scope.vm.remark = data.remark;
            $scope.vm.roleId = data.roleId;
            $scope.vm.roleName=data.roleName;
            $scope.vm.prop = data.applicationName;
            $scope.vm.applicationIds = data.applicationIds;
            $scope.vm.modifyRoleid=$scope.vm.roleId;
            console.log($scope.vm.roleName);
            //$scope.$apply()
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/userManageDialog2.html",
                width : "680px" ,
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if($scope.vm.allowSubmit) {
                            httpRequestPost("/api/user/updateUserById", {
                                userId: data.userId,
                                userName: $scope.vm.userName,
                                userLoginName: $scope.vm.userLoginName,
                                userPassword: $scope.vm.userPassword,
                                userPhoneNumber: $scope.vm.userPhoneNumber,
                                userEmail: $scope.vm.userEmail,
                                roleId: $scope.vm.modifyRoleid,
                                applicationIds: $scope.vm.applicationIds,
                                remark: $scope.vm.remark
                            }, function (data) {
                                //刷新页面
                                $state.reload();
                                if (data.status == 10012) {
                                    layer.msg("用户修改成功!");
                                }else if(data.status = 10009){
                                    layer.msg("登录名重复!");
                                } else {
                                    //layer.msg("用户修改失败!");
                                    console.log("用户修改失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败");
                                console.log("请求失败");
                            })
                        }
                    }else{
                        //取消的同时清空数据
                        $scope.vm.userName = "";
                        $scope.vm.userLoginName = "";
                        $scope.vm.userPassword = "";
                        $scope.vm.userPassWord = "";
                        $scope.vm.userPhoneNumber = "";
                        $scope.vm.userEmail = "";
                        $scope.vm.prop = [];
                        $scope.vm.remark = "";
                    }
                }
            });
        }
        //查询用户
        function search(index){
            if($scope.vm.searchName == '' || $scope.vm.searchName == null){
                getData(1);
            }else {
                httpRequestPost("/api/user/queryUserByUserName", {
                    userName: $scope.vm.searchName,
                    index:(index -1)*$scope.vm.pageSize,
                    pageSize:$scope.vm.pageSize,
                }, function (data) {
                    if (data.status == 10016) {
                        $scope.vm.listData = "";
                        $scope.vm.userDataTotal = 0;
                        $scope.$apply()
                        layer.msg("没有查询到记录!")
                    }
                    $scope.vm.listData = data.data.userManageList;
                    $scope.vm.userDataTotal = data.data.total;
                    $scope.vm.paginationConf = {
                        currentPage: index,//当前页
                        totalItems: data.data.total, //总条数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8,//分页框数量
                    };
                    $scope.$apply()
                }, function () {
                    //layer.msg("请求失败")
                    console.log("请求失败");
                })
            }
        }

        //删除用户
        function deleteUser(userId){
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/api/user/deleteUser",{
                            userId:userId,
                        },function(data){
                            if(data.status == 10010){
                                layer.msg("用户删除成功!");
                            }else{
                                //layer.msg("用户删除失败!");
                                console.log("用户删除失败!");
                            }
                            $state.reload()
                        },function(){
                            //layer.msg("请求失败")
                            console.log("请求失败");
                        })
                    }
                }
            });
        }

        //批量删除用户
        //function deleteUsers(){
        //    httpRequestPost("/api/user/deleteUserByIds",{
        //        ids :  $scope.vm.deleteIds
        //    },function(data){
        //        $state.reload();
        //    },function(){
        //        layer.msg("请求失败")
        //    })
        //}

        //批量删除用户
        function deleteUsers(){
            if($scope.vm.deleteIds == 0){
                layer.msg("请您选择要删除的用户！");
                return;
            }
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback : function(e){
                    if(e === 1) {
                        httpRequestPost("/api/user/deleteUserByIds", {
                            ids: $scope.vm.deleteIds
                        }, function (data) {
                            $state.reload();
                        }, function () {
                            //layer.msg("请求失败")
                            console.log("请求失败");
                        })
                    }
                }
            });
        }

        //改变用户状态
        function stop(userId,statusId) {
            if(statusId == 10002){
                var dialog = ngDialog.openConfirm({
                    template: "/static/admin/updateDialog1.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {
                        if (e === 1) {
                            httpRequestPost("/api/user/updateStatus", {
                                userId: userId,
                                statusId: statusId
                            }, function (data) {
                                $state.reload();
                                if (data.status == 10012) {
                                    layer.msg("用户状态修改成功!");
                                } else {
                                    //layer.msg("用户状态修改失败!");
                                    console.log("用户状态修改失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败")
                                console.log("请求失败");
                            })
                        }
                    }
                });
            }else {
                var dialog = ngDialog.openConfirm({
                    template: "/static/admin/updateDialog.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {
                        if (e === 1) {
                            httpRequestPost("/api/user/updateStatus", {
                                userId: userId,
                                statusId: statusId
                            }, function (data) {
                                $state.reload();
                                if (data.status == 10012) {
                                    layer.msg("用户状态修改成功!");
                                } else {
                                    //layer.msg("用户状态修改失败!");
                                    console.log("用户状态修改失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败")
                                console.log("请求失败");
                            })
                        }
                    }
                });
            }
        }

        getApplication();
        //得到应用列表
        function getApplication(){
            httpRequestPost("/api/application/application/listAllApplication",{
            },function(data){
                $scope.vm.listApplication = data.data
            },function(){
                //layer.msg("请求失败")
                console.log("请求失败");
            })
        }

        //得到角色列表
        getRole();
        function getRole(){
            httpRequestPost("/api/user/role/findAll",{
            },function(data){
                console.log("角色列表")
                console.log(data)
                $scope.vm.listRole = data.data;
                $scope.vm.roleId=data.data[0].roleId;
                $scope.$apply();
            },function(){
                //layer.msg("请求失败")
                console.log("请求失败");
            })
        }

        function savaProp(ev,id){
            console.log(id)
            if($(ev.target).prop("checked")){
                $scope.vm.prop.push(id)
            }else{
                $scope.vm.prop.remove(id)
            }
        };

        function saveProp(ev,id){
            if($(ev.target).prop("checked")){
                $scope.vm.applicationIds.push(id)
            }else{
                $scope.vm.applicationIds.remove(id)
            }
        }

        function filter(val,arr) {
            var len = arr.length;
            for (var i = 0; i < arr.length; i++) {
                if (val != arr[i]) {
                    len -= 1
                }
            }
            if(len == 0){
                return false
            }else{
                return true
            }
        }
    }
]);
// Source: app/static/admin/js/controller/role.controller.js
/**
 * Created by mileS on 2017/3/21.
 */
angular.module('adminModule').controller('roleManageController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",

    function ($scope,localStorageService, $state,$timeout,$stateParams,ngDialog,$cookieStore) {
        $state.go("admin.roleManage");
        $scope.vm = {
            listData : "",   // table 数据
            search : search,    //角色查询
            delRole:delRole,   //角色删除
            editRole:editRole, //角色编辑
            selectAll:selectAll, //列表全选
            selectSingle:selectSingle,  //列表单选
            deleteAllroles:deleteAllroles,//批量删除
            isSelectAll : false,
            userId:$cookieStore.get("userId"),
            roleName:"",
            addRoleName:"",
            addRole:addRole,
            roleModular:roleModular,
            roleIds:[],
            deleteIds:[],
            roleDescribe:"",
            permissionId:'',
            modifyRoleId:'',
            modifyRoleName:"",
            modifyRoleDescribe:"",
        };
        
        search();
        //查询用户
        function search(){
            httpRequestPost("/api/user/role/findAll", {
                roleName: $scope.vm.roleName,
            }, function (data) {
                $scope.vm.listData = data.data;
                $scope.$apply()
            }, function () {
                console.log("请求失败");
            })
        }

        //新增角色
        function addRole(){
            var dialog = ngDialog.openConfirm({
                template: "/static/admin/addRole.html",
                width:"650px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    //detailsMessage();
                    if(e === 1){
                        if($scope.vm.addRoleName==''){
                            layer.msg("角色名不能为空");
                            return false
                        }else if($scope.vm.roleDescribe==''){
                            layer.msg("角色描述不能为空");
                             return false
                        }else{
                            newRole()
                        }
                        
                    }
                }
            });
        }

        //点击获取角色的id
        function roleModular(ids){
            var ids=ids.toString();
           if($scope.vm.roleIds.inArray(ids)){
                $scope.vm.roleIds.remove(ids);
            }else{
                $scope.vm.roleIds.push(ids);

            }   
             console.log( $scope.vm.roleIds);
        }

        //列表全选
        function selectAll(){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false;
                $scope.vm.deleteIds = [];
            }else{
                $scope.vm.isSelectAll=true;
                $scope.vm.deleteIds=[];
                angular.forEach($scope.vm.listData,function (val) {
                    $scope.vm.deleteIds.push(val.roleId);
                })
            }
        }
        //列表单选
        function selectSingle(id){
            if($scope.vm.deleteIds.inArray(id)){
                $scope.vm.deleteIds.remove(id);
                $scope.vm.isSelectAll = false;
            }else{
                $scope.vm.deleteIds.push(id);

            }
            if($scope.vm.deleteIds.length==$scope.vm.listData.length){
                $scope.vm.isSelectAll = true;
            }
        }   

        //添加角色
        function newRole(){
            httpRequestPost("/api/user/role/add ",{
                 roleName:$scope.vm.addRoleName,
                 roleDescribe:$scope.vm.roleDescribe,
                 permissionId:$scope.vm.roleIds.join(','),
                 creatorName:USER_NAME
            },function(data){
               if(data.status==200){
                    layer.msg(data.info) ;
                       $state.reload();
                   }else if(data.status=10009){
                      layer.msg(data.info) ;
                       return false
                 }
            })
        }

        //角色删除
        function delRole(roleId){
             var dialog = ngDialog.openConfirm({
                template: "/static/admin/deleteDialog.html",
                width:"320px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if(e==1){
                         httpRequestPost("/api/user/role/del",{
                            roleIds:roleId,
                        },function(data){
                            console.log(data)
                            if(data.status==200){
                                 layer.msg(data.info) ;
                                   $state.reload();
                               }
                        })
                    }
                       
                }
              })    
        }

        //角色批量删除
        function deleteAllroles(){
             if(!$scope.vm.deleteIds || $scope.vm.deleteIds.length === 0)  {
                layer.msg("请选择删除角色",{time:800});
                return false;
            }
             var dialog = ngDialog.openConfirm({
                template: "/static/admin/deleteDialog.html",
                width:"320px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if(e==1){
                             httpRequestPost("/api/user/role/del",{
                                roleIds:$scope.vm.deleteIds.join(","),
                                },function(data){
                                    console.log(data)
                                    if(data.status==200){
                                     layer.msg(data.info) ;
                                      $state.reload();
                                 }
                            })
                    }
                       
                }
              })    
        }

        //角色编辑
        function editRole(item){
            $scope.vm.modifyRoleName=item.roleName;
            $scope.vm.modifyRoleId=item.roleId;
            $scope.vm.modifyRoleDescribe=item.roleDescribe;
            $scope.vm.permissionId=item.permissionId;
            if(item.permissionId==''){
                $scope.vm.roleIds=[];
            }else{
                $scope.vm.roleIds=item.permissionId.split(",")
            }
           
            console.log($scope.vm.roleIds)
             var dialog = ngDialog.openConfirm({
                template: "/static/admin/modifyRole.html",
                width:"650px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    //detailsMessage();
                    if(e === 1){
                        if($scope.vm.modifyRoleName==''){
                            layer.msg("角色名不能为空");
                            return false
                        }else if($scope.vm.modifyRoleDescribe==''){
                            layer.msg("角色描述不能为空");
                             return false
                        }else{
                             httpRequestPost('/api/user/role/update',{
                                 roleId:$scope.vm.modifyRoleId,
                                 roleName:$scope.vm.modifyRoleName,
                                 roleDescribe:$scope.vm.modifyRoleDescribe,
                                 permissionId:$scope.vm.roleIds.join(',')
                            },function(data){
                               if(data.status==200){
                                 layer.msg(data.info) ;
                                   $state.reload();
                               }
                            })
                        }
                        
                    }
                }
            });

           
        }

    }
]);

// Source: app/static/applicationAnalysis/js/controller/accessStatistics_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器  访问统计
 */
angular.module('applAnalysisModule').controller('accessStatisticsController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter","$interval" ,
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter,$interval) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            applicationId :$cookieStore.get("applicationId"),
            dataTopLeft : "" , //左上角表格数据
            dataTopRigth : "" ,//右上角表格数据
            dataByTimeTotalUser:"",
            contentType : 0 ,  //默认显示访问时间统计
            //访问时间
            timerData : "" ,        //查询的所有数据
            channelId : "" ,        //渠道
            dimensionId : "",       //維度
            TimerSearchTimeType : 1 ,   //time类型
            timerSearchStartTime : "" , //开始时间
            timerSearchEndTime : "",    //结束时间
            queryAccessDataByTime : queryAccessDataByTime ,
            isTimerChartShow : true ,
            // 导出
            exportByTime : exportByTime ,
            exportByChannel : exportByChannel,

            //访问渠道
            accessSearchTimeType : 1  ,  //渠道time类型
            accessSearchStartTime : "" , //开始时间
            accessSearchEndTime : "" ,   //结束时间
            queryAccessDataByType : queryAccessDataByChannel,
        };
        //***********************************   20117/17 ADD    OPERATOR  : MILES **************************************************************//
        //访问数据时间统计
        var TimerChart = echarts.init(document.getElementById('access_echart_div'));
        //访问数据渠道统计
        var accessChart = echarts.init(document.getElementById('access_echart_div2'));
        //myChart.setOption(option);
        //改变echart 数据
        function setTimerChartOption(xData,yData1,yData2){
            return {
                title : {
                    text: '访问数据时间统计',
                },
                tooltip : {
                    trigger: 'axis'
                },
                legend: {
                    data:['人数']
                },
                toolbox: {
                    show : true,
                    feature : {
                        mark : {show: true},
                        //dataView : {show: true, readOnly: false},
                        //magicType : {show: true, type: ['line', 'bar']},
                        //restore : {show: true},
                        //saveAsImage : {show: true}
                    }
                },
                calculable : true,
                xAxis : [
                    {
                        type : 'category',
                        boundaryGap : false,
                        axisTick: {onGap:false},
                        splitLine: {show:false},
                        data : xData
                    }
                ],
                yAxis : [
                    {
                        type : 'value',
                        axisLabel : {
                            formatter: '{value} '
                        }
                    }
                ],
                series : [
                    {
                        name:'总会话数',
                        type:'line',
                        data:yData1,
                        markPoint : {
                            data : [
                                {type : 'max', name: '最大值'},
                                {type : 'min', name: '最小值'}
                            ]
                        },
                        markLine : {
                            data : [
                                {type : 'average', name: '平均值'}
                            ]
                        }
                    },
                    {
                        name:'总用户人数',
                        type:'line',
                        data:yData2,
                        markPoint : {
                            data : [
                                {name : '周最低', value : -2, xAxis: 1, yAxis: -1.5}
                            ]
                        },
                        markLine : {
                            data : [
                                {type : 'average', name : '平均值'}
                            ]
                        }
                    }
                ]
            }
        }
        //访问数据渠道统计
        function setAccessChartOption(ydata130,ydata131,ydata132){
            return {
                title: {
                    text: '总会话数',
                },
                tooltip : {
                    trigger: 'axis',
                    axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                        type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                    },
                    formatter: function (params) {
                        var tar = params[0];
                        return tar.name + '<br/>' + tar.seriesName + ' : ' + tar.value;
                    }
                },
                toolbox: {
                    show : true,
                    feature : {
                        mark : {show: true},
                        //dataView : {show: true, readOnly: false},
                        //restore : {show: true},
                        //saveAsImage : {show: true}
                    }
                },
                xAxis : [
                    {
                        type : 'category',
                        splitLine: {show:false},
                        data : ['微信','web','app']
                    }
                ],
                yAxis : [
                    {
                        type : 'value'
                    }
                ],
                series : [
                    {
                        name:'会话数',
                        type:'bar',
                        stack: '总量',
                        data:[ydata130,ydata131,ydata132]
                    },
                ]
            };
        }
        //原始数据获取
        function getOriginData(n ,data){
            var originData = {
                "时间"       : [] ,
                "有效用户数" : [] ,
                "有效会话数" : [] ,
                "总会话数"   : [] ,
                "总用户人数" : []
            } ;
            for(var i = 0 ; i < n ; i++){
                originData["时间"].push( data[i] ) ;
                originData["有效用户数"].push({
                    "date" : data[i] ,
                    "users" : 0
                }) ;
                originData["有效会话数"].push({
                    "date" : data[i] ,
                    "times" : 0
                }) ;
                originData["总会话数"].push({
                    "date" : data[i] ,
                    "times" : 0
                }) ;
                originData["总用户人数"].push({
                    "date" : data[i] ,
                    "users" : 0
                })
            }
            return originData
        }
        //获取小时时间间隔
        function getHourStep(time){
            var timer ;
            if(time < 10){
                timer = "0"+time + ":00-"+time+1+":00"
            }else{
                timer = time + ":00-"+time+1+":00"
            }
            console.log(timer)
            return timer ;
        }
        //*********************************************************************************************************************************8//
        function exportByTime(){
            httpRequestPost("/api/analysis/access/export",{
                "applicationId":APPLICATION_ID ,
                "startTime":$scope.vm.timerSearchStartTime ,
                "endTime":$scope.vm.timerSearchEndTime ,
                "requestTimeType" : $scope.vm.TimerSearchTimeType ,
                "dimensionId" : $scope.vm.dimensionId,
                "channelId" : $scope.vm.channelId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})
        }
        function exportByChannel(){
            httpRequestPost("/api/analysis/access/exportByChannel",{
                "applicationId":APPLICATION_ID ,
                "startTime":$scope.vm.accessSearchStartTime ,
                "endTime":$scope.vm.accessSearchEndTime ,
                "requestTimeType" : $scope.vm.accessSearchTimeType ,
                "dimensionId" : $scope.vm.dimensionId,
                "channelId" : $scope.vm.channelId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})
        }

        //左上表格数据
        void function getTopLeft(){
            httpRequestPost("/api/analysis/access/queryAccessDataTopLeft",{
                "applicationId":APPLICATION_ID,
            },function(data){
                $scope.$apply(function(){
                    $scope.vm.dataTopLeft = [
                        {
                            "name" : "今日",
                            "data" : data.data["今天"]
                        } ,
                        {
                            "name" : "昨天",
                            "data" : data.data["昨天"]
                        } ,
                        {
                            "name" : "历史最高",
                            "data" : data.data["历史最高"]
                        }
                    ] ;
                })
            },function(){})
        }();
        //右上表格数据
        void function getTopRight(){
            httpRequestPost("/api/analysis/access/queryAccessDataTopright",{
                "applicationId":APPLICATION_ID
            },function(data){
                $scope.$apply(function(){
                    $scope.vm.dataTopRigth ={
                        "today":data.data["今日"] ,
                        "history":data.data["历史"]
                    } ;
                })
            },function(){

            })
        }();
        //访问数据时间统计
        function queryAccessDataByTime(){
            var xData,yData1,yData2 ;
            var dateJump ; //获取时间间隔
            if($scope.vm.timerSearchStartTime && $scope.vm.timerSearchEndTime){
                dateJump = getTimeJump($scope.vm.timerSearchStartTime,$scope.vm.timerSearchEndTime) + 1 ;
                console.log(dateJump)
            }else if($scope.vm.TimerSearchTimeType==1 || $scope.vm.TimerSearchTimeType==2 ){
                dateJump = 1 ;
            }else{
                dateJump = 7
            }
            //alert(dateJump)

            var parameter = {
                "applicationId":APPLICATION_ID ,
                "startTime":($scope.vm.timerSearchStartTime&&$scope.vm.timerSearchEndTime)?$scope.vm.timerSearchStartTime:"" ,
                "endTime":($scope.vm.timerSearchStartTime&&$scope.vm.timerSearchEndTime)?$scope.vm.timerSearchEndTime:"" ,
                "requestTimeType" : $scope.vm.TimerSearchTimeType ,
                "dimensionId" : $scope.vm.dimensionId,
                "channelId" : $scope.vm.channelId
            }
            httpRequestPost("/api/analysis/access/queryAccessDataByTime",parameter,function(data){
                $scope.$apply(function(){
                    if(data.data["有效用户数"].length==0 && data.data["有效会话数"].length==0 && data.data["总会话数"].length==0 && data.data["总用户人数"].length==0){
                        layer.msg("所查询时间段有效数据为空") ;
                        $scope.vm.timerData = "" ;
                        $scope.vm.isTimerChartShow = false ;
                    }else{
                        $scope.vm.isTimerChartShow = true ;
                        /***
                         *  @type单天查询
                         *  @params 昨天 今天
                         *  @params 自定义时间相等
                         * **/
                        if(dateJump==1){
                            // echart 图表显示
                            xData = ["00:00","01:00","02:00","03:00","04:00","05:00","06:00","07:00","08:00","09:00","10:00","11:00","12:00",
                                "13:00","14:00","15:00","16:00","17:00","18:00","19:00","20:00","21:00","22:00","23:00","24:00"] ;
                            yData1 = [].fill.call(new Array(24),0) ;
                            yData2 = [].fill.call(new Array(24),0) ;
                            angular.forEach(data.data["总会话数"], function(data,index1){
                                yData1[data.date] = data.times ;
                            });
                            angular.forEach(data.data["总用户人数"], function(data,index1){
                                yData2[data.date] = data.users ;
                            });
                            //表格数据
                            var tableDate = [];
                            for(var i = 0 ;i < xData.length ; i++ ){
                                if(i!=xData.length-1){
                                    tableDate.push(xData[i]+'-'+xData[i+1])
                                }
                            }
                            $scope.vm.timerData = getOriginData(tableDate.length,tableDate);
                            angular.forEach($scope.vm.timerData["有效用户数"],function(useData,useIndex){
                                angular.forEach(data.data["有效用户数"],function(item,index){
                                    $scope.vm.timerData["有效用户数"][item.date].users = item.users
                                }) ;
                            }) ;
                            angular.forEach($scope.vm.timerData["有效会话数"],function(useData,useIndex){
                                angular.forEach(data.data["有效会话数"],function(item,index){
                                    $scope.vm.timerData["有效会话数"][item.date].times = item.times
                                }) ;
                            }) ;
                            angular.forEach($scope.vm.timerData["总会话数"],function(useData,useIndex){
                                angular.forEach(data.data["总会话数"],function(item,index){
                                    $scope.vm.timerData["总会话数"][item.date].times = item.times
                                }) ;
                            }) ;
                            angular.forEach($scope.vm.timerData["总用户人数"],function(useData,useIndex){
                                angular.forEach(data.data["总用户人数"],function(item,index){
                                    $scope.vm.timerData["总用户人数"][item.date].users = item.users
                                }) ;
                            }) ;
                            /***
                             *  @type单天查询
                             *  @params 过去七天
                             *  @params 自定义时间大于一天
                             * **/
                        }else{
                            //获取时间段内的所有时间
                            if($scope.vm.timerSearchStartTime && $scope.vm.timerSearchEndTime){
                                xData = getAllDateFromDateJump($scope.vm.timerSearchStartTime,$scope.vm.timerSearchEndTime) ;
                            }else{
                                xData = getBeforeDate(dateJump,true,true)  ;
                            }
                            $scope.vm.timerData = getOriginData(xData.length,xData);
                            console.log($scope.vm.timerData)  ;
                            console.log(xData)  ;
                            // 表格显示数据
                            angular.forEach($scope.vm.timerData["有效用户数"],function(useData,useIndex){
                                angular.forEach(data.data["有效用户数"],function(item,index){
                                    if(item.date==useData.date){
                                        $scope.vm.timerData["有效用户数"][useIndex].users = item.users
                                    }
                                }) ;
                            }) ;
                            angular.forEach($scope.vm.timerData["有效会话数"],function(useData,useIndex){
                                angular.forEach(data.data["有效会话数"],function(item,index){
                                    if(item.date==useData.date){
                                        $scope.vm.timerData["有效会话数"][useIndex].times = item.times
                                    }
                                }) ;
                            }) ;
                            angular.forEach($scope.vm.timerData["总会话数"],function(useData,useIndex){
                                angular.forEach(data.data["总会话数"],function(item,index){
                                    if(item.date==useData.date){
                                        $scope.vm.timerData["总会话数"][useIndex].times = item.times
                                    }
                                }) ;
                            }) ;
                            angular.forEach($scope.vm.timerData["总用户人数"],function(useData,useIndex){
                                angular.forEach(data.data["总用户人数"],function(item,index){
                                    if(item.date==useData.date){
                                        $scope.vm.timerData["总用户人数"][useIndex].users = item.users
                                    }
                                }) ;
                            }) ;
                            //echart 图表数据
                            yData1 = [].fill.call(new Array(7),0) ;
                            yData2 = [].fill.call(new Array(7),0) ;
                            angular.forEach($scope.vm.timerData["总会话数"],function(item,index){
                                yData1[index] = item.times ;
                            });
                            angular.forEach($scope.vm.timerData["总用户人数"], function(item,index){
                                yData2[index] = item.users ;
                            });
                        }
                        TimerChart.setOption(setTimerChartOption(xData,yData1,yData2)) ;
                    }
                }) ;
            },function(){})
        };
        queryAccessDataByTime();
        //访问数据渠道统计
        function queryAccessDataByChannel(){
            httpRequestPost("/api/analysis/access/queryAccessDataByType",{
                "applicationId":APPLICATION_ID,
                "startTime":$scope.vm.accessSearchStartTime ,
                "endTime":$scope.vm.accessSearchEndTime ,
                "requestTimeType" : $scope.vm.accessSearchTimeType ,
            },function(data){
                var tableList = [] ;
                // 初始渠道
                var  intervaler = $interval(function(){
                    if($scope.master.channelList){
                        angular.forEach($scope.master.channelList,function(item,index){
                            tableList.push({
                                name : item.channelName  ,
                                index : index ,
                                tableData :[
                                    0,0,0,0
                                ]
                            });

                        });
                        $interval.cancel(intervaler) ;
                        var data130 =[];
                        //web
                        var data131 =[];
                        //app
                        var data132 =[];

                        $scope.dataChannelTalk = data.data["总会话数"];
                        $scope.dataChannelUser = data.data["总用户人数"];
                        $scope.dataChannelVilidTalk = data.data["有效会话数"];
                        $scope.dataChannelVilidUser = data.data["有效用户数"];
                        //console.log( $scope.dataChannelTalk[0]["times"]);
                        //总会话数
                        for(var i = 0;i<$scope.dataChannelTalk.length;i++){
                            if($scope.dataChannelTalk[i]["channel"] == "130"){
                                data130.push({_key:0,_value:$scope.dataChannelTalk[i]["times"]});
                            }
                            if($scope.dataChannelTalk[i]["channel"] == "131"){
                                data131.push({_key:0,_value:$scope.dataChannelTalk[i]["times"]});
                            }
                            if($scope.dataChannelTalk[i]["channel"] == "132"){
                                data132.push({_key:0,_value:$scope.dataChannelTalk[i]["times"]});
                            }
                        }
                        //总用户人数
                        for(var i = 0;i<$scope.dataChannelUser.length;i++){
                            if($scope.dataChannelUser[i]["channel"] == "130"){
                                data130.push({_key:1,_value:$scope.dataChannelUser[i]["users"]});
                            }
                            if($scope.dataChannelUser[i]["channel"] == "131"){
                                data131.push({_key:1,_value:$scope.dataChannelUser[i]["users"]});
                            }
                            if($scope.dataChannelUser[i]["channel"] == "132"){
                                data132.push({_key:1,_value:$scope.dataChannelUser[i]["users"]});
                            }
                        }
                        //有效会话数
                        for(var i = 0;i<$scope.dataChannelVilidTalk.length;i++){
                            if($scope.dataChannelVilidTalk[i]["channel"] == "130"){

                                data130.push({_key:2,_value:$scope.dataChannelVilidTalk[i]["times"]});
                            }
                            if($scope.dataChannelVilidTalk[i]["channel"] == "131"){
                                data131.push({_key:2,_value:$scope.dataChannelVilidTalk[i]["times"]});
                            }
                            if($scope.dataChannelVilidTalk[i]["channel"] == "132"){
                                data132.push({_key:2,_value:$scope.dataChannelVilidTalk[i]["times"]});
                            }
                        }
                        //有效用户数
                        for(var i = 0;i<$scope.dataChannelVilidUser.length;i++){
                            if($scope.dataChannelVilidUser[i]["channel"] == "130"){
                                data130.push({_key:3,_value:$scope.dataChannelVilidUser[i]["users"]});
                            }
                            if($scope.dataChannelVilidUser[i]["channel"] == "131"){
                                data131.push({_key:3,_value:$scope.dataChannelVilidUser[i]["users"]});
                            }
                            if($scope.dataChannelVilidUser[i]["channel"] == "132"){
                                data132.push({_key:3,_value:$scope.dataChannelVilidUser[i]["users"]});
                            }
                        }
                        $scope.data130 = data130;
                        $scope.data131 = data131;
                        $scope.data132 = data132;

                        var ydata130;
                        var ydata131;
                        var ydata132;

                        // 指定图表的配置项和数据
//    var data130 = data130[0]._value;
//    var data131 = data131[0]._value;
//    var data132 = data132[0]._value;
                        if(data130[0] == undefined ){
                            ydata130 =0
                        }else{
                            ydata130 =$scope.data130[0]._value
                        }
                        if(data131[0] == undefined ){
                            ydata131 =0
                        }else{
                            ydata131 =$scope.data131[0]._value
                        }
                        if(data132[0] == undefined ){
                            ydata132 =0
                        }else{
                            ydata132 =$scope.data132[0]._value
                        }

                        // 使用刚指定的配置项和数据显示图表。
                        accessChart.setOption(setAccessChartOption(ydata130,ydata131,ydata132));


                    }
                },50) ;
                console.log(tableList) ;
                //有效用户数
                //有效会话数
                //总会话数
                //总用户人数
                //for(var key in data.data){
                //        angular.forEach(data.data["总会话数"],function(item,index){
                //            if(item.channel == 131)
                //            tableList[0].tableList.push(item)
                //        })
                //}
                //vx

            },function(){

            })
        };
        function exportByTime(){
            httpRequestPost("/api/analysis/access/export",{
                "applicationId":APPLICATION_ID ,
                "startTime":$scope.vm.timerSearchStartTime ,
                "endTime":$scope.vm.timerSearchEndTime ,
                "requestTimeType" : $scope.vm.TimerSearchTimeType ,
                "dimensionId" : $scope.vm.dimensionId,
                "channelId" : $scope.vm.channelId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})
        }
        function exportByChannel(){
            httpRequestPost("/api/analysis/access/exportByChannel",{
                "applicationId":APPLICATION_ID ,
                "startTime":$scope.vm.accessSearchStartTime ,
                "endTime":$scope.vm.accessSearchEndTime ,
                "requestTimeType" : $scope.vm.accessSearchTimeType ,
                "dimensionId" : $scope.vm.dimensionId,
                "channelId" : $scope.vm.channelId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})
        }
        queryAccessDataByChannel();


    }
]);
// Source: app/static/applicationAnalysis/js/controller/applAnalysis_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */

angular.module('applAnalysisModule').controller('applAnalysisController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog) {
        //$state.go("functionalTest.questionTest",{userPermission:$stateParams.userPermission});
        $scope.vm = {
        };


    }
]);
// Source: app/static/applicationAnalysis/js/controller/flowMonitoring_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器 
 */
angular.module('applAnalysisModule').controller('flowMonitoringController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter) {

        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            serviceMemory: "",          //服务内存
            cpuOccupancy:  "" ,         //CPU占有率
            xAxis:"",     
            cpu:"",
            memory:"",
            responseTime:"",
            responseStatus:""

        };

        $scope.vm.serviceMemory=[];
        $scope.vm.cpuOccupancy=[];
        $scope.vm.xAxis=[];


        httpRequestPost("/api/ms/monitoringServerABC/monitoringABC",{
                "applicationId": $scope.vm.applicationId
            },function(data){  
                  console.log(data)
                  var len=data.data.length;
                  for(var i=0;i<len;i++){
                    $scope.vm.cpuOccupancy.push(data.data[i].cpu);
                    $scope.vm.serviceMemory.push(data.data[i].memory);
                    $scope.vm.xAxis.push(data.data[i].date);
                  }
                    $scope.vm.cpu=data.data[len-1].cpu;
                    $scope.vm.memory=data.data[len-1].memory;
                    $scope.vm.responseTime=data.data[len-1].responseTime;
                    $scope.vm.responseStatus=data.data[len-1].responseStatus;
                    console.log(data.data[len-1].cpu);
                    console.log(data.data[len-1].memory);
                    $scope.$apply();
            })  


    }
]);
// Source: app/static/applicationAnalysis/js/controller/knowledgeRanking_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('knowledgeRankingController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter","$window",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter,$window) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            applicationId :APPLICATION_ID,
            getList : getList ,
            getKnowledgeList:getKnowledgeList,
            listData : null ,
            listDataK:null,// table 数据 
            dimensions : [] ,
            channels : [] ,
            channelId  : null ,
            dimensionId : null ,
            timeType : 1,
            timeStart : null,
            timeEnd : null,
            timeList : [],
            total : null,
            talkDetail : null,
            talkDetailTotal : 0,
            userId : null,
            exportKnowledgeExcel : exportKnowledgeExcel,  //导出知识点排名统计
            exportNoMatchExcel : exportNoMatchExcel, //未匹配问题导出
            contentType:0
        };
        //init echart 图表
        var myChart = echarts.init(document.getElementById('knowRanking'));
        var myChartQuestion = echarts.init(document.getElementById('questionRanking'));
        //未匹配問題
        function getList(index){
            getKnowledgeList(1);
            httpRequestPost("/api/analysis/noMatch/searchList",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": 0,
                "pageSize": 10
            },function(data){
                console.log(data) ;
                $scope.$apply(function(){
                    var xData=[] ,yData=[] ;
                    angular.forEach(data.data.objs,function(item,index){
                        xData.push(item.userQuestion) ;
                        yData.push(item.questionNumber) ;
                        console.log(xData)
                    }) ;
                    if(yData.length==0 || xData.length==0){
                        yData=[0,0,0,0,0,0];
                    }
                    myChartQuestion.setOption(setEchartOption(xData,yData));
                    $scope.vm.listData = data.data.objs;
                    $scope.vm.listDataTotal = data.data.total;
                });
            });
        }
        //知識點排名
        function getKnowledgeList(index){
            httpRequestPost("/api/analysis/knowledgeRanking/searchKnowledgeRankingList",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": 0,
                "pageSize": 10
            },function(data){
                console.log(data) ;
                $scope.$apply(function(){
                    var xData=[] ,yData=[] ;
                    angular.forEach(data.data.objs,function(item,index){
                        xData.push(item.knowledgeTitle) ;
                        yData.push(item.questionNumber)
                        console.log(xData)
                    }) ;
                    if(yData.length==0 || xData.length==0){
                        yData=[0,0,0,0,0,0];
                    }
                    myChart.setOption(setEchartOption(xData,yData));
                    $scope.vm.listDataK = data.data.objs;
                    $scope.vm.listDataTotalK = data.data.total;
                });
            });
        }
        init();
        function init(){
            getDimensions();
            getChannel();
            getKnowledgeList(1);
            getList(1);
        }
        //維度
        function getDimensions(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensions = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }

        //渠道
        function getChannel(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.channels = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        };

        //function exportKnowledgeExcel(){
        //    var urlParams =
        //        "?applicationId="+APPLICATION_ID+"&channelId="+$scope.vm.channelId+"&dimensionId="+$scope.vm.dimensionId +
        //        "&requestTimeType="+$scope.vm.timeType + "&startTime="+$scope.vm.timeStart + "&endTime="+$scope.vm.timeEnd;
        //    var url = "/api/analysis/download/export"+urlParams  ;//请求的url
        //    $window.open(url,"_blank") ;
        //}

        function exportKnowledgeExcel(){
            httpRequestPost("/api/analysis/knowledgeRanking/export",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": 0,
                "pageSize": 10
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})
        }

        function exportNoMatchExcel(){
            httpRequestPost("/api/analysis/noMatch/export",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": 0,
                "pageSize": 10
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})

        }
        function setEchartOption(xData,yData){
            return {
                    //title: '知识点排名统计表' ,
                    color: ['#3398DB'],
                    tooltip : {
                        trigger: 'axis',
                            axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                        }
                    },
                formatDate:function(datestring){
                    if(datestring.length!=8) return;
                    return datestring.substring(2,4)+'/'+datestring.substring(4,6)+'/'+datestring.substring(6,8);
                },

                    xAxis : [
                        {
                            type : 'category',
                            data : xData,
                            axisTick: {
                                alignWithLabel: true
                            },
                            axisLabel:{
                                interval: 0 ,
                                rotate:-30 ,
                                formatter:function(val){
                                    if(val.length>7){
                                        val = val.toString().substring(0,7)+"...";
                                    }
                                    return val//横轴信息文字竖直显示
                                }
                            } ,
                        }
                    ],
                    grid: { // 控制图的大小，调整下面这些值就可以，
                        x: 40,
                        x2: 100,
                        y2: 150// y2可以控制 X轴跟Zoom控件之间的间隔，避免以为倾斜后造成 label重叠到zoom上
                    },
                    yAxis : [
                        {
                            type : 'value'
                        }
                    ],
                    series : [
                        {
                            name:'访问次数',
                            type:'bar',
                            barWidth: '60%',
                            data:yData,
                            itemStyle: {
                                normal: {
                                    color: function (params) {
                                        // build a color map as your need.
                                        var colorList = [
                                            '#C1232B', '#B5C334', '#FCCE10', '#E87C25', '#27727B',
                                            '#FE8463', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                                            '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'
                                        ];
                                        return colorList[params.dataIndex]
                                    }
                                }
                            }}
                    ]
            }
        }

    }
]);
// Source: app/static/applicationAnalysis/js/controller/newKnowledgeDiscoveryLearn_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('newKnowledgeDiscoveryLearnController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore) {
        $scope.vm = {
            applicationId :$cookieStore.get("applicationId"),
            userId :$cookieStore.get("userId"),
            userName :$cookieStore.get("userLoginName"),
            searchNewKnowledgeDiscovery : searchNewKnowledgeDiscovery ,
            listNoReview : listNoReview ,
            listData : null ,   // table 数据
            paginationConf : null ,//分页条件
            pageSize : 5  , //默认每页数量
            listData1 : null ,   // table 数据
            paginationConf1 : null ,//分页条件
            paginationConf2 : null ,//分页条件
            pageSize1 : 5  , //默认每页数量
            dimensions : [] ,
            channels : [] ,
            channelId  : null ,
            dimensionId : null ,
            timeType : 0,
            timeStart : null,
            timeEnd : null,
            channelId1  : null ,
            dimensionId1 : null ,
            timeType1 : 0,
            timeStart1 : null,
            timeEnd1 : null,
            timeList : [],
            currentPage : 1,
            total : null,
            total1 : null,
            ignore:ignore,
            associate:associate,
            learn:learn,
            review:review,
            statusId:0,
            passStatusId:0,
            tab:tab,
            currQuestion:"",
            searchByKnowledgeTitle:searchByKnowledgeTitle,
            knowledgeList:null,
            question:null,
            question1:null,
            content:content,
            talkDetail:null,
            associateCheck:associateCheck,
            currKnowledgeTitle:null ,
            knowledgeContent : "",
            keyLogin:keyLogin
        };
        function keyLogin(e){
            var srcObj = e.srcElement ? e.srcElement : e.target;
            var keycode = window.event?e.keyCode:e.which;
            if(keycode==13){//回车
                srcObj.blur() ;
                searchByKnowledgeTitle(1);
                srcObj.focus() ;
            }
        }
        //选项卡
        function tab(obj1, obj2) {
            $(obj1).click(function () {
                $(this).addClass('cur').siblings().removeClass();
                $(obj2).children('div').eq($(this).index()).attr('class', 'db').siblings().attr('class', 'dn');
                searchNewKnowledgeDiscovery(1);
                listNoReview(1);
            });
        }

        tab('.tab_tit span', '.tab_con');

        //list 分页变化加载数据
        // $scope.$watch('vm.paginationConf.currentPage', function(current){
        //     if(current){
        //         searchNewKnowledgeDiscovery(current);
        //     }
        // });
        var timeout;
        $scope.$watch('vm.paginationConf.currentPage',function(current){
            if(current){
                if(timeout){
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function(){
                    searchNewKnowledgeDiscovery(current);
                },100);
            }
        },true);

        // $scope.$watch('vm.paginationConf1.currentPage', function(current){
        //     if(current){
        //         listNoReview(current);
        //     }
        // });
        var timeout1;
        $scope.$watch('vm.paginationConf1.currentPage',function(current){
            if(current){
                if(timeout1){
                    $timeout.cancel(timeout1);
                }
                timeout1 = $timeout(function(){
                    listNoReview(current);
                },100);
            }
        },true);

        // $scope.$watch('vm.paginationConf2.currentPage', function(current){
        //     if(current){
        //         searchByKnowledgeTitle(current);
        //     }
        // });
        var timeout2;
        $scope.$watch('vm.paginationConf2.currentPage',function(current){
            if(current){
                if(timeout2){
                    $timeout.cancel(timeout2);
                }
                timeout2 = $timeout(function(){
                    searchByKnowledgeTitle(current);
                },100);
            }
        },true);
        
        $scope.$watch('vm.channelId1', function(){
            $scope.vm.listData1 = null;
            $scope.vm.paginationConf1 = {
                currentPage: 0,//当前页
                totalItems: 0, //总条数
                pageSize: 1,//第页条目数
                pagesLength: 8//分页框数量
            };
        });
        //表格列表
        function searchNewKnowledgeDiscovery(index){
            var question = null;
            if(nullCheck($scope.vm.question)==true){
                question = "%"+$scope.vm.question+"%";
            }
            httpRequestPost("/api/analysis/knowledgeLearn/newKnowledgeDiscoveryLearnUnlearn",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "question": question,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.listData = data.qaLogs;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: Math.ceil(data.qalogTotal/5), //总条数
                    pageSize: 1,//第页条目数
                    pagesLength: 8//分页框数量
                };
                $scope.$apply();
            });
        }
        function searchByKnowledgeTitle(index){
            if(nullCheck($("#inputValue").val())==true){
                httpRequestPost("/api/ms/knowledgeManage/overView/searchList",{
                    "applicationId":$scope.vm.applicationId,
                    "index": (index-1)*$scope.vm.pageSize1,
                    "pageSize": $scope.vm.pageSize1,
                    "sceneIds":null,
                    "knowledgeTitle": $("#inputValue").val().trim(),
                    "knowledgeContent":null,
                    "knowledgeUpdate":null,
                    "knowledgeExpDateEnd":null,
                    "knowledgeExpDateStart":null,
                    "knowledgeOrigin":0,
                    "updateTimeType":0,
                    "knowledgeType":"",
                    "knowledgeExtensionQuestion":""
                },function(data){
                    $scope.vm.knowledgeList = data.data.objs;
                    $scope.vm.paginationConf2 = {
                        currentPage: index,//当前页
                        totalItems: Math.ceil(data.data.total/5), //总条数
                        pageSize: 1,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                    $scope.$apply();
                });
            }else{
                layer.msg("请输入要查找的标题");
            }
        }
        function listNoReview(index){
            var question = null;
            if(nullCheck($scope.vm.question1)==true){
                question = "%"+$scope.vm.question1+"%";
            }
            httpRequestPost("/api/analysis/knowledgeLearn/listNoReview",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId1,
                "question": question,
                "dimensionId": $scope.vm.dimensionId1,
                "requestTimeType":$scope.vm.timeType1,
                "startTime": $scope.vm.timeStart1,
                "endTime": $scope.vm.timeEnd1,
                "index": (index-1)*$scope.vm.pageSize1,
                "pageSize": $scope.vm.pageSize1,
                "status_id": $scope.vm.statusId,
                "pass_status_id": $scope.vm.passStatusId,
                "learn_type": 1
            },function(data){
                $scope.vm.listData1 = data.reviewRecords;
                $scope.vm.paginationConf1 = {
                    currentPage: index,//当前页
                    totalItems: Math.ceil(data.reviewRecordTotal/5), //总条数
                    pageSize: 1,//第页条目数
                    pagesLength: 8//分页框数量
                };
                $scope.$apply();
            });
        }
        //获取
        init();
        function init(){
            getDimensions();
            getChannel();
            searchNewKnowledgeDiscovery(1);
            listNoReview(1);
        }
        function ignore(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要忽略的记录！");
                return;
            }
            layer.confirm('确认要忽略吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/analysis/knowledgeLearn/ignoreByContent",request,function(data){
                    if(data!=null){
                        searchNewKnowledgeDiscovery($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        function associate(requestId,content){
            $scope.vm.knowledgeList=null;
            $scope.vm.currQuestion="用户问题:"+content;
            var dialog = ngDialog.openConfirm({
                template:"/static/applicationAnalysis/associateLearn.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    if(e === 1){
                        assembleLearnData(requestId);
                    }
                }
            });
        }

        /**
         * 组装知识学习数据
         * @param requestId
         * @param content
         */
        function assembleLearnData(requestId){
            var ids = document.getElementsByName("sid2");
            var id_array = [];
            var knowledgeTitle="";
            var knowledgeType=0;
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                    knowledgeTitle = $(ids[i]).attr("knowledgeTitle");
                    knowledgeType = $(ids[i]).attr("knowledgeType");
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要关联的知识");
                return;
            }
            httpRequestPost("/api/analysis/knowledgeLearn/learnByContent",{
                "qalog_id" : requestId,
                "knowledge_id":id_array.pop(),
                "knowledge_type":knowledgeType,
                "knowledge_title":knowledgeTitle,
                "learn_type":1,
                "knowledge_learn_type":0
            },function(data){
                if(data.info){
                    layer.msg(data.info);
                    searchNewKnowledgeDiscovery(1);
                }
            },function(err){
                console.log(err);
            });
        }
        function review(pass){
            var ids = document.getElementsByName("sid1");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            var msg = "";
            if(pass==0){
                msg = "拒绝";
            }else{
                msg = "通过";
            }
            if (id_array.length == 0) {
                layer.msg("请选择要"+msg+"的记录！");
                return;
            }
            layer.confirm('确认要'+msg+'吗？', function (index) {
                layer.close(index);
                httpRequestPost("/api/analysis/knowledgeLearn/review",{
                    "ids" : id_array,
                    "pass_status_id": pass,
                    "userId":$scope.vm.userId,
                    "userName":$scope.vm.userName
                },function(data){
                    if(data.info){
                        layer.msg(data.info);
                        listNoReview(1);
                    }
                },function(err){
                    console.log(err);
                });
            });
        }
        //維度
        function getDimensions(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensions = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }

        //渠道
        function getChannel(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.channels = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //全选
        $("#selectAll1").on("click",function(){
            var ids = document.getElementsByName("sid1");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll1(){
            console.log("=====clearSelectAll1=====");
            $("#selectAll1").attr("checked",false);
            $("#selectAll1").prop("checked",false);
        }
        //学习
        function learn(requestId,content){
            $scope.vm.knowledgeContent = content ;
            console.log("======="+$scope.vm.knowledgeContent);
            var dialog = ngDialog.openConfirm({
                template:"/static/applicationAnalysis/switchKnowledgeType.html",
                width:'500px',
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    if(e === 1){
                    }
                }
            });
        }

        /**
         * 关联知识查看
         * @param content
         * @param knowledgeTitle
         */
        function associateCheck(content,knowledgeTitle){
            $scope.vm.currQuestion="用户问题:"+content;
            $scope.vm.currKnowledgeTitle=knowledgeTitle;
            ngDialog.openConfirm({
                template:"/static/applicationAnalysis/associateLearnCheck.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    if(e === 1){
                    }
                }
            });
        }

        /**
         * 上下文
         * @param requestId
         */
        function content(requestId){
            httpRequestPost("/api/analysis/userSession/searchContent",{
                "qalogId" : requestId,
                "index": 0,
                "pageSize": 32767
            },function(data){
                if(data!=null){
                    $scope.vm.talkDetail = data.data.objs;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
            ngDialog.openConfirm({
                template:"/static/applicationAnalysis/content.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                width:'930px',
                preCloseCallback:function(e){
                    if(e === 1){
                    }
                }
            });
        }
    }
]);
// Source: app/static/applicationAnalysis/js/controller/operationLog_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器 
 */
angular.module('applAnalysisModule').controller('operationLogController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            listData : "",          //数据列表
            getData :  getData ,    //获取数据
            startTime : "" ,         //开始时间
            endTime : "" ,          //结束时间
            operationLogAuthor : "", //作者
            paginationConf : {      //分页条件
                pageSize: 8,        //每页条目数量
                pagesLength: 10,    //分页块数量
            }
        };
        getData(1) ;
        //表格列表
        function getData(index){
            httpRequestPost("/api/analysis/operationLog/searchOperationLog",{
                "startTime": $scope.vm.startTime,
                "endTime": $scope.vm.endTime,
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "operationLogAuthor" : $scope.vm.operationLogAuthor
            },function(data){
                if(data.status == 200){
                    $scope.$apply(function(){
                        $scope.vm.listData = data.data ;
                        $scope.vm.paginationConf.currentPage = index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = Math.ceil(data.data.total/ $scope.vm.paginationConf.pageSize) ;
                        console.log($scope.vm.paginationConf);
                    });
                }
            },function(error){console.log(error)});
        }

        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getData(current);
                }, 100)

            }
        },true);


    }
]);
// Source: app/static/applicationAnalysis/js/controller/reinforcementLearn_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('reinforcementLearnController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore) {
        $scope.vm = {
            applicationId :$cookieStore.get("applicationId"),
            userId :$cookieStore.get("userId"),
            userName :$cookieStore.get("userLoginName"),
            searchReinforcement : searchReinforcement ,
            listNoReview : listNoReview ,
            listData : null ,   // table 数据
            paginationConf : null ,//分页条件
            pageSize : 5  , //默认每页数量
            listData1 : null ,   // table 数据
            paginationConf1 : null ,//分页条件
            paginationConf2 : null ,//分页条件
            pageSize1 : 5  , //默认每页数量
            dimensions : [] ,
            channels : [] ,
            channelId  : null ,
            dimensionId : null ,
            timeType : 0,
            timeStart : null,
            timeEnd : null,
            channelId1  : null ,
            dimensionId1 : null ,
            timeType1 : 0,
            timeStart1 : null,
            timeEnd1 : null,
            timeList : [],
            currentPage : 1,
            total : null,
            total1 : null,
            ignore:ignore,
            learn:learn,
            review:review,
            statusId:0,
            passStatusId:0,
            //tab:tab,
            contentType : 0,
            currQuestion:"",
            searchByKnowledgeTitle:searchByKnowledgeTitle,
            knowledgeList:null,
            question:null,
            question1:null,
            keyLogin:keyLogin,
            getRecommend:getRecommend
        };
        function keyLogin(e){
            var srcObj = e.srcElement ? e.srcElement : e.target;
            var keycode = window.event?e.keyCode:e.which;
            if(keycode==13){//回车
                srcObj.blur() ;
                searchByKnowledgeTitle(1);
                srcObj.focus() ;
            }
        }

        searchReinforcement(1);
        listNoReview(1);

        //选项卡
        // function tab(obj1, obj2) {
        //     $(obj1).click(function () {
        //         $(this).addClass('cur').siblings().removeClass();
        //         $(obj2).children('div').eq($(this).index()).attr('class', 'db').siblings().attr('class', 'dn');
        //         searchReinforcement(1);
        //         listNoReview(1);
        //     });
        // }
        // tab('.tab_tit span', '.tab_con');

        //list 分页变化加载数据
        // $scope.$watch('vm.paginationConf.currentPage', function(current){
        //     if(current){
        //         searchReinforcement(current);
        //     }
        // });
        var timeout;
        $scope.$watch('vm.paginationConf.currentPage',function(current){
            if(current){
                if(timeout){
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function(){
                    searchReinforcement(current);
                },0);
            }
        },true);
        // $scope.$watch('vm.paginationConf1.currentPage', function(current){
        //     if(current){
        //         listNoReview(current);
        //     }
        // });
        var timeout1;
        $scope.$watch('vm.paginationConf1.currentPage',function(current){
                if(current){
                    if(timeout1){
                        $timeout.cancel(timeout1);
                    }
                    timeout1 = $timeout(function(){
                        listNoReview(current);
                    },0);
                }
        },true);
        // $scope.$watch('vm.paginationConf2.currentPage', function(current){
        //     if(current){
        //         searchByKnowledgeTitle(current);
        //     }
        // });
        var timeout2;
        $scope.$watch('vm.paginationConf2.currentPage',function(current){
            if(current){
                if(timeout2){
                    $timeout.cancel(timeout2);
                }
                timeout2 = $timeout(function(){
                    searchByKnowledgeTitle(current);
                },0);
            }
        },true);


        $scope.$watch('vm.channelId1', function(){
            $scope.vm.listData1 = null;
            $scope.vm.paginationConf1 = {
                currentPage: 0,//当前页
                totalItems: 0, //总条数
                pageSize: 1,//第页条目数
                pagesLength: 8//分页框数量
            };
        });
        //表格列表
        function searchReinforcement(index){
            var question = null;
            if(nullCheck($scope.vm.question)==true){
                question = "%"+$scope.vm.question+"%";
            }
            httpRequestPost("/api/analysis/knowledgeLearn/reinforcementLearnUnlearn",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "question": question,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.listData = data.qaLogs;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: Math.ceil(data.qalogTotal/5), //总条数
                    pageSize: 1,//第页条目数
                    pagesLength: 8//分页框数量
                };
                $scope.$apply();
            });
        }
        function searchByKnowledgeTitle(index){
            $scope.vm.knowledgeList=null;
            if(nullCheck($("#inputValue").val())==true){
                httpRequestPost("/api/ms/knowledgeManage/overView/searchList",{
                    "applicationId":$scope.vm.applicationId,
                    "index": (index-1)*$scope.vm.pageSize1,
                    "pageSize": $scope.vm.pageSize1,
                    "sceneIds":null,
                    "knowledgeTitle": $("#inputValue").val().trim(),
                    "knowledgeContent":null,
                    "knowledgeUpdate":null,
                    "knowledgeExpDateEnd":null,
                    "knowledgeExpDateStart":null,
                    "knowledgeOrigin":0,
                    "updateTimeType":0,
                    "knowledgeType":"",
                    "knowledgeExtensionQuestion":""
                },function(data){
                    $scope.vm.knowledgeList = data.data.objs;
                    $scope.vm.paginationConf2 = {
                        currentPage: index,//当前页
                        totalItems: Math.ceil(data.data.total/5), //总条数
                        pageSize: 1,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                    $scope.$apply();
                });
            }else{
                layer.msg("请输入要查找的标题");
            }
        }
        function listNoReview(index){
            var question = null;
            if(nullCheck($scope.vm.question1)==true){
                question = "%"+$scope.vm.question1+"%";
            }
            httpRequestPost("/api/analysis/knowledgeLearn/listNoReview",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId1,
                "question": question,
                "dimensionId": $scope.vm.dimensionId1,
                "requestTimeType":$scope.vm.timeType1,
                "startTime": $scope.vm.timeStart1,
                "endTime": $scope.vm.timeEnd1,
                "index": (index-1)*$scope.vm.pageSize1,
                "pageSize": $scope.vm.pageSize1,
                "status_id": $scope.vm.statusId,
                "pass_status_id": $scope.vm.passStatusId,
                "learn_type": 0
            },function(data){
                $scope.vm.listData1 = data.reviewRecords;
                $scope.vm.paginationConf1 = {
                    currentPage: index,//当前页
                    totalItems: Math.ceil(data.reviewRecordTotal/5), //总条数
                    pageSize: 1,//第页条目数
                    pagesLength: 8//分页框数量
                };
                $scope.$apply();
            });
        }
        //获取
        init();
        function init(){
            getDimensions();
            getChannel();
            searchReinforcement(1);
            listNoReview(1);
        }
        function ignore(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要忽略的记录！");
                return;
            }
            layer.confirm('确认要忽略吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/analysis/knowledgeLearn/ignoreByContent",request,function(data){
                    if(data!=null){
                        searchReinforcement($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }

        /**
         * 获取推荐知识
         * @param requestId
         */
        function getRecommend(requestId){
            console.log("====="+requestId);
            httpRequestPost("/api/analysis/userSession/getOneRecommend",{
                "qalogId" : requestId
            },function(data){
                $scope.vm.knowledgeList = data.data;
                $scope.$apply();
            });
        }

        function learn(requestId,content){
            $scope.vm.knowledgeList=null;
            getRecommend(requestId);
            $scope.vm.currQuestion="用户问题:"+content;
            var dialog = ngDialog.openConfirm({
                template:"/static/applicationAnalysis/associateLearn.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    if(e === 1){
                        assembleLearnData(requestId);
                    }
                }
            });
        }

        /**
         * 组装知识学习数据
         * @param requestId
         * @param content
         */
        function assembleLearnData(requestId){
            var ids = document.getElementsByName("sid2");
            var id_array = [];
            var knowledgeTitle="";
            var knowledgeType=0;
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                    knowledgeTitle = $(ids[i]).attr("knowledgeTitle");
                    knowledgeType = $(ids[i]).attr("knowledgeType");
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要关联的知识");
                return;
            }
            httpRequestPost("/api/analysis/knowledgeLearn/learnByContent",{
                "qalog_id" : requestId,
                "knowledge_id":id_array.pop(),
                "knowledge_type":100,
                "knowledge_title":knowledgeTitle,
                "learn_type":0,
                "knowledge_learn_type":0
            },function(data){
                if(data.info){
                    layer.msg(data.info);
                    searchReinforcement(1);
                }
            },function(err){
                console.log(err);
            });
        }
        function review(pass){
            var ids = document.getElementsByName("sid1");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            var msg = "";
            if(pass==0){
                msg = "拒绝";
            }else{
                msg = "通过";
            }
            if (id_array.length == 0) {
                layer.msg("请选择要"+msg+"的记录！");
                return;
            }
            layer.confirm('确认要'+msg+'吗？', function (index) {
                layer.close(index);
                httpRequestPost("/api/analysis/knowledgeLearn/review",{
                    "ids" : id_array,
                    "pass_status_id": pass,
                    "userId":$scope.vm.userId,
                    "userName":$scope.vm.userName
                },function(data){
                    if(data.info){
                        layer.msg(data.info);
                        listNoReview(1);
                    }
                },function(err){
                    console.log(err);
                });
            });
        }
        //維度
        function getDimensions(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensions = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }

        //渠道
        function getChannel(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.channels = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //全选
        $("#selectAll1").on("click",function(){
            var ids = document.getElementsByName("sid1");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll1(){
            console.log("=====clearSelectAll1=====");
            $("#selectAll1").attr("checked",false);
            $("#selectAll1").prop("checked",false);
        }
    }
]);
// Source: app/static/applicationAnalysis/js/controller/resolutionStatistics_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('resolutionStatisticsController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            getList : getList ,
            dimensions : [] ,
            channels : [] ,
            channelId  : "" ,
            dimensionId : "" ,
            timeType : 0,
            timeStart : "",
            timeEnd : "",
        };
        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //表格列表
        function getList(index){
            httpRequestPost("/api/analysis/",{
                "startTime": $scope.vm.startTime,
                "endTime": $scope.vm.endTime,
                "operationLogAuthor" : $scope.vm.operationLogAuthor
            },function(data){
                if(data.status == 200){
                    $scope.$apply(function(){

                    });
                }
            },function(error){console.log(error)});
        }
        var solutionRateChart , specificRateChart  ;
        void function(){
            //左图
            solutionRateChart = echarts.init(document.getElementById('resolution_echart'));

            //右图
            specificRateChart = echarts.init(document.getElementById('resolution_echart2'));
        }() ;
        //getList(1) ;
        chartsSetOption()
        function chartsSetOption(data1,data2){
            solutionRateChart.setOption({
                title : {
                    text: '解决率统计',
                    x:'center'
                },
                tooltip : {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: ['未解决','解决']
                },
                series : [
                    {
                        type: 'pie',
                        radius : '55%',
                        center: ['50%', '60%'],
                        data:[
                            {value:500, name:'未解决'},
                            {value:2000, name:'解决'},
                        ],
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            }) ;
            specificRateChart.setOption({
                tooltip : {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient : 'vertical',
                    x : 'left',
                    data:['直接回答','推荐回答','引导回答','未知回答','引导成功','敏感词回答']
                },
                toolbox: {
                    show : true,
                    feature : {
                        mark : {show: true},
                        dataView : {show: true, readOnly: false},
                        magicType : {
                            show: true,
                            type: ['pie', 'funnel'],
                            option: {
                                funnel: {
                                    x: '25%',
                                    width: '50%',
                                    funnelAlign: 'center',
                                    max: 1548
                                }
                            }
                        },
                        restore : {show: true},
                        saveAsImage : {show: true}
                    }
                },
                calculable : true,
                series : [
                    {
                        name:'访问来源',
                        type:'pie',
                        radius : ['50%', '70%'],
                        itemStyle : {
                            normal : {
                                label : {
                                    show : false
                                },
                                labelLine : {
                                    show : false
                                }
                            },
                            emphasis : {
                                label : {
                                    show : true,
                                    position : 'center',
                                    textStyle : {
                                        fontSize : '14',
                                        fontWeight : ''
                                    }
                                }
                            }
                        },
                        data:[
                            {value:335, name:'直接回答'},
                            {value:310, name:'推荐回答'},
                            {value:234, name:'引导回答'},
                            {value:135, name:'未知回答'},
                            {value:548, name:'引导成功'},
                            {value:1000, name:'敏感词回答'}
                        ]
                    }
                ]
            })
        }
    }
]);
// Source: app/static/applicationAnalysis/js/controller/satisfactionDegree_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 满意率 控制器
 */
angular.module('applAnalysisModule').controller('satisfactionDegreeController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            applicationId :$cookieStore.get("applicationId"),
            getList : getList ,
            listData : null ,   // table 数据
            paginationConf : null ,//分页条件
            pageSize : 5  , //默认每页数量
            dimensions : [] ,
            channels : [] ,
            channelId  : null ,
            dimensionId : null ,
            sendDimensions : [] ,
            sendChannels : [],

            timeType : 0,
            timeStart : $filter('date')(new Date(), 'yyyy-MM-dd'),
            timeEnd : $filter('date')(new Date(), 'yyyy-MM-dd'),

            "orderForSessionNumber": null,

            "orderForUnsatisfiedNumber": null,

            "orderForSatisfactionRate": null,

            sotrBySe : sotrBySe ,
            sotrBySa : sotrBySa ,
            sotrBySaRa : sotrBySaRa

        };
        function sotrBySe(){
            $scope.vm.orderForSessionNumber=($scope.vm.orderForSessionNumber?0:1),
            $scope.vm.orderForUnsatisfiedNumber=null,
            $scope.vm.orderForSatisfactionRate=null,
                //console.log($scope.vm.orderForSessionNumber)
            getList(1)
        }
        function sotrBySa(){
            $scope.vm.orderForUnsatisfiedNumber=($scope.vm.orderForUnsatisfiedNumber?0:1),
            $scope.vm.orderForSessionNumber=null,
            $scope.vm.orderForSatisfactionRate=null,
            getList(1)
        }
        function sotrBySaRa(){
            $scope.vm.orderForSatisfactionRate=($scope.vm.orderForSatisfactionRate?0:1),
            $scope.vm.orderForUnsatisfiedNumber=null,
            $scope.vm.orderForSessionNumber=null,
            getList(1)
        }
        //表格列表
        function getList(index){
            //console.log((index-1)*$scope.vm.pageSize );
            httpRequestPost("/api/analysis/satisfaction/searchList",{
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "applicationId" : $scope.vm.applicationId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,

                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,

                "orderForSatisfactionRate": $scope.vm.orderForSatisfactionRate,

                "orderForSessionNumber": $scope.vm.orderForSessionNumber,

                "orderForUnsatisfiedNumber": $scope.vm.orderForUnsatisfiedNumber,
            },function(data){
                //console.log(data.data);
                $scope.vm.listData = data.data.objs;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: Math.ceil(data.data.total/5), //总条数
                    pageSize: 1,//第页条目数
                    pagesLength: 8,//分页框数量
                };
                $scope.$apply();
                console.log(data)
            },function(){

            })
        };
        //list 分页变化加载数据
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                getList(current);
            }
        });

        function getPieData(){
            httpRequestPost("/api/analysis/satisfaction/chartAndTotal",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,

                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
            },function(data){
                var params;
                if(data && data.status == 200 && data.data != null && data.data.length != 0)
                    params = data.data.objs[0];
                else
                    params = {
                        satisfiedNumber: 0,
                        unsatisfiedNumber: 0
                    };
                var myChart = echarts.init(document.getElementById('statistics'));
                // 指定图表的配置项和数据
                var option = {
                    title : {
                        text: '满意率统计',
                        x:'center'
                    },
                    tooltip : {
                        trigger: 'item',
                        formatter: "{a} <br/>{b} : {c} ({d}%)"
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left',
                        data: ['满意率','不满意率']
                    },
                    series : [
                        {
                            type: 'pie',
                            radius : '55%',
                            center: ['50%', '60%'],
                            data:[
                                {value:params.satisfiedNumber, name:'满意率'},
                                {value:params.unsatisfiedNumber, name:'不满意率'},
                            ],
                            itemStyle: {
                                emphasis: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };
                // 使用刚指定的配置项和数据显示图表。
                myChart.setOption(option);
            },function(err){
                //layer.msg("获取满意度失败，请刷新页面")
                console.log("获取满意度失败，请刷新页面");
            });
        }

        init();
        function init(){
            getDimensions();
            getChannel();
            getList(1);
            getPieData()
        }
        //維度

        function  getDimensions(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensions = data.data;
                    $scope.$apply()
                }
            },function(err){
               // layer.msg("获取维度失败，请刷新页面")
                console.log("获取维度失败，请刷新页面");
            });
        }
        //渠道
        function  getChannel(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.channels = data.data;
                    $scope.$apply()
                }
            },function(err){
                //layer.msg("获取渠道失败，请刷新页面")
                console.log("获取渠道失败，请刷新页面");
            });
        }

        
    }
]);
// Source: app/static/applicationAnalysis/js/controller/serviceMonitoring_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器 
 */
angular.module('applAnalysisModule').controller('serviceMonitoringController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter","$window","$interval",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter,$window,$interval) {

        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            serviceMemory: "",          //服务内存
            cpuOccupancy:  "" ,         //CPU占有率
            xAxis:"",     
            cpu:"",
            memory:"",
            responseTime:"",
            responseStatus:"",
            linuxIp:'',
            applicationName:'',
            inspectFrequency:''

        };

        $scope.vm.serviceMemory=[];
        $scope.vm.cpuOccupancy=[];
        $scope.vm.xAxis=[];
 
      var serviceMemory = echarts.init(document.getElementById('main'));
       var cpuOccupancy = echarts.init(document.getElementById('main1'));
       //定时更新
     //分页监控

            httpRequestPost("/api/ms/monitoringServerABC/monitoringABC",{
                "applicationId": $scope.vm.applicationId
            },function(data){  
                  $scope.vm.linuxIp=data.data.linuxIp;
                  $scope.vm.inspectFrequency=data.data.inspectFrequency;
                  var data=data.data.data;
                  var len=data.length;
                  for(var i=0;i<len;i++){
                    $scope.vm.cpuOccupancy.push(data[i].cpu);
                    $scope.vm.serviceMemory.push(data[i].memory);
                    $scope.vm.xAxis.push(data[i].date);
                  }
                    $scope.vm.cpu=data[len-1].cpu;
                    $scope.vm.memory=data[len-1].memory;
                    $scope.vm.responseTime=data[len-1].responseTime;
                    $scope.vm.responseStatus=data[len-1].responseStatus;
                    $scope.$apply();
                    serviceMemory.setOption(setTimerChartOption($scope.vm.xAxis,$scope.vm.serviceMemory,"使用内存",'#E87C25','{value}MB'))
                    cpuOccupancy.setOption(setTimerChartOption($scope.vm.xAxis,$scope.vm.cpuOccupancy,"CPU占用率",'#26C0C0','{value}%'))
            })
     //项目名称的请求
        httpRequestPost("/api/application/application/findApplication",{
            applicationId: $scope.vm.applicationId
        },function(data){
            if(data.status==200){
                 $scope.vm.applicationName=data.data.applicationName;
                 $scope.$apply();
            }
            
        })    


      $scope.reloadRoute = function () {
            $window.location.reload();
        };
        var autoRefresh;
        autoRefresh = $interval($scope.reloadRoute, 60000);    
        //图形请求列表  
         function setTimerChartOption(xData,yData,dataName,color,formatter){
            return {
                tooltip: {
                    trigger: 'axis',
                },
                toolbox: {
                show : true,
                feature : {
                    mark : {show: true},
                    dataView : {show: true, readOnly: false},
                    magicType : {show: true, type: ['line', 'bar']},
                    restore : {show: true},
                    saveAsImage : {show: true}
                }
            },
                grid: {
                    left: '2%',
                    right: '4%',
                    bottom: '3%',
                    top:'60',
                    containLabel: true
                },
                calculable : false,//是否启用拖拽重计算特性,默认关闭
                animation : true,//是否开启动画，默认开启
                 //折线或柱状图的颜色
                color:[color],
                 xAxis : [  //x轴的属性
                {
                    type : 'category', //坐标轴类型，横轴默认为类目型'category'，纵轴默认为数值型'value'
                    boundaryGap : false,//坐标轴起始和结束两端空白
                    data : xData,//数据
                    axisLine : {    // 轴线
                        show: true,
                        lineStyle: { //坐标轴样式
                            color: '#989898',
                            type: 'solid',
                            width: 2
                        }
                    },
                    axisTick : {    // 轴标记
                        show:true,
                        length: 5,
                        lineStyle: {
                            color: '#989898',
                            type: 'solid',
                            width: 2
                        }
                    },
                    axisLabel : { /*坐标轴值得样式*/
                        show:true,
                        interval: 'auto',    // {number}
                        rotate: 0,
                        margin: 8,
                        formatter: '{value}',
                        textStyle: {
                            color: '#444444',
                            fontFamily: 'Microsoft YaHei',
                            fontSize: 15,
                            fontStyle: 'normal',
                            fontWeight: 'bold'
                        }
                    },
                }
            ],
                yAxis : [
                {
                    name : "",
                    type : 'value',
                    axisLine : {    // 轴线
                        show: true,
                        lineStyle: {
                            color: '#989898',
                            type: 'solid',
                            width: 2
                        }
                    },
                    axisTick : {    // 轴标记
                        show:false,
                        length: 1,
                        lineStyle: {
                            color: '#989898',
                            type: 'solid',
                            width: 2
                        }
                    },
                    axisLabel : {
                        show:true,
                        interval: 'auto',    // {number}
                        rotate: 0,
                        margin: 8,
                        formatter: formatter,
                        textStyle: {
                            color: '#444444',
                            fontFamily: 'Microsoft YaHei',
                            fontSize: 15,
                            fontStyle: 'normal',
                            fontWeight: 'bold'
                        }
                    },
                  
                }
            ],
                series: [
                    {
                        name:dataName,
                        type:'line',
                        symbol:'emptyCircle',//节点形状
                        smooth : false,//平滑的曲线，默认是直线
                        data:yData,
                        //itemStyle: {normal: {areaStyle: {type: 'default'}}},/*这里是折线面积*/
                        markPoint : { /*/!*折线上的小汽包*!/*/
                             symbolSize: 60,    
                            data : [
                                {type : 'max',name:'最大值'},
                                {type : 'min',name:'最小值'}
                            ],
                        },

                    }
                ]
            };
         }

        
    }
]);
// Source: app/static/applicationAnalysis/js/controller/sessionDetails_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('sessionDetailsController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            applicationId :$cookieStore.get("applicationId"),
            scan:scan ,
            getList : getList ,
            listData : null ,   // table 数据
            paginationConf : null ,//分页条件
            pageSize : 10  , //默认每页数量
            dimensions : [] ,
            channels : [] ,
            channelId  : null ,
            dimensionId : null ,
            timeType : 1,
            timeStart : null,
            timeEnd : null,
            orderForSessionNumber : null,
            orderForSessionTime : null,
            timeList : [],
            getdetail : getdetail,
            currentPage : 1,
            total : null,
            talkDetail : null,
            talkDetailTotal : 0,
            userId : null,
            prePage : prePage ,
            nextPage : nextPage,
            clearHistory:clearHistory,
            contentIndex:2 ,
            exportExcel : exportExcel  //导出
        };

        //init echart 图表
        var myChart = echarts.init(document.getElementById('sessionDetail'));
        // 点击查看
        function scan(id){
            $scope.vm.userId = id;
            getScanData(id,1);
            ngDialog.openConfirm({
                template:"/static/applicationAnalysis/sessionDetailsDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                width:'930px',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                    }
                }
            });
        }
        function clearHistory(){
            $scope.vm.total = 0;
            $scope.vm.talkDetailTotal = 0;
            $scope.vm.timeList = null;
            $scope.vm.talkDetail = null;
        }
        //获取对应user 的 对话列表
        function getScanData(id,index){
            //清空历史数据
            clearHistory();
            httpRequestPost("/api/analysis/userSession/searchTimeBar",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "userId" : id
            },function(data){
                if(data!=null){
                    $scope.vm.total = data.data.total/$scope.vm.pageSize<1?1:data.data.total/$scope.vm.pageSize;
                    $scope.vm.timeList = data.data.objs;
                    $scope.$apply();
                    getdetail($scope.vm.timeList[0].sessionId,1);
                }
            });
        }

        //list 分页变化加载数据
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                getList(current);
            }
        });

        //排序  按会话数量
        $scope.$watch('vm.orderForSessionNumber', function(){
            if($scope.vm.paginationConf.currentPage){
                getList($scope.vm.paginationConf.currentPage);
            }else{
                getList(1);
            }
        });
        //排序 按时间
        $scope.$watch('vm.orderForSessionTime', function(){
            $scope.vm.orderForSessionNumber=null;
            if($scope.vm.paginationConf.currentPage){
                getList($scope.vm.paginationConf.currentPage);
            }else{
                getList(1);
            }
        });

     //表格列表
        function getList(index){
            httpRequestPost("/api/analysis/userSession/searchList",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "orderForSessionNumber": $scope.vm.orderForSessionNumber,
                "orderForSessionTime": $scope.vm.orderForSessionTime
            },function(data){
                console.log(data) ;
                $scope.$apply(function(){
                    var xData=[] ,yData=[] ;
                    angular.forEach(data.data.objs,function(item,index){
                        xData.push(item.userId) ;
                        yData.push(item.sessionNumber);
                        console.log(xData);
                        console.log(yData);
                    }) ;
                    if(yData.length==0 || xData.length==0){
                        yData=[0,0,0,0,0,0];
                    }
                    myChart.setOption(setEchartOption(xData,yData));
                    $scope.vm.listData = data.data.objs;
                });
            });
        }
        //获取
        function getdetail(sessionId,index){
            httpRequestPost("/api/analysis/userSession/searchTimeBarContent",{
                "sessionId" : sessionId,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                if(data!=null){
                    $scope.vm.talkDetail = data.data.objs;
                    $scope.vm.talkDetailTotal = data.data.total;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }
        function nextPage(){
            if($scope.vm.currentPage<$scope.vm.total){
                $scope.vm.currentPage+=1;
                getScanData($scope.vm.userId,$scope.vm.currentPage);
                getdetail($scope.vm.timeList[0].sessionId,1);
            }else if($scope.vm.currentPage=$scope.vm.total){
                $scope.vm.currentPage=$scope.vm.total
            }
        }
        function prePage(){
            if($scope.vm.currentPage=1){
                $scope.vm.currentPage=1;
            }else{
                getScanData($scope.vm.userId,$scope.vm.currentPage);
                getdetail( $scope.vm.timeList[0].sessionId,1);
            }
        }
        init();
        function init(){
            getDimensions();
            getChannel();
            getList(1);
        }
        //維度
        function getDimensions(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensions = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }

        //渠道
        function getChannel(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.channels = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        };
        function exportExcel(){
            httpRequestPost("/api/analysis/userSession/export",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime" : $scope.vm.timeStart ,
                "endTime": $scope.vm.timeEnd,
                "orderForSessionNumber": $scope.vm.orderForSessionNumber,
                "orderForSessionTime": $scope.vm.orderForSessionTime,
                "index": 0,
                "pageSize": 10
            },function(data){
                console.log(data) ;
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})

        }

        function setEchartOption(xData,yData){
            return {
                //title: '知识点排名统计表' ,
                color: ['#3398DB'],
                tooltip : {
                    trigger: 'axis',
                    axisPointer : {            // 坐标轴指示器，坐标轴触发有效
                        type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                    }
                },

                xAxis : [
                    {
                        type : 'category',
                        data : xData,
                        axisTick: {
                            alignWithLabel: true
                        } ,
                        axisLabel:{
                            interval: 0 ,
                            rotate:-30 ,
                            formatter:function(val){
                                if(val.length>10){
                                    val = val.toString().substring(0,10)+"...";
                                }
                                return val //横轴信息文字竖直显示
                            }
                        } ,
                    }
                ],
                grid: { // 控制图的大小，调整下面这些值就可以，
                    x: 40,
                    x2: 100,
                    y2: 150// y2可以控制 X轴跟Zoom控件之间的间隔，避免以为倾斜后造成 label重叠到zoom上
                },
                yAxis : [
                    {
                        type : 'value'
                    }
                ],
                series : [
                    {
                        name:'会话数量',
                        type:'bar',
                        barWidth: '60%',
                        data:yData,
                        itemStyle: {
                            normal: {
                                color: function (params) {
                                    // build a color map as your need.
                                    var colorList = [
                                        '#C1232B', '#B5C334', '#FCCE10', '#E87C25', '#27727B',
                                        '#FE8463', '#9BCA63', '#FAD860', '#F3A43B', '#60C0DD',
                                        '#D7504B', '#C6E579', '#F4E001', '#F0805A', '#26C0C0'
                                    ];
                                    return colorList[params.dataIndex]
                                }
                            }
                        }}
                ]
            }
        }
    }
]);
// Source: app/static/applicationAnalysis/js/controller/sessionLog_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('sessionLogController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            applicationId :$cookieStore.get("applicationId"),
            scan:scan ,
            getList : getList ,
            listData : null ,   // table 数据
            paginationConf : {      //分页条件
                pageSize: 5,        //每页条目数量
                pagesLength: 10,    //分页块数量
            } ,//分页条件
            pageSize : 10  , //默认每页数量
            dimensions : [] ,
            channels : [] ,
            channelId  : null ,
            dimensionId : null ,
            timeType : 1,
            timeStart : null,
            timeEnd : null,
            orderForSessionNumber : null,
            orderForSessionTime : null,
            timeList : [],
            getdetail : getdetail,
            currentPage : 1,
            total : null,
            talkDetail : null,
            talkDetailTotal : 0,
            userId : null,
            prePage : prePage ,
            nextPage : nextPage,
            clearHistory:clearHistory,
            contentIndex:2 ,
            exportExcel : exportExcel  //导出
        };

        // 点击查看
        function scan(id){
            $scope.vm.userId = id;
            getScanData(id,1);
            ngDialog.openConfirm({
                template:"/static/applicationAnalysis/sessionDetailsDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                width:'930px',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                    }
                }
            });
        }
        function clearHistory(){
            $scope.vm.total = 0;
            $scope.vm.talkDetailTotal = 0;
            $scope.vm.timeList = null;
            $scope.vm.talkDetail = null;
        }
        //获取对应user 的 对话列表
        function getScanData(id,index){
            //清空历史数据
            clearHistory();
            httpRequestPost("/api/analysis/userSession/searchTimeBar",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "userId" : id
            },function(data){
                if(data!=null){
                    $scope.vm.total = data.data.total/$scope.vm.pageSize<1?1:data.data.total/$scope.vm.pageSize;
                    $scope.vm.timeList = data.data.objs;
                    $scope.$apply();
                    getdetail($scope.vm.timeList[0].sessionId,1);
                }
            });
        }

        //list 分页变化加载数据
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getList(current);
                }, 100)

            }
        },true);

        //排序  按会话数量
        $scope.$watch('vm.orderForSessionNumber', function(){
            if($scope.vm.paginationConf.currentPage){
                getList($scope.vm.paginationConf.currentPage);
            }else{
                getList(1);
            }
        });
        //排序 按时间
        $scope.$watch('vm.orderForSessionTime', function(){
            $scope.vm.orderForSessionNumber=null;
            if($scope.vm.paginationConf.currentPage){
                getList($scope.vm.paginationConf.currentPage);
            }else{
                getList(1);
            }
        });

        //表格列表
        function getList(index){
            httpRequestPost("/api/analysis/userSession/searchList",{
                "applicationId" : $scope.vm.applicationId,
                "channelId": $scope.vm.channelId,
                "dimensionId": $scope.vm.dimensionId,
                "requestTimeType":$scope.vm.timeType,
                "startTime": $scope.vm.timeStart,
                "endTime": $scope.vm.timeEnd,
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "orderForSessionNumber": $scope.vm.orderForSessionNumber,
                "orderForSessionTime": $scope.vm.orderForSessionTime
            },function(data){
                if(data.info　== "没有查询到记录"){
                    layer.msg("此时间段内查询无会话日志") ;
                    $scope.$apply(function(){
                        $scope.vm.paginationConf.totalItems =0 ;
                        $scope.vm.listData = '';
                    });
                    //$scope.vm.paginationConf.currentPage =index ;

                }else{
                    $scope.$apply(function(){
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = Math.ceil(data.data.total/ $scope.vm.paginationConf.pageSize) ;
                        $scope.vm.listData = data.data;
                    });
                }
            });
        }
        //获取
        function getdetail(sessionId,index){
            httpRequestPost("/api/analysis/userSession/searchTimeBarContent",{
                "sessionId" : sessionId,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                if(data!=null){
                    $scope.vm.talkDetail = data.data.objs;
                    $scope.vm.talkDetailTotal = data.data.total;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }
        function nextPage(){
            if($scope.vm.currentPage<$scope.vm.total){
                $scope.vm.currentPage+=1;
                getScanData($scope.vm.userId,$scope.vm.currentPage);
                getdetail($scope.vm.timeList[0].sessionId,1);
            }else if($scope.vm.currentPage=$scope.vm.total){
                $scope.vm.currentPage=$scope.vm.total
            }
        }
        function prePage(){
            if($scope.vm.currentPage=1){
                $scope.vm.currentPage=1;
            }else{
                getScanData($scope.vm.userId,$scope.vm.currentPage);
                getdetail( $scope.vm.timeList[0].sessionId,1);
            }
        }
        init();
        function init(){
            getDimensions();
            getChannel();
            getList(1);
        }
        //維度
        function getDimensions(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensions = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        }

        //渠道
        function getChannel(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.channels = data.data;
                    $scope.$apply();
                }
            },function(err){
                console.log(err);
            });
        };
        function exportExcel(){
            httpRequestPost("/api/analysis/userSession/export",{
                    "applicationId" : $scope.vm.applicationId,
                    "channelId": $scope.vm.channelId,
                    "dimensionId": $scope.vm.dimensionId,
                    "requestTimeType":$scope.vm.timeType,
                    "startTime" : $scope.vm.timeStart ,
                    "endTime": $scope.vm.timeEnd,
                    "orderForSessionNumber": $scope.vm.orderForSessionNumber,
                    "orderForSessionTime": $scope.vm.orderForSessionTime,
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    //alert(data.data);
                    window.open("/api/analysis/download/downloadExcel?fileName="+ data.data);
                }
                console.log();
            },function(err){})

        }

    }
]);
// Source: app/static/applicationAnalysis/js/controller/vioceStatistics_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('applAnalysisModule').controller('vioceStatisticsController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","$filter","$window",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,$filter,$window) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
           
        };
      

    }
]);
// Source: app/static/applicationAnalysis/js/directive/applicationDirective.js
/**
 * Created by 41212 on 2017/4/11.
 */

knowledge_static_web.directive("sort", function() {
    return {
        restrict:'EA',
        scope:{
            //title:'=expanderTitle'
        },
    template: '<a href="javascript:;"  ng-click="toggle()" ng-class="flag?\'sorting_asc\':\'sorting_asc2\'"></a>',
        link:function(scope,element,attrs){
            scope.flag=false;
            scope.toggle=function toggle(){
                scope.flag = !scope.flag;
            }
        }
    }
});



// Source: app/static/applicationAnalysis/js/filter/operate.js
/**
 * Created by 41212 on 2017/7/21.
 */
//LoginrLogs(137, "登录日志"),
//    LogOutLogs(138,"退出登录"),
//    AddKnowledgeLogs(139, "添加知识日志"),
//    UpdateKnowledgeLogs(133, "修改知识日志"),
//    DeleteKnowledgeLogs(134, "删除知识日志"),
//    ReleaseApplicationLogs(135, "发布应用日志"),
//    DeleteApplicationLogs(136, "删除应用日志"),
angular.module("applAnalysisModule").filter("operateState",[function(){
    return function(val,title){
        var  result ;
        if(title==null){
            title = "";
        };
        switch (val){
            case "133" :
                result = "修改知识:"+title ;
                break ;
            case "134" :
                result = "删除知识:"+title ;
                break ;
            case "135" :
                result = "发布应用" ;
                break ;
            case "136" :
                result = "删除应用" ;
                break ;
            case "137" :
                result = "登录系统" ;
                break ;
            case "138" :
                result = "退出系统" ;
                break ; 
            case "139" :
                result = "添加知识:"+title ;
                break ;
        }
        return result ;
    }
}]);

angular.module('applAnalysisModule').filter('trustHtml', function ($sce) {
     return function (input) {
        return $sce.trustAsHtml(input);
     }
});

// Source: app/static/base/auth/auth_constant.js
/**
 * Created by Administrator on 2016/6/3.
 * know constant 模块
 * 依赖 ngResource 模块
 */
angular.module('know.auth').constant('AUTH_EVENTS', {
    loginSuccess: 'auth-login-success',
    loginFailed: 'auth-login-failed',
    logoutSuccess: 'auth-logout-success',
    sessionTimeout: 'auth-session-timeout',
    notAuthenticated: 'auth-not-authenticated',
    notAuthorized: 'auth-not-authorized'

})


// Source: app/static/base/auth/auth_service.js
/**
 * Created by Administrator on 2016/6/6.
 */
angular.module('know.auth').factory('AuthService', ['$resource', '$rootScope', '$location', 'Session', 'AUTH_EVENTS','localStorageService', function ($resource, $rootScope, $location, Session, AUTH_EVENTS,localStorageService) {

    var authService = {};
    var loginSuccessFunction = function (fun, result) {
        var data = result.data;
        Session.create(data.id);
        localStorageService.set('SessionId',data.id);
        localStorageService.set('privileges',data.privileges);
        $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
        fun(data);
    }

    var logoutSuccessFunction = function (fun, result) {
        var data = result.data;
        Session.destroy(data.id);
        localStorageService.clearAll();
        $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
        fun(data);
    }

    var authFun = $resource('/back/system/user/:action', {}, {
        login: {
            method: 'POST',
            params: {
                action: 'login'
            },
            isArray: false,
            responseType: 'json'
        },
        checkLoginStatus: {
            method: 'GET',
            params: {
                action: 'loadUser'
            },
            isArray: false,
            responseType: 'json'
        },
        logout: {
            method: 'POST',
            params: {
                action: 'logout'
            },
            isArray: false,
            responseType: 'json'
        },
    });

    authService.login = function (credentials, successFunction,failedFunction) {
        //console.log(credentials)
        authFun.login({
                loginName: credentials.loginName,
                loginPwd: credentials.loginPwd,
                randCheckCode: credentials.randCheckCode,
                rember: credentials.rememberUser
            },
            function (result, b, c) {
                if (result.status == '200') {
                    loginSuccessFunction(successFunction, result)
                    $location.path('/index/home');
                }else{
                    failedFunction(result.err);
                }
            },
            function (a, b, c) {
                $rootScope.$broadcast(AUTH_EVENTS.loginFailed);
            })
    };

    authService.logout = function (successFunction,failedFunction) {
        authFun.logout({},
            function (result, b, c) {
                if (result.status == '200') {
                    logoutSuccessFunction(successFunction, result)
                    $location.path('/login');
                }else{
                    failedFunction(result.err);
                }
            },
            function (a, b, c) {
                $rootScope.$broadcast(AUTH_EVENTS.loginFailed);
            })
    };

    authService.checkLoginStatus = function (credentials, fun) {
        authFun.checkLoginStatus({}, function (result, b, c) {
            if (result.status == '200') {
                loginSuccessFunction(fun,result)
            }
        }, function (a, b, c) {
            Session.destroy(data.id);
            localStorageService.clearAll();
            $rootScope.$broadcast(AUTH_EVENTS.loginFailed);
        })
    };

    // authService.isAuthenticated = function () {
    //     var isAuthenticated = false;
    //     if(Session.userId)
    //         isAuthenticated = true;
    //     else {
    //         var sessionId = localStorageService.get('SessionId');
    //         if(sessionId)
    //             isAuthenticated = true;
    //     }
    //     return  isAuthenticated;
    // };

    // authService.isAuthorized = function (privileges,name) {
    //     //把路由传进来进行校验
    //     var isAuthorized = true;
    //     if(name != "" && name != null && name.indexOf("index") == -1 && name.indexOf("help") == -1){
    //         if(privileges.indexOf(name) == -1){
    //             isAuthorized = false;
    //         }
    //         if(!authService.isAuthenticated()){
    //             isAuthorized = false;
    //         }
    //     }
    //     return isAuthorized;
    // };
    return authService;
}])

angular.module('know.auth').factory('AuthInterceptor', function ($rootScope, $q, AUTH_EVENTS) {
    return {
        responseError: function (response) {
            $rootScope.$broadcast({
                401: AUTH_EVENTS.notAuthenticated,
                403: AUTH_EVENTS.notAuthorized,
                419: AUTH_EVENTS.sessionTimeout,
                440: AUTH_EVENTS.sessionTimeout
            }[response.status], response);
            return $q.reject(response);
        },
        request: function (config) {
            // 成功的请求方法
            var ts = '?^=' + new Date().getTime();
            if (config.url.indexOf('?') > 0)
                config.url = config.url.replace('?', ts + '&');
            else
                config.url = config.url + ts;
            return config; // 或者 $q.when(config);
        },
    };
})
// Source: app/static/base/auth/session_service.js
/**
 * Created by Administrator on 2016/6/6.
 */
angular.module('know.auth').service('Session', function () {
    this.create = function (userId) {
        this.userId = userId;
    };
    this.destroy = function () {
        this.userId = null;
    };
    return this;
})
// Source: app/static/base/directive/checkbox.js
/**
 * Created by 41212 on 2017/4/11.
 */
knowledge_static_web.directive("checkbox", function($parse) {
    return {
        restrict:'EA',
        //scope:{
        //    arr:'=',
        //    item  : '@'
        //},
        // item  arr
        template:
                '<div class="my-checkbox" ng-click="toggle()">'+
                    '<label ng-class="flag?\'\':\'my-checkbox-on\'"></label>'+
                '</div>',
        link:function(scope,element,attrs){
            scope.flag=true;
            //attrs.arr = $parse(attrs.arr);
            //scope.arr = $parse(attrs.arr);

            scope.toggle=function toggle(){

                //if(scope.flag){
                //    console.log(typeof attrs.arr);
                //    attrs.arr.push(attrs.item)
                //}else{
                //    attrs.arr.remove(attrs.item)
                //};
                scope.flag = !scope.flag;


            }
        }
    }
}).directive("checkboxOverview", [
    function() {
        return {
            restrict:'EA',
            scope:{
                arr:'=',
                item  : '@',
                result : "="
            },
            template:
            '<div class="my-checkbox" ng-click="toggle()">'+
            '<label ng-class="flag?\'\':\'my-checkbox-on\'"></label>'+
            '</div>',
            link:function(scope,element,attrs){
                scope.$watch("result",function(val){
                    if(!val){
                        scope.flag=true;
                    }else{
                        scope.flag=false;
                    }
                }) ;
                scope.toggle=function toggle(){
                    scope.flag = !scope.flag;
                }
            }
        }
    }]);

// Source: app/static/base/directive/uploader.js

/**
 * Created by miles on 2017/4/11.
 *
 * webuploader  ====》》  指令
 */
//<div uploader server="'/api/application/application/uploadHead'"></div>
knowledge_static_web.directive("uploader", ["$parse", function($parse) {
    return {
        restrict:'EA',
        scope:{
            accept:'=',
            server : '='   , //url
            //item  : '@'
            type : "="      //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
        },
        template:'<div id="uploader" class="wu-example upWrapper">'+
            //<!--用来存放文件信息-->
                        '<div id="thelist" class="uploader-list upList"></div>'+
                        '<div class="btns">'+
                            '<div id="picker">选择文件</div>' +
                            //'<button id="ctlBtn" class="btn btn-default">开始上传</button>'+
                        '</div>'+
                   '</div>'
        ,
        link:function(scope,element,attrs){
            console.log(scope.server);
            var $list = angular.element("#thelist");
            var uploader = WebUploader.create({
                auto: true, // 选完文件后，是否自动上传
                // swf文件路径
                swf: 'Uploader.swf',
                formData : {title:"is Image  ====   uploader"}  ,   // 上传参数
                // 文件接收服务端。
                server: scope.server,
                //server : 'fileupload.php',
                //type : scope.type,
                accept: {
                    title: 'file',
                    extensions: 'xls,xlsx',
                    mimeTypes: 'file/*'
                },
                // 选择文件的按钮。可选。
                // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                pick: '#picker',

                // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                resize: false,
                chunked: true,  // 分片上传大文件
                chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                thread: 100,// 最大上传并发数
                // 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                disableGlobalDnd: true,

                fileNumLimit: 300,
                fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                fileSingleSizeLimit: 50 * 1024 * 1024    // 50 M   single
            });
            // 当有文件被添加进队列的时候
            uploader.on( 'fileQueued', function( file ) {
                $list.append( '<div id="' + file.id + '" class="item">' +
                    '<h4 class="info">' + file.name + '</h4>' +
                    '<p class="state">等待上传...</p>' +
                    '</div>' );
            });
            // 文件上传过程中创建进度条实时显示。
            uploader.on( 'uploadProgress', function( file, percentage ) {
                var $li = $( '#'+file.id ),
                    $percent = $li.find('.progress .progress-bar');
                // 避免重复创建
                if ( !$percent.length ) {
                    $percent = $('<div class="progress progress-striped active miles-progress" style="height: 50px;background: red; width: 200px;">' +
                        '<div class="progress-bar miles-progressBar" role="progressbar" style="width: 0%">' +
                        '</div>' +
                        '</div>').appendTo( $li ).find('.progress-bar');
                }
                $li.find('p.state').text('上传中');
                $percent.css( 'width', percentage * 100 + '%' );
                console.log(percentage);
            });
            //文件上传成功
            uploader.on('uploadSuccess', function (file) {
                $('#' + file.id).find('p.state').text('已上传');
            });
            //文件上传失败
            uploader.on('uploadError', function (file) {
                $('#' + file.id).find('p.state').text('上传失败');
                $('#' + file.id).find('.progress').fadeOut();
            });
            //文件上传完成
            uploader.on('uploadComplete', function (file) {
                $('#' + file.id).find('.progress').fadeOut();
                //$("#editModal").fadeOut(2000, window.location.reload());
            });
        }
    }
}]);

/*
$scope.accept = {
    //图片
    image: {
        title : 'Images',//标题
        extensions : 'gif,jpg,jpeg,bmp,png,ico',//允许上传文件的后缀
        mimeTypes : 'image/*'//允许的mimetype
    },
    //音视频
    video: {
        title : 'Videos',
        extensions : 'wmv,asf,asx,rm,rmvb,ram,avi,mpg,dat,mp4,mpeg,divx,m4v,mov,qt,flv,f4v,mp3,wav,aac,m4a,wma,ra,3gp,3g2,dv,vob,mkv,ts',
        mimeTypes : 'video/*,audio/*'
    },
    //flash
    flash: {
        title : 'Flashs',
        extensions : 'swf,fla',
        mimeTypes : 'application/x-shockwave-flash'
    },
    //办公文档，压缩文件等等
    file: {
        title : 'Files',
        extensions : 'zip,rar,ppt,pptx,doc,docx,xls,xlsx,pdf',
        mimeTypes : 'application/zip,application/x-rar-compressed,application/vnd.ms-powerpoint,application/vnd.openxmlformats-             officedocument.presentationml.presentation,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-   excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/pdf'
    }
};
*/




// 实例化
//var uploader = WebUploader.create({
//    //指定选择文件的按钮容器
//    //multiple是否开启多文件上传，默认为true
//    pick : {
//        id : '#filePicker',
//        //label : '点击选择图片'
//        innerHTML: '点击选择' + $scope.selectType[items.type],
//        multiple: true
//    },
//    //指定拖拽的容器
//    dnd : '#uploader .queueList',
//    //启用通过截屏来粘贴图片
//    paste : document.body,
//    //指定接受哪些类型的文件
//    accept : items.accept[items.type],
//
//    // swf文件路径
//    swf : 'Uploader.swf',
//
//    disableGlobalDnd : true,
//    //是否分片
//    chunked : true,
//    //chunkSize: 700000,  //每个分片的大小，默认为5M
//    // server: 'http://webuploader.duapp.com/server/fileupload.php',
//    server : '../demo',
//    //文件最大数量
//    fileNumLimit : 30,
//    //验证文件总大小是否超出限制
//    fileSizeLimit : 5 * 1024 * 1024, // 200 M
//    //验证单个文件大小是否超出限制
//    fileSingleSizeLimit : 1 * 1024 * 1024
//    // 50 M
//});
// Source: app/static/base/frameTypeFilter/frameTypeFilter.js
/**
* Created by 41212 on 2017/3/31.
*/
angular.module('knowledge_static_web').filter('frameTypeFilter', function () {
    return function (value) {
        switch (value){
            case 10011 : return "FAQ框架";
                break;
            case 10012 : return "概念扩展框架";
                break;
            case 10013 : return "要素框架";
                break;
        }
    };
});



// Source: app/static/base/knowledge_item/directives/knowledge_item.js
knowledge_static_web
    .directive('knowledgeitem',[ 'KnowledgePortalService','ngDialog', function (KnowledgePortalService) {
        return {
            templateUrl: '../../..//base/knowledge_item/directives/knowledge_item.html',
            restrict: 'E',
            replace: true,
            //scope:{},
            link: function (scope, element) {
                scope.focusKnowItem = function (knowItem) {
                    KnowledgePortalService.focus(knowItem)
                }

                scope.toShareKnowItem = function (selectedKnowItem) {
                    KnowledgePortalService.toShareKnowItem(selectedKnowItem)
                };

                scope.showCommentContainer = function (knowItemId) {
                    if($('#commentContent'+knowItemId).is(":hidden")){
                        $('#commentContent'+knowItemId).attr('class','show');
                        scope.comment = "";
                    }else{
                        $('#commentContent'+knowItemId).attr('class','hide');
                    }
                };

                scope.submitComment = function(knowItemId){
                    var comment = $('#commentContent'+knowItemId).find('textarea').val();
                    if(comment ==null ||  $.trim(comment)=='')
                        return;
                    KnowledgePortalService.replyKnowItem(knowItemId,comment);
                }
            }
        }
    }]);



// Source: app/static/base/limitCheckFilter/limitCheckFilter.js
/**
* Created by 41212 on 2017/3/31.
*/
angular.module('knowledge_static_web').filter('limitCheckFilter', function () {
    return function (value) {
        return value.substring(0,6)+"...";
    };
});


// Source: app/static/base/page/page.js
/**
 * Created by Administrator on 2016/6/13.
 */
angular.module('pagination',[]).directive('pagination',[function(){
    return {
        restrict : 'EA',
        templateUrl: 'static/base/page/template.html',
        replace:true,
        scope:{
            conf:'='
        },
        link: function(scope,element,attrs){
            //改变当前页
            scope.changeCurrentPage = function(item){
                if(item == '...'){
                    return;
                }else{
                    scope.conf.currentPage = item;
                    $(window).scrollTop(0);

                }
            };

            function getPagination(newValve, oldValue){
                //console.log(newValve);
                //当前页
                scope.conf.currentPage = parseInt(scope.conf.currentPage) ? parseInt(scope.conf.currentPage) : 1;

                //总条数
                scope.conf.totalItems = parseInt(scope.conf.totalItems) ? parseInt(scope.conf.totalItems) : 0;

                //每页条目数(default:15)
                scope.conf.pageSize = parseInt(scope.conf.pageSize) ? parseInt(scope.conf.pageSize) : 15;

                //总页数
                scope.conf.numberOfPages = Math.ceil(scope.conf.totalItems / scope.conf.pageSize);
                if(scope.conf.currentPage < 1){
                    scope.conf.currentPage = 1;
                }

                //页数上限限制
                if(scope.conf.numberOfPages > 0 && scope.conf.currentPage > scope.conf.numberOfPages){
                    scope.conf.currentPage = scope.conf.numberOfPages;
                }

                //跳转页数
                scope.jumpPageNum = scope.conf.currentPage;

                scope.pageList = [];
                if(scope.conf.numberOfPages <= scope.conf.pagesLength){
                    //总页数如果小于等于分页的长度，则直接显示
                    for(var i = 1; i <= scope.conf.numberOfPages; i++){
                        scope.pageList.push(i);
                    }
                }else{
                    // 总页数大于分页长度（此时分为三种情况：1.左边没有...2.右边没有...3.左右都有...）
                    // 计算中心偏移量
                    var offset = scope.conf.pagesLength % 2 == 0 ?  scope.conf.pagesLength / 2 : (scope.conf.pagesLength - 1 ) / 2;
                    if(scope.conf.currentPage <= offset){
                        //左边没有‘...’
                        for(var i = 1; i <= offset+1; i++){
                            scope.pageList.push(i);
                        }
                        scope.pageList.push('...');
                        scope.pageList.push(scope.conf.numberOfPages);
                    }else if(scope.conf.currentPage > scope.conf.numberOfPages - offset){
                        scope.pageList.push(1);
                        scope.pageList.push('...');
                        for(i = offset; i >= 1; i--){
                            scope.pageList.push(scope.conf.numberOfPages - i);
                        }
                        scope.pageList.push(scope.conf.numberOfPages);
                    }else{
                        //两边都有‘...’
                        scope.pageList.push(1);
                        scope.pageList.push('...');
                        for(var i = Math.ceil(offset/2)-1; i >=1; i--){
                            scope.pageList.push(scope.conf.currentPage - i);
                        }
                        scope.pageList.push(scope.conf.currentPage);

                        for(var i = 1; i <= (offset/2); i++){
                            scope.pageList.push(scope.conf.currentPage + i);
                        }
                        scope.pageList.push('...');
                        scope.pageList.push(scope.conf.numberOfPages);
                    }
                }
                if(scope.conf.onClick){
                    // 防止初始化两次请求问题
                    if(!(oldValue != newValve && oldValue[0] == 0)) {
                        scope.conf.onClick(scope.conf);
                    }
                }
                //scope.$parent.paginationConf = scope.conf;
                //console.log("执行一次");
                if(scope.conf.target){
                    scope.conf.target.currentPage = scope.conf.currentPage;
                }else if(scope.$parent.SearchPOJO){
                    scope.$parent.SearchPOJO.currentPage = scope.conf.currentPage;
                }else if(scope.conf.methodFn){
                	scope.conf.methodFn(scope.conf);
                }
            }

            //上一页
            scope.prevPage = function(){
                if(scope.conf.currentPage > 1){
                    scope.conf.currentPage -= 1;
                }
            }
            //下一页
            scope.nextPage = function(){
                if(scope.conf.currentPage < scope.conf.numberOfPages){
                    scope.conf.currentPage += 1;
                }
            }
            //检查输入
            scope.checkInput=function(){
                scope.jumpPageNum = scope.jumpPageNum.replace(/[^0-9]/g,'');

            }
            // 跳转页
            scope.jumpToPage = function (e){
                var keycode = window.event?e.keyCode:e.which;
                if(keycode==13){
                    if(scope.jumpPageNum !== ''){
                        scope.conf.currentPage = scope.jumpPageNum;
                    }
                }
            }
            scope.$watch(function(){
                return scope.conf.numberOfPages  +' '+scope.conf.currentPage +' '+scope.conf.pageSize;
            },getPagination);
        }
    }
}]);

// Source: app/static/base/repalace/replace.js
/**
* Created by 41212 on 2017/3/31.
*/
angular.module('knowledge_static_web').filter('strReplace', ["$sce",function ($sce) {
    return function (value) {
      //return value.replace(/；/g,'，') ;
       return value.split("；");
        //var result = val.split(",");
        //function repeat(arr){
        //    var html;
        //     angular.forEach(arr,function(item,index){
        //         if(index%2==1){
        //             html+='<span class="c_blue">'+item+'</span>,'
        //         }else{
        //             //console.log(item);
        //             html='<span class="c-error">'+item+'</span\>'
        //         }
        //     });
        //    console.log(html);
        //    //return html
        //     return $sce.trustAsHtml(html)
        //}
        //return repeat(result);
    };
}]);
angular.module('knowledge_static_web').filter('strReplace 2', function () {
    return function (value) {
        return value.split(',') ;
    };
});
// Source: app/static/base/repeat_finished/repeat_finished.js
knowledge_static_web
    .directive('onRenderFinish', [function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs, controller) {
                if (scope.$last === true) {    //判断是否是最后一条数据
                    scope.$emit('onRenderFinish'); //向父级scope传送ngRepeatFinished命令
                    console.log("onRenderFinish");
                }
            }
        };
    }]);



// Source: app/static/base/tip/directives/tip.js
knowledge_static_web
    .directive('alertBar', [function () {

        return {
            restrict: 'EA',
            templateUrl: 'static/base/tip/directives/tip.html',
            scope : {
                message : "=",
                type : "="
            },
            link: function(scope, element, attrs){

                scope.hideAlert = function() {
                    scope.message = null;
                    scope.type = null;
                };

            }
        };
        //
        // return {
        //     restrict: 'EA',
        //     templateUrl: 'know_index/base/tip/directives/tip.html',
        //     //template: "<h3 ng-transclude>Hello, Directive,</h3>",
        //     scope: {
        //         message: "=",
        //         type: "="
        //     },
        //     // replace:false,
        //     // transclude: true,
        //     link: function (scope, element, attrs) {
        //         element.click(function(){
        //             $('.popup_info_tip').show();
        //         })
        //         scope.confirm = function () {
        //             scope.flag = true;
        //             scope.$parent.flag = true;
        //             scope.$parent.$parent.flag = true;
        //
        //         };
        //
        //         scope.hideAlert = function () {
        //             scope.message = null;
        //             scope.type = null;
        //         };
        //
        //     }
        // };
    }]);


// Source: app/static/base/tip/directives/tip_service.js
/**
 * Created by Administrator on 2016/7/8.
 */
knowledge_static_web
    .factory('TipService', ['$timeout', function($timeout) {
        var tipService = {
            message : null,
            type : null,
            setMessage : function(msg,type){
                this.message = msg;
                this.type = type;

                //提示框显示最多3秒消失
                var _self = this;
                $timeout(function(){
                    //console.log("after 3 s doing")
                    _self.clear();
                },3000);
            },
            clear : function(){
                this.message = null;
                this.type = null;
            }
        };

        return tipService;
    }]);
// Source: app/static/base/weightFilter/weightFilter.js
/**
* Created by 41212 on 2017/3/31.
*/
angular.module('knowledge_static_web').filter('weightFilter', function () {
    return function (value) {
        switch (value){
            case 35 : return "极不重要";
                break;
            case 34 : return "不重要";
                break;
            case 33 : return "一般";
                break;
            case 32 : return "重要";
                break;
            case 31 : return "极重要";
                break;
        }
    };
})
.filter('extensionWeightFilter', function () {
    return function (value) {
        switch (value){
            case 1 : return "普通";
                break;
            case 0 : return "否定";
                break;
        }
    };
})
.filter('channelFilter', function () {
    return function (value) {
        switch (value){
            case '130' : return "微信";
                break;
            case '131' : return "web";
                break;
            case '132' : return "app";
                break;
        }
    };
})
.filter('channelFilterMulti', function () {
    return function (value) {
        var channel = "";
        if(value.indexOf('130')>=0){
            channel+="微信,";
        }
        if(value.indexOf('131')>=0){
            channel+="web,";
        }
        if(value.indexOf('132')>=0){
            channel+="app,";
        }
        if(channel!=""){
            if(channel.substring(channel.length-1,channel.length)==","){
                channel = channel.substring(0,channel.length-1);
            }
        }
        return channel;
    };
})
.filter('sentimentTypeFilter', function () {
    return function (value) {
        switch (value){
            case 490 : return "乐";
                break;
            case 491 : return "好";
                break;
            case 492 : return "怒";
                break;
            case 493 : return "哀";
                break;
            case 494 : return "惧";
                break;
            case 495 : return "恶";
                break;
            case 496 : return "惊";
                break;
        }
    };
});

//angular.module('knowledge_static_web').filter('strReplace', function () {
//    return function (value) {
//        return value.replace(/，/g,'；') ;
//    };
//});
// Source: app/static/base/window_template/knowItem_delete/knowItem_delete_controller.js
/**
 * Created by Administrator on 2016/6/17.
 * describe : 总控制器，处理一些整体参数，提供下游调用方法
 */
knowledge_static_web.controller('knowItemDeleteController',
    ['$scope', 'KnowledgeManagementService','TipService','KnowledgePortalService',
        function ($scope, KnowledgeManagementService,TipService,KnowledgePortalService) {



    $scope.knowItemDelete = function(){
        var knowItemId = $scope.ngDialogData.selectedKnowItem.id;
        if(knowItemId ==null || knowItemId ==''){
            TipService.setMessage('知识条目ID不能为空', 'warning ');
            return;
        }
        KnowledgePortalService.deleteKnowItem(knowItemId);

    }
}])
// Source: app/static/base/window_template/knowItem_share/knowItem_share_controller.js
/**
 * Created by Administrator on 2016/6/17.
 * describe : 总控制器，处理一些整体参数，提供下游调用方法
 */
knowledge_static_web.controller('knowItemShareController',
    ['$scope', 'KnowledgeManagementService','TipService','KnowledgePortalService',
        function ($scope, KnowledgeManagementService,TipService,KnowledgePortalService) {

    
    KnowledgeManagementService.get({}, function (result) {
        if (result.status == 200 && result.data.list.length > 0) {
            $scope.knowLibraries = result.data.list;
        }
    })
            
    $scope.knowItemShare = function(){
        var knowItemId = $scope.ngDialogData.selectedKnowItem.id;
        if($scope.selectedKnowLibrary ==null || $scope.selectedKnowLibrary ==''){
            TipService.setMessage('请选定知识库', 'warning ');
            return;
        }
        if(knowItemId ==null && $knowItemId == ''){
            TipService.setMessage('请选定知识条目', 'warning ');
            return;
        }
        KnowledgePortalService.share(knowItemId,$scope.selectedKnowLibrary);

    }
}])
// Source: app/static/businessModeling/js/controller/aggregateConceptManage_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('businessModelingModule').controller('aggregateConceptManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addCollective : addCollective,
            editCollective : editCollective,
            deleteCollective:deleteCollective,
            listData : "",   // table 数据
            singleDelCollectiveConcept : singleDelCollectiveConcept,    //單條刪除
            singleAddCollectiveConcept : singleAddCollectiveConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchCollectiveConcept : searchCollectiveConcept,
            searchVal : "",
            searchType : "collectiveConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            weight: "33" ,   //默認權重
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete
        };

        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadCollectiveConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/collective/listByAttribute",{
                "collectiveConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadCollectiveConcept(current,data);
            },function(){
               // layer.msg("请求失败")
                console.log('请求失败');
            })
        }

        function loadCollectiveConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($("#collectiveConceptWeight").val())==true || nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchCollectiveConcept(current);
                    }else{
                        loadCollectiveConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！",{time:1000});
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/collective/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadCollectiveConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editCollective(item){
            $scope.vm.dialogTitle="编辑集合概念";
            $scope.vm.key = item.collectiveConceptKey;
            $scope.vm.term =  item.collectiveConceptTerm;
            $scope.vm.weight =  item.collectiveConceptWeight;
            addCollectiveConceptDialog(singleEditCollectiveConcept,item);
        }
        function searchCollectiveConcept(current){
            if($scope.vm.searchType == "collectiveConceptModifier"){
                searchCollectiveConceptByUser(current);
            }else{
                searchCollectiveConceptByType(current);
            }
        }
        //查询
        function searchCollectiveConceptByUser(current){
            httpRequestPost("/api/ms/modeling/concept/collective/listByModifier",{
                "collectiveConceptModifier":$scope.vm.searchVal,
                "collectiveConceptApplicationId": $scope.vm.applicationId,
                "index":(current-1)*$scope.vm.pageSize,
                "pageSize":$scope.vm.pageSize
            },function(data){
                loadCollectiveConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息",{time:1000});
            });
        }
        function searchCollectiveConceptByType(current){
            var request = new Object();
            request.collectiveConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "collectiveConceptModifyTime"){
                request=switchCollectiveConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段",{time:1000});
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/collective/listByAttribute",request,function(data){
                loadCollectiveConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchCollectiveConceptSearchType(request,value){
            if($("#searchType").val()=="collectiveConceptKey"){
                request.collectiveConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="collectiveConceptWeight"){
                request.collectiveConceptWeight=$("#collectiveConceptWeight").val();
            }else if($("#searchType").val()=="collectiveConceptTerm"){
                request.collectiveConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addCollective(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/aggregate/aggregateConceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/collective/repeatCheck",{
                            "collectiveConceptApplicationId": $scope.vm.applicationId,
                            "collectiveConceptKey": $scope.vm.key
                        },function(data){          //类名重複
                            if(data.status===10002){
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/collective/listByAttribute",{
                                        "collectiveConceptApplicationId": $scope.vm.applicationId,
                                        "collectiveConceptKey":$scope.vm.key,
                                        "index":0,
                                        "pageSize":1
                                    },function(data){
                                        $scope.vm.dialogTitle="编辑集合概念";
                                        console.log(data);
                                        addCollectiveConceptDialog(singleEditCollectiveConcept,data.data[0]);
                                        $scope.vm.key = data.data[0].collectiveConceptKey;
                                        $scope.vm.term =  data.data[0].collectiveConceptTerm;
                                        $scope.vm.weight =  data.data[0].collectiveConceptWeight;
                                    },function(){
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            }else{
                                //类名无冲突
                                $scope.vm.dialogTitle="增加集合概念";
                                $scope.vm.term="";
                                $scope.vm.weight="33" ;   //默認權重
                                addCollectiveConceptDialog(singleAddCollectiveConcept);
                            }
                        },function(){
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#collectiveKey").blur(function(){
                        if(lengthCheck($("#collectiveKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addCollectiveConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/aggregate/aggregateConceptManageDialog2.html",
                scope: $scope,
                Returns : {a:1},
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.weight =  33;
                    }
                }

            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#colectiveKeyTwo").blur(function(){
                        if(lengthCheck($("#colectiveKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteCollective(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelCollectiveConcept(id)
                    }
                }
            });
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadCollectiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/collective/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditCollectiveConcept(item){
            assembleCollectiveConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/collective/update",{
                "collectiveConceptId":item.collectiveConceptId,
                "collectiveConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "collectiveConceptKey": $scope.vm.key,
                "collectiveConceptModifier": $scope.vm.modifier,
                "collectiveConceptTerm": $scope.vm.term,
                "collectiveConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadCollectiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddCollectiveConcept(){
            assembleCollectiveConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/collective/add",{
                "collectiveConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "collectiveConceptKey":  $scope.vm.key,
                "collectiveConceptModifier": $scope.vm.modifier,
                "collectiveConceptTerm": $scope.vm.term,
                "collectiveConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadCollectiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelCollectiveConcept(id){
            httpRequestPost("/api/ms/modeling/concept/collective/delete",{
                "collectiveConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadCollectiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleCollectiveConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            $scope.vm.weight = 33;
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","concept_with_weight_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/collective/export",{
                "collectiveConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);


// Source: app/static/businessModeling/js/controller/botConceptManage_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('businessModelingModule').controller('botConceptManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addBot : addBot,
            editBot : editBot,
            deleteBot:deleteBot,
            listData : "",   // table 数据
            singleDelBotConcept : singleDelBotConcept,    //單條刪除
            singleAddBotConcept : singleAddBotConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchBotConcept : searchBotConcept,
            searchVal : "",
            searchType : "botConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            weight: "33" ,   //默認權重
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000"
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadBotConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/bot/listByAttribute",{
                "botConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadBotConcept(current,data);
            },function(){
                //layer.msg("请求失败")
                console.log('请求失败');
            })
        }
        function loadBotConcept(current,data){
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($("#botConceptWeight").val())==true || nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchBotConcept(current);
                    }else{
                        loadBotConceptTable(current);
                    }
                }, 100);
            }
        },true);

        //编辑
        function editBot(item){
            $scope.vm.dialogTitle="编辑BOT概念";
            $scope.vm.key = item.botConceptKey;
            $scope.vm.term =  item.botConceptTerm;
            $scope.vm.weight =  item.botConceptWeight;
            addBotConceptDialog(singleEditBotConcept,item);
        }
        function searchBotConcept(current){
            if($scope.vm.searchType == "botConceptModifier"){
                searchBotConceptByUser(current);
            }else{
                searchBotConceptByType(current);
            }
        }
        //查询
        function searchBotConceptByUser(current){
            httpRequestPost("/api/ms/modeling/concept/bot/listByModifier",{
                "botConceptModifier":$scope.vm.searchVal,
                "botConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadBotConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchBotConceptByType(current){
            var request = new Object();
            request.botConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "botConceptModifyTime"){
                request=switchBotConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/bot/listByAttribute",request,function(data){
                loadBotConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }
        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchBotConceptSearchType(request,value){
            if($("#searchType").val()=="botConceptKey"){
                request.botConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="botConceptWeight"){
                request.botConceptWeight=$("#botConceptWeight").val();
            }else if($("#searchType").val()=="botConceptTerm"){
                request.botConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }
        //添加 窗口
        function addBot(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/bot/botConceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/bot/repeatCheck",{
                            "botConceptApplicationId": $scope.vm.applicationId,
                            "botConceptKey": $scope.vm.key
                        },function(data){          //类名重複
                            if(data.status===10002){
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/bot/listByAttribute",{
                                        "botConceptApplicationId": $scope.vm.applicationId,
                                        "botConceptKey":$scope.vm.key,
                                        "index":0,
                                        "pageSize":1
                                    },function(data){
                                        $scope.vm.dialogTitle="编辑BOT概念";
                                        console.log(data);
                                        addBotConceptDialog(singleEditBotConcept,data.data[0]);
                                        $scope.vm.key = data.data[0].botConceptKey;
                                        $scope.vm.term =  data.data[0].botConceptTerm;
                                        $scope.vm.weight =  data.data[0].botConceptWeight;
                                    },function(){
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            }else{
                                //类名无冲突
                                $scope.vm.dialogTitle="增加BOT概念";
                                $scope.vm.term="";
                                $scope.vm.weight="33" ;   //默認權重
                                addBotConceptDialog(singleAddBotConcept);
                            }
                        },function(){
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#botKey").blur(function(){
                        if(lengthCheck($("#botKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addBotConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/bot/botConceptManageDialog2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#botKeyTwo").blur(function(){
                        if(lengthCheck($("#botKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteBot(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelBotConcept(id)
                    }
                }
            });
        }
        //編輯事件
        function singleEditBotConcept(item){
            assembleBotConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/bot/update",{
                "botConceptId":item.botConceptId,
                "botConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "botConceptKey":  $scope.vm.key,
                "botConceptModifier": $scope.vm.modifier,
                "botConceptTerm": $scope.vm.term,
                "botConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadBotConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddBotConcept(){
            assembleBotConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/bot/add",{
                "botConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "botConceptKey":  $scope.vm.key,
                "botConceptModifier": $scope.vm.modifier,
                "botConceptTerm": $scope.vm.term,
                "botConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadBotConceptTable($scope.vm.paginationConf.currentPage);
                }
            })
        }
        //单条刪除
        function singleDelBotConcept(id){
            httpRequestPost("/api/ms/modeling/concept/bot/delete",{
                "botConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadBotConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleBotConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
    }
]);
// Source: app/static/businessModeling/js/controller/businessConceptManage_controller.js

/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('businessModelingModule').controller('businessConceptManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$interval","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$interval,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addBusiness : addBusiness,
            editBusiness : editBusiness,
            deleteBusiness:deleteBusiness,
            listData : "",   // table 数据
            singleDelBusinessConcept : singleDelBusinessConcept,    //單條刪除
            singleAddBusinessConcept : singleAddBusinessConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchBusinessConcept : searchBusinessConcept,
            searchVal : "",
            searchType : "businessConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            relate: "",
            weight: "33" ,   //默認權重
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            relateNullOrBeyondLimit:"相关概念不能超过长度限制2000",
            relateBeyondLimit:"相关概念个数不能超过20个",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete,
            findMining: findMining
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadBusinessConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/business/listByAttribute",{
                "businessConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadBusinessConcept(current,data);
            },function(){
                //layer.msg("请求失败");
                console.log('请求失败');
            });
        }
        function loadBusinessConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($("#businessConceptWeight").val())==true || nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchBusinessConcept(current);
                    }else{
                        loadBusinessConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/business/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadBusinessConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editBusiness(item){
            $scope.vm.dialogTitle="编辑业务概念";
            $scope.vm.key = item.businessConceptKey;
            $scope.vm.term =  item.businessConceptTerm;
            $scope.vm.relate =  item.businessConceptRelate;
            console.log($scope.vm.term);
            $scope.vm.weight = item.businessConceptWeight;
            addBusinessConceptDialog(singleEditBusinessConcept,item);
        }
        function searchBusinessConcept(current){
            if($scope.vm.searchType == "businessConceptModifier"){
                searchBusinessConceptByUser(current);
            }else{
                searchBusinessConceptByType(current);
            }
        }
        //查询
        function searchBusinessConceptByUser(current){
            httpRequestPost("/api/ms/modeling/concept/business/listByModifier",{
                "businessConceptApplicationId": $scope.vm.applicationId,
                "businessConceptModifier":$scope.vm.searchVal,
                "index":(current-1)*$scope.vm.pageSize,
                "pageSize":$scope.vm.pageSize
            },function(data){
                loadBusinessConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchBusinessConceptByType(current){
            var request = new Object();
            request.businessConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "businessConceptModifyTime"){
                request=switchBusinessConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/business/listByAttribute",request,function(data){
                loadBusinessConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchBusinessConceptSearchType(request,value){
            if($("#searchType").val()=="businessConceptKey"){
                request.businessConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="businessConceptWeight"){
                request.businessConceptWeight=$("#businessConceptWeight").val();
            }else if($("#searchType").val()=="businessConceptTerm"){
                request.businessConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addBusiness(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/business/businessConceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/business/repeatCheck",{
                            "businessConceptApplicationId": $scope.vm.applicationId,
                            "businessConceptKey": $scope.vm.key
                        },function(data){          //类名重複
                            if(data.status===10002){
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/business/listByAttribute",{
                                        "businessConceptApplicationId": $scope.vm.applicationId,
                                        "businessConceptKey":$scope.vm.key,
                                        "index":0,
                                        "pageSize":1
                                    },function(data){
                                        $scope.vm.dialogTitle="编辑业务概念";
                                        console.log(data);
                                        addBusinessConceptDialog(singleEditBusinessConcept,data.data[0]);
                                        $scope.vm.key = data.data[0].businessConceptKey;
                                        $scope.vm.term =  data.data[0].businessConceptTerm;
                                        $scope.vm.relate =  data.data[0].businessConceptRelate;
                                        $scope.vm.weight =  data.data[0].businessConceptWeight;
                                    },function(){
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            }else{
                                //类名无冲突
                                $scope.vm.dialogTitle="增加业务概念";
                                $scope.vm.term="";
                                $scope.vm.relate="";
                                $scope.vm.weight="33" ;   //默認權重
                                findMining();
                            }
                        },function(){
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.relate = "";
                        $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function(){
                    $("#businessKey").blur(function(){
                        if(lengthCheck($("#businessKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                },100);
            }
        }

        //編輯彈框   添加公用
        function addBusinessConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/business/businessConceptManageDialog2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        var objRelate = $("#relate").next();
                        var relate = "";
                        var lengthRelate = objRelate.find("li").length;
                        if(lengthRelate>20){
                            $("#relateAddError").html($scope.vm.relateBeyondLimit);
                            return false;
                        }else{
                            $("#relateAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,5000)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(objRelate.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        relate+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        console.log("====="+relate);
                        if(relate!=""){
                            relate=relate.substring(0,relate.length-1);
                            $scope.vm.relate=relate;
                            if(lengthCheck(relate,0,5000)==false){
                                $("#relateAddError").html($scope.vm.relateNullOrBeyondLimit);
                                return false;
                            }else{
                                $("#relateAddError").html('');
                            }
                        }
                        callback(item);
                    }else{
                         $scope.vm.key = "";
                         $scope.vm.term = "";
                         $scope.vm.relate = "";
                         $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    relateSpliterTagEditor();
                    $("#businessKeyTwo").blur(function(){
                        if(lengthCheck($("#businessKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //查询挖掘词
        function findMining() {
            httpRequestPostParam("/api/ms/modeling/concept/mining/listByConceptKey",{
                "request": "string",
                "question": $scope.vm.key,
                "count": 5
            },function(data){
                if(data.status == 200){
                    $scope.vm.term = data.data;
                    addBusinessConceptDialog(singleAddBusinessConcept, $scope.vm.term);
                }else{
                    addBusinessConceptDialog(singleAddBusinessConcept);
                    console.log('概念挖掘失败');
                }
            });
        }

        //   刪除 彈框
        function deleteBusiness(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelBusinessConcept(id)
                    }
                }
            });
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadBusinessConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/business/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }

        //編輯事件
        function singleEditBusinessConcept(item){
            assembleBusinessConceptTerm();
            assembleBusinessConceptRelate();
            httpRequestPost("/api/ms/modeling/concept/business/update",{
                "businessConceptId":item.businessConceptId,
                "businessConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "businessConceptKey":  $scope.vm.key,
                "businessConceptModifier": $scope.vm.modifier,
                "businessConceptTerm": $scope.vm.term,
                "businessConceptRelate": $scope.vm.relate,
                "businessConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadBusinessConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddBusinessConcept(){
            assembleBusinessConceptTerm();
            assembleBusinessConceptRelate();
            httpRequestPost("/api/ms/modeling/concept/business/add",{
                "businessConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "businessConceptKey":  $scope.vm.key,
                "businessConceptModifier": $scope.vm.modifier,
                "businessConceptTerm": $scope.vm.term,
                "businessConceptRelate": $scope.vm.relate,
                "businessConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadBusinessConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelBusinessConcept(id){
            httpRequestPost("/api/ms/modeling/concept/business/delete",{
                "businessConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadBusinessConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else if(term instanceof  Array){
                $("#term").tagEditor({
                    initialTags:term,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: term},
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //初始化tagEditor插件
        function relateSpliterTagEditor() {
            var relate = $scope.vm.relate;
            if(relate=="" || relate==null){
                console.log("===relate===");
                $("#relate").tagEditor({
                    forceLowercase: false
                });
            }else{
                var relates = relate.split($scope.vm.termSpliter);
                console.log(relates);
                $("#relate").tagEditor({
                    initialTags:relates,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: relates},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleBusinessConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            var length = obj.find("li").length;
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        function assembleBusinessConceptRelate(){
            var obj = $("#relate").next();
            var relate = "";
            var length = obj.find("li").length;
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            relate+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            relate=relate.substring(0,relate.length-1);
            console.log("====="+relate);
            $scope.vm.relate=relate;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            $scope.vm.relate = "";
            $scope.vm.weight = 33;
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","business_concept_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/business/export",{
                "businessConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);
// Source: app/static/businessModeling/js/controller/businessModeling_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('businessModelingModule').controller('businessModelingController', [
    '$scope', "$state", "$stateParams",
    function ($scope,$state, $stateParams) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        //$scope.vm = {
        //    isSlide : isSlide,
        //};
        //function isSlide(event){
        //    var self=event.target;
        //    if($(self).hasClass("slideActive")){
        //        $(self).removeClass("slideActive").next(".menu_1").stop().slideToggle();
        //    }else{
        //        $(self).addClass("slideActive").next(".menu_1").stop().slideToggle();
        //    }
        //}
    }
]);
// Source: app/static/businessModeling/js/controller/disableConceptManage_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('businessModelingModule').controller('disableConceptManageController', [
'$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addStop : addStop,
            editStop : editStop,
            deleteStop:deleteStop,
            listData : "",   // table 数据
            singleDelStopConcept : singleDelStopConcept,    //單條刪除
            singleAddStopConcept : singleAddStopConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchStopConcept : searchStopConcept,
            searchVal : "",
            searchType : "stopConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadStopConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/stop/listByAttribute",{
                "stopConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadStopConcept(current,data);
            },function(){
                //layer.msg("请求失败");
                console.log('请求失败');
            })
        }
        function loadStopConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchStopConcept(current);
                    }else{
                        loadStopConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/stop/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadStopConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editStop(item){
            $scope.vm.dialogTitle="编辑停用概念";
            $scope.vm.key = item.stopConceptKey;
            $scope.vm.term =  item.stopConceptTerm;
            addStopConceptDialog(singleEditStopConcept,item);
        }
        function searchStopConcept(current){
            if($scope.vm.searchType == "stopConceptModifier"){
                searchStopConceptByUser(current);
            }else{
                searchStopConceptByType(current);
            }
        }
        //查询
        function searchStopConceptByUser(current){
            console.log($scope.vm.searchVal);
            httpRequestPost("/api/ms/modeling/concept/stop/listByModifier",{
                "stopConceptModifier":$scope.vm.searchVal,
                "stopConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadStopConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchStopConceptByType(current){
            var request = new Object();
            request.stopConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "stopConceptModifyTime"){
                request=switchStopConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/stop/listByAttribute",request,function(data){
                loadStopConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchStopConceptSearchType(request,value){
            if($("#searchType").val()=="stopConceptKey"){
                request.stopConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="stopConceptTerm"){
                request.stopConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addStop(){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/disable/disableConceptManageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/stop/repeatCheck", {
                            "stopConceptApplicationId": $scope.vm.applicationId,
                            "stopConceptKey": $scope.vm.key
                        }, function (data) {          //类名重複
                            if (data.status === 10002) {
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/stop/listByAttribute", {
                                        "stopConceptApplicationId": $scope.vm.applicationId,
                                        "stopConceptKey": $scope.vm.key,
                                        "index": 0,
                                        "pageSize": 1
                                    }, function (data) {
                                        $scope.vm.dialogTitle = "编辑停用概念";
                                        console.log(data);
                                        addStopConceptDialog(singleEditStopConcept, data.data[0]);
                                        $scope.vm.key = data.data[0].stopConceptKey;
                                        $scope.vm.term = data.data[0].stopConceptTerm;
                                    }, function () {
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            } else {
                                //类名无冲突
                                $scope.vm.dialogTitle = "增加停用概念";
                                $scope.vm.term = "";
                                addStopConceptDialog(singleAddStopConcept);
                            }
                        }, function () {
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#stopKey").blur(function(){
                        if(lengthCheck($("#stopKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addStopConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/disable/disableConceptManageDialog2.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#stopKeyTwo").blur(function(){
                        if(lengthCheck($("#stopKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteStop(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelStopConcept(id)
                    }
                }
            });
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadStopConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/stop/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditStopConcept(item){
            assembleStopConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/stop/update",{
                "stopConceptId":item.stopConceptId,
                "stopConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "stopConceptKey":  $scope.vm.key,
                "stopConceptModifier": $scope.vm.modifier,
                "stopConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadStopConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddStopConcept(){
            assembleStopConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/stop/add",{
                "stopConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "stopConceptKey":  $scope.vm.key,
                "stopConceptModifier": $scope.vm.modifier,
                "stopConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadStopConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelStopConcept(id){
            httpRequestPost("/api/ms/modeling/concept/stop/delete",{
                "stopConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadStopConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleStopConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","concept_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/stop/export",{
                "stopConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);

// Source: app/static/businessModeling/js/controller/errorCorrectionConceptManage_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('businessModelingModule').controller('errorCorrectionConceptManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addCorrection : addCorrection,
            editCorrection : editCorrection,
            deleteCorrection:deleteCorrection,
            listData : "",   // table 数据
            singleDelCorrectionConcept : singleDelCorrectionConcept,    //單條刪除
            singleAddCorrectionConcept : singleAddCorrectionConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchCorrectionConcept : searchCorrectionConcept,
            searchVal : "",
            searchType : "correctionConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadCorrectionConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/correction/listByAttribute",{
                "correctionConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadCorrectionConcept(current,data);
            },function(){
               // layer.msg("请求失败")
                console.log('请求失败');
            });
        }
        function loadCorrectionConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchCorrectionConcept(current);
                    }else{
                        loadCorrectionConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/correction/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadCorrectionConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editCorrection(item){
            $scope.vm.dialogTitle="编辑纠错概念";
            $scope.vm.key = item.correctionConceptKey;
            $scope.vm.term =  item.correctionConceptTerm;
            addCorrectionConceptDialog(singleEditCorrectionConcept,item);
        }
        function searchCorrectionConcept(current){
            if($scope.vm.searchType == "correctionConceptModifier"){
                searchCorrectionConceptByUser(current);
            }else{
                searchCorrectionConceptByType(current);
            }
        }
        //查询
        function searchCorrectionConceptByUser(current){
            httpRequestPost("/api/ms/modeling/concept/correction/listByModifier",{
                "correctionConceptModifier":$scope.vm.searchVal,
                "correctionConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadCorrectionConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchCorrectionConceptByType(current){
            var request = new Object();
            request.correctionConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "correctionConceptModifyTime"){
                request=switchCorrectionConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/correction/listByAttribute",request,function(data){
                loadCorrectionConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchCorrectionConceptSearchType(request,value){
            if($("#searchType").val()=="correctionConceptKey"){
                request.correctionConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="correctionConceptTerm"){
                request.correctionConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addCorrection(){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/errorCorrection/errorCorrectionConceptManageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/correction/repeatCheck", {
                            "correctionConceptApplicationId": $scope.vm.applicationId,
                            "correctionConceptKey": $scope.vm.key
                        }, function (data) {          //类名重複
                            if (data.status === 10002) {
                                layer.confirm("您添加的概念类已经在   ，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/correction/listByAttribute", {
                                        "correctionConceptApplicationId": $scope.vm.applicationId,
                                        "correctionConceptKey": $scope.vm.key,
                                        "index": 0,
                                        "pageSize": 1
                                    }, function (data) {
                                        $scope.vm.dialogTitle = "编辑纠错概念";
                                        console.log(data);
                                        addCorrectionConceptDialog(singleEditCorrectionConcept, data.data[0]);
                                        $scope.vm.key = data.data[0].correctionConceptKey;
                                        $scope.vm.term = data.data[0].correctionConceptTerm;
                                    }, function () {
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            } else {
                                //类名无冲突
                                $scope.vm.dialogTitle = "增加纠错概念";
                                $scope.vm.term = "";
                                addCorrectionConceptDialog(singleAddCorrectionConcept);
                            }
                        }, function () {
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#correctionKey").blur(function(){
                        if(lengthCheck($("#correctionKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addCorrectionConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/errorCorrection/errorCorrectionConceptManageDialog2.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#correctionKeyTwo").blur(function(){
                        if(lengthCheck($("#correctionKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteCorrection(id){
            var dia = angular.element(".ngdialog ");
            if(dia.length==0) {
                var dialog = ngDialog.openConfirm({
                    template: "/static/businessModeling/conceptManageDialog.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                        if (e === 1) {
                            singleDelCorrectionConcept(id)
                        }
                    }
                });
            }
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadCorrectionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/correction/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditCorrectionConcept(item){
            assembleCorrectionConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/correction/update",{
                "correctionConceptId":item.correctionConceptId,
                "correctionConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "correctionConceptKey":  $scope.vm.key,
                "correctionConceptModifier": $scope.vm.modifier,
                "correctionConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadCorrectionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddCorrectionConcept(){
            assembleCorrectionConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/correction/add",{
                "correctionConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "correctionConceptKey":  $scope.vm.key,
                "correctionConceptModifier": $scope.vm.modifier,
                "correctionConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadCorrectionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelCorrectionConcept(id){
            httpRequestPost("/api/ms/modeling/concept/correction/delete",{
                "correctionConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadCorrectionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleCorrectionConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","concept_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/correction/export",{
                "correctionConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);
// Source: app/static/businessModeling/js/controller/factorNewFrame_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('businessModelingModule').controller('factorNewFrameController', [
    '$scope', "$state", "$stateParams","ngDialog",
    function ($scope, $state, $stateParams, ngDialog) {
        
        $state.go("factorNewFrame.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            

        };

        


    }
]);
// Source: app/static/businessModeling/js/controller/faqNewFrame_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('businessModelingModule').controller('faqNewFrameController', [
    '$scope', "$state", "$stateParams","ngDialog",
    function ($scope, $state, $stateParams, ngDialog) {
        
        $state.go("faqNewFrame.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            

        };

        


    }
]);
// Source: app/static/businessModeling/js/controller/frameworkLibrary_controller.js
/**
 * Created by mileS on 2017/3/23.
 */
angular.module('businessModelingModule').controller('frameworkLibraryController', [
    '$scope','$timeout',"$state", "$stateParams","$compile","ngDialog","$cookieStore","$interval",
    function ($scope,$timeout,$state, $stateParams,$compile,ngDialog,$cookieStore,$interval) {
        $state.go("frameworkLibrary.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            botSelectValue:"root",
            botRoot : "",     //根节点
            knowledgeBotVal:"",  //bot 内容
            botInfo:null,  //bot信息
            clearColor:clearColor,
            loadFrameLibrary:loadFrameLibrary,
            addFrame:addFrame,
            paginationConf:{
                currentPage: 1,//当前页
                totalItems: 0, //总页数
                pageSize: 1,//第页条目数
                pagesLength: 8//分页框数量
            },
            pageSize:6,
            frameInfo:null,
            addFaq:addFaq,
            addConcept:addConcept,
            addElement:addElement,
            updateFaq:updateFaq,
            updateConcept:updateConcept,
            updateElement:updateElement,
            frameTitle:"",
            frameTypeId:0,
            elementAskContentArray: [],
            elementAttributeIdArray: [],
            elementContentArray: [],
            elementFrameIdArray: [],
            elementMiningTypeIdArray: [],
            elementRelateConceptArray: [],
            elementTypeIdArray: [],
            frameCategoryId: "",
            frameEnableStatusId: 1,
            frameModifierId: "",
            defaultString: "null",
            textAndTagSplit: "#",
            conceptSplit: "；",
            defaultInt: 0,
            responseView:responseView,
            turnOn:turnOn,
            elementIdArray:[],
            concept_marking:concept_marking,
            addEle:addEle,
            delEle:delEle,
            relateConcept:null,
            frameTitleNullErrorInfo:"框架标题为空或超过长度限制50",
            notContainHtmlLabel:"不能包含HTML标签",
            frameTitleRepeatCheck:frameTitleRepeatCheck,
            searchNodeForFrame:searchNodeForFrame,
            recursionForFrame:recursionForFrame,
            autoHeightForFrame:autoHeightForFrame,
            locationForFrame:locationForFrame,
            listData:"",
            editFrame:editFrame,
            deleteFrame:deleteFrame,
            searchByFrameTitle:searchByFrameTitle,
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete,
            suggestionValue:"",
            suggestionData:"",
            winHeight:0
        };
        $scope.categoryAttributeName;
        var categoryApplicationId = $cookieStore.get("applicationId");
        var categoryModifierId = $cookieStore.get("userId");

        autoHeightForFrame();

        function autoHeightForFrame(){
            var $win = $(window);
            var winHeight = $win.height()*0.75;
            $scope.vm.winHeight=winHeight+5;
            $(".libraryFt").attr("style","width: 450px;height: "+winHeight+"px;overflow-y: auto;background: #fff;float: left;box-sizing:border-box;");
            $(".libraryRth").attr("style","width: 710px;height: "+winHeight+"px;overflow-y: auto;background: #fff;float: right;padding: 30px;box-sizing:border-box;");
        }

        var params = {
            "categoryName":$("#category-autocomplete").val(),
            "categoryAttributeName":"node",
            "categoryApplicationId":categoryApplicationId
        };
        //类目查找自动补全
        $('#category-autocomplete').autocomplete({
            serviceUrl: "/api/ms/modeling/category/searchbycategoryname",
            type:'POST',
            params:params,
            paramName:'categoryName',
            dataType:'json',
            transformResult:function(data){
                var result = new Object();
                var array = [];
                if(data.data){
                    for(var i=0;i<data.data.length;i++){
                        array[i]={
                            data:data.data[i].categoryId,
                            value:data.data[i].categoryName
                        }
                    }
                }
                result.suggestions = array;
                return result;
            },
            onSelect: function(suggestion) {
                searchNodeForFrame(suggestion);
                $scope.vm.suggestionValue=suggestion.value;
                $scope.vm.suggestionData=suggestion.data;
            }
        });
        $interval(function(){
            if(nullCheck($scope.vm.suggestionData)==true){
                var suggestion = new Object();
                suggestion.value=$scope.vm.suggestionValue;
                suggestion.data=$scope.vm.suggestionData;
                if(locationForFrameFlag(suggestion)){
                    locationForFrame(suggestion);
                    $scope.vm.suggestionValue="";
                    $scope.vm.suggestionData="";
                }
            }
        },2000);
        //定位
        function locationForFrame(suggestion){
            var currentNodeId = suggestion.data;
            var initHeight = 0;
            var sum = $(".aside-navs").find("i").length;
            $.each($(".aside-navs").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    var offset = 0;
                    if(scrollHeight-100>0){
                        offset = (((initHeight+1)/sum)*(scrollHeight-100));
                    }
                    $(".libraryFt").animate({
                        scrollTop:offset+"px"
                    },800);
                    return false;
                }else{
                    initHeight++;
                }
            });
        }
        function locationForFrameFlag(suggestion){
            var currentNodeId = suggestion.data;
            var flag = false;
            var sum = $(".aside-navs").find("i").length;
            $.each($(".aside-navs").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    if(sum>=10 && scrollHeight>=$scope.vm.winHeight){
                        flag = true;
                    }else if(sum<10){
                        flag = true;
                    }
                    return false;
                }
            });
            return flag;
        }
        //搜寻节点
        function searchNodeForFrame(suggestion){
            var currentNodeId = suggestion.data;
            var firstNode = $(".aside-navs").find("i").filter(":eq(0)");
            if($(firstNode).css("backgroundPosition")=="0% 0%"){
                appendTree(firstNode);
            }else if($(firstNode).parent().parent().next()==null){
                appendTree(firstNode);
            }
            if($(firstNode).attr("data-option")==currentNodeId){
                clearColor();
                $scope.vm.knowledgeBotVal = $(firstNode).next().html();
                $scope.vm.botSelectValue = $(firstNode).next().attr("data-option");
                $scope.vm.botSelectType = $(firstNode).next().attr("type-option");
                $(firstNode).next().attr("style","color:black;font-weight:bold;");
                loadFrameLibrary(1,0);
                $scope.$apply();
            }else{
                recursionForFrame(suggestion,firstNode);
            }
        }
        function recursionForFrame(suggestion,node){
            var list = $(".aside-navs").find("li");
            var flag = false;
            $.each(list,function(index,value){
                if($(value).attr("data-option")==$(node).attr("data-option")){
                    var currNode = $(value).find("i").filter(":eq(0)");
                    if($(currNode).attr("data-option")==suggestion.data){
                        clearColor();
                        $scope.vm.knowledgeBotVal = $(currNode).next().html();
                        $scope.vm.botSelectValue = $(currNode).next().attr("data-option");
                        $scope.vm.botSelectType = $(currNode).next().attr("type-option");
                        $(currNode).next().attr("style","color:black;font-weight:bold;");
                        loadFrameLibrary(1,0);
                        $scope.$apply();
                        flag = true;
                        //跳出
                        return false;
                    }else{
                        if(flag==true){
                            return false;
                        }
                        //展开
                        if($(currNode).css("backgroundPosition")=="0% 0%"){
                            appendTree(currNode);
                        }else if($(currNode).parent().parent().next()==null){
                            appendTree(currNode);
                        }
                        //递归
                        recursionForFrame(suggestion,currNode);
                    }
                }
            });
        }
        //加载业务树
        initBot();

        //获取root 数据
        function initBot(){
            $(".aside-navs").empty();
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId": categoryApplicationId,
                "categoryPid": "root"
            },function(data){
                var html =  '<ul class="menus show">';
                for(var i=0;i<data.data.length;i++){
                    html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                        '<div class="slide-a">'+
                        '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                        '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                        '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' type-option="'+data.data[i].categoryTypeId+'"attribute-option="'+data.data[i].categoryAttributeName+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                        '</a>' +
                        '</div>' +
                        '</li>';

                }
                html+='</ul>';
                $(".aside-navs").append(html);
                var firstNode = $(".aside-navs").find("i").filter(":eq(0)");
                if($(firstNode).css("backgroundPosition")=="0% 0%"){
                    appendTree(firstNode);
                }else if($(firstNode).parent().parent().next()==null){
                    appendTree(firstNode);
                }


            },function(){
            });
        }
        $(".aside-navs").on("click","span",function(){
            clearColor();
            $scope.vm.knowledgeBotVal = $(this).html();
            $scope.vm.botSelectValue = $(this).attr("data-option");
            $scope.vm.botSelectType = $(this).attr("type-option");
            var categoryAttributeName =$(this).attr("attribute-option");
            if(categoryAttributeName=="node"){
                $(this).attr("style","color:black;font-weight:bold;");
            }else if(categoryAttributeName=="edge"){
                $(this).attr("style","color:#ED7D31;font-weight:bold;");
            }
            loadFrameLibrary(1,0);
            $scope.$apply();
        });
        //节点样式转换
        function nodeStyleSwitch(attrType){
            if(attrType=="edge"){
                return "style='color:#ED7D31;'";
            }else{
                return "";
            }
        }
        //显示节点描述
        function categoryDescribeView(describeStr){
            if(nullCheck(describeStr)==true){
                return "title='"+describeStr+"'";
            }
            return "";
        }
        //点击下一级 bot 下拉数据填充以及下拉效果
        $(".aside-navs").on("click",'i',function(){
            appendTree(this);
        });
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/frame/batchdelete",request,function(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                });
            });
        }
        //重设请求数组
        function requestArrayReset(){
            $scope.vm.elementAskContentArray=[];
            $scope.vm.elementAttributeIdArray=[];
            $scope.vm.elementContentArray=[];
            $scope.vm.elementFrameIdArray=[];
            $scope.vm.elementMiningTypeIdArray=[];
            $scope.vm.elementRelateConceptArray=[];
            $scope.vm.elementTypeIdArray=[];
            $scope.vm.elementIdArray=[];
        }
        //加载子树
        function appendTree(obj){
            var id = $(obj).attr("data-option");
            var that = $(obj);
            if(!that.parent().parent().siblings().length){
                that.css("backgroundPosition","0% 100%");
                httpRequestPostAsync("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId": categoryApplicationId,
                    "categoryPid": id
                },function(data){
                    if(data.data){
                        var html = '<ul class="menus">';
                        for(var i=0;i<data.data.length;i++){
                            html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                                '<div class="slide-a">'+
                                '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' attribute-option="'+data.data[i].categoryAttributeName+'" type-option="'+data.data[i].categoryTypeId+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                        }
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent().parent()));
                        that.parent().parent().next().slideDown();

                    }
                },function(err){
                });
            }else{
                if(that.css("backgroundPosition")=="0% 0%"){
                    that.css("backgroundPosition","0% 100%");
                    that.parent().parent().next().slideDown();
                }else{
                    that.css("backgroundPosition","0% 0%");
                    that.parent().parent().next().slideUp();
                }
            }
        }
        //清除已选颜色
        function clearColor(){
            $.each($(".aside-navs").find("span"),function(index,value){
                if($(this).attr("attribute-option")=="node"){
                    $(this).attr("style","");
                }else if($(this).attr("attribute-option")=="edge"){
                    $(this).attr("style","color:#ED7D31;");
                }
            });
        }
        //自动转换图标类型
        function styleSwitch(type,leaf,attrType){
            var styleHidden = "display: inline-block;";
            if(leaf==0){
                styleHidden="display:none;";
            }
            if(attrType=="node"){
                return "style='"+styleHidden+"position: relative;top: -1px;margin-right: 2px;width: 15px;height: 15px;vertical-align: middle;background-position: left top;background-repeat: no-repeat;background-image: url(../../images/images/aside-nav-icon.png);'";
            }
            var style ='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-rq.png);"';
            switch (type){
                case 161:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-sx.png);"';break;
                case 160:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-lc.png);"';break;
                case 162:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-dy.png);"';break;
            }
            return style;
        }
        //加载对应类目下的框架库
        function loadFrameLibrary(current,type){
            $scope.vm.paginationConf={
                currentPage: current,//当前页
                totalItems: 0, //总页数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8  //分页框数量
            };
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": $scope.vm.botSelectValue,
                "index":(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                if(data.data){
                    clearSelectAll();
                    $scope.vm.listData = data.data;
                    $scope.vm.paginationConf={
                        currentPage: current,//当前页
                        totalItems: data.total, //总页数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8  //分页框数量
                    };
                }else{
                    $scope.vm.listData="";
                }
                $scope.$apply();
            },function(err){
            });
        }
        //修改框架
        function editFrame(item){
            $scope.vm.frameTypeId=item.frameTypeId;
            $scope.vm.frameInfo=JSON.stringify(item);
            var frameInfo = eval('(' + $scope.vm.frameInfo + ')');
            //赋值
            assembleFrame();

            if($scope.vm.frameTypeId==10011){
                updateFaq();
            }
            if($scope.vm.frameTypeId==10012){
                updateConcept();
            }
            if($scope.vm.frameTypeId==10013){
                updateElement();
            }
        }
        //删除框架
        function deleteFrame(item){
            var frameId = item.frameId;
            layer.confirm('确认删除？', {
                btn: ['确认','取消'], //按钮
                shade: 0.3 //不显示遮罩
            }, function(){
                httpRequestPost("/api/ms/modeling/frame/delete",{
                    "frameId":frameId
                },function(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                },function(err){
                });
            }, function(){
            });
        }

        //批量导入
        function batchUpload(){
            var frameType = 10011;
            if($scope.vm.botSelectValue=="root"){
                layer.msg("请选择类目");
                return;
            }
            var dialog1 = ngDialog.openConfirm({
                template:"/static/businessModeling/frameSelectDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e==10011){
                        frameType=10011;
                        batchUploadFrame(frameType)
                    }else if(e==10012){
                        frameType=10012;
                        batchUploadFrame(frameType)
                    }else if(e==10013){
                        frameType=10013;
                        batchUploadFrame(frameType)
                    }
                }
            });
        }

        function batchUploadFrame(frameType){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadFrameLibrary(1,0);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/frame/batchAdd?applicationId='+categoryApplicationId+'&modifierId='+categoryModifierId+'&categoryId='+$scope.vm.botSelectValue+'&frameTypeId='+frameType);
                }, 100);
            }
        }

        function downloadTemplate(){
            var frameTemplate = "frame_faq_template.xlsx";
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/frameSelectDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e==10011){
                        frameTemplate="frame_faq_template.xlsx";
                        downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","",frameTemplate);
                    }else if(e==10012){
                        frameTemplate="frame_concept_template.xlsx";
                        downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","",frameTemplate);
                    }else if(e==10013){
                        frameTemplate="frame_element_template.xlsx";
                        downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","",frameTemplate);
                    }
                }
            });
        }

        function exportAll(){
            var frameType = 10011;
            if($scope.vm.botSelectValue=="root"){
                layer.msg("请选择类目");
                return;
            }
            var dialog1 = ngDialog.openConfirm({
                template:"/static/businessModeling/frameSelectDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e==10011){
                        frameType=10011;
                        exportAllDialog(frameType)
                    }else if(e==10012){
                        frameType=10012;
                        exportAllDialog(frameType)
                    }else if(e==10013){
                        frameType=10013;
                        exportAllDialog(frameType)
                    }
                }
            });
        }

        function exportAllDialog(frameType){
            httpRequestPost("/api/ms/modeling/frame/export",{
                "frameCategoryId": $scope.vm.botSelectValue,
                "frameTypeId": frameType
            },function(data){
                if(responseView(data)==true){
                    if(data.exportFileNameList.length>0){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            },function(err){
            });
        }

        function searchByFrameTitle(current,type){
            if(nullCheck($("#keyWords").val())==true){
                httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                    "frameCategoryId": $scope.vm.botSelectValue,
                    "frameTitle": "%"+$("#keyWords").val()+"%",
                    "index":(current-1)*$scope.vm.pageSize,
                    "pageSize": $scope.vm.pageSize
                },function(data){
                    if(data.data){
                        clearSelectAll();
                        $scope.vm.listData = data.data;
                        $scope.vm.paginationConf={
                            currentPage: current,//当前页
                            totalItems: data.total, //总页数
                            pageSize: $scope.vm.pageSize,//第页条目数
                            pagesLength: 8  //分页框数量
                        };
                    }else{
                        $scope.vm.listData="";
                    }
                    $scope.$apply();
                },function(err){
                });
            }
        }

        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if(nullCheck($("#keyWords").val())==true){
                    searchByFrameTitle(current,0);
                }else{
                    loadFrameLibrary(current,0);
                }
            }
        });
        //添加框架
        function addFrame(){
            if($scope.vm.botSelectValue=="root"){
                layer.msg("请选择类目");
                return;
            }
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/frameworkLibraryDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        $scope.vm.frameTypeId=$("#frameTypeId").val();
                        $scope.vm.frameTitle=$("#frameTitle").val();
                        if(lengthCheck($("#frameTitle").val(),0,50)==false){
                            $("#frameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return false;
                        }
                        if(isHtmlLabel($("#frameTitle").val())){
                            $("#frameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return false;
                        }
                        if(frameTitleRepeatCheck(0,"#frameAddErrorObj")==false){
                            return false;
                        }
                        if($scope.vm.frameTypeId==10011){
                            addFaq();
                        }
                        if($scope.vm.frameTypeId==10012){
                            addConcept();
                        }
                        if($scope.vm.frameTypeId==10013){
                            addElement();
                        }
                    }
                }
            });
            if(dialog){
                $timeout(function(){
                    $("#frameTitle").blur(function(){
                        $scope.vm.frameTypeId=$("#frameTypeId").val();
                        $scope.vm.frameTitle=$("#frameTitle").val();
                        if(lengthCheck($("#frameTitle").val(),0,50)==false){
                            $("#frameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                        }else if(isHtmlLabel($("#frameTitle").val())){
                            $("#frameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                        }else{
                            $("#frameAddErrorObj").html('');
                            frameTitleRepeatCheck(0,"#frameAddErrorObj");
                        }
                    });
                },100);
            }
        }

        /**
         * 框架标题重复判断
         * @param type 0:添加时 1:修改时
         * @param selector
         * @returns {boolean}
         */
        function frameTitleRepeatCheck(type,selector){
            var flag = false;
            var request = new Object();
            request.frameTitle=$scope.vm.frameTitle;
            request.frameTypeId=$scope.vm.frameTypeId;
            request.frameCategoryId=$scope.vm.botSelectValue;
            if(type==1){
                request.frameId=$scope.vm.frameId;
            }
            httpRequestPostAsync("/api/ms/modeling/frame/repeatcheck",request,function(data){
                if(data){
                    if(responseWithoutView(data)==true){
                        $(selector).html('');
                        flag = true;
                    }else{
                        if(data){
                            $(selector).html(data.info);
                        }
                    }
                }
            },function(err){
            });
            return flag;
        }
        //添加表达式
        function addFaq(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/faqNewFrame.html",
                width:"500px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        if(faqValidata(0)==true){
                            faqAssemble(0);
                            faqRequestAdd();
                        }else{
                            return false;
                        }
                    }
                }
            });
            if(dialog){
                $timeout(function(){
                    $("#faqFrameTitle").blur(function(){
                        $scope.vm.frameTitle=$("#faqFrameTitle").val();
                        if(lengthCheck($("#faqFrameTitle").val(),0,50)==false){
                            $("#faqFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return;
                        }
                        if(isHtmlLabel($("#faqFrameTitle").val())){
                            $("#faqFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return;
                        }
                        if(frameTitleRepeatCheck(0,"#faqFrameAddErrorObj")==false){
                            return;
                        }
                    });
                },100);
            }
        }
        //修改表达式
        function updateFaq(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/updateFaqFrame.html",
                width:"625px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        if(faqValidata(1)==true){
                            faqAssemble(1);
                            faqRequestUpdate();
                        }else{
                            return false;
                        }
                    }
                    loadFrameLibrary(1,0);
                }
            });
            if(dialog){
                $timeout(function () {
                    fillFaqUpdatePage();
                    $("#faqFrameTitle").blur(function(){
                        $scope.vm.frameTitle=$("#faqFrameTitle").val();
                        if(lengthCheck($("#faqFrameTitle").val(),0,50)==false){
                            $("#faqFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return;
                        }
                        if(isHtmlLabel($("#faqFrameTitle").val())){
                            $("#faqFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return;
                        }
                        if(frameTitleRepeatCheck(1,"#faqFrameAddErrorObj")==false){
                            return;
                        }
                    });
                    //单个删除元素
                    $("#faq_extension").on("click",'.del',function(){
                        if($(this).attr("element-id")==null){
                            return;
                        }
                        var obj = $(this).parent().parent();
                        var elementId=$(this).attr("element-id");
                        layer.confirm("删除以后不能恢复，确认删除？",{
                            btn:['确认','取消'],
                            shade:false
                        },function(index){
                            layer.close(index);
                            httpRequestPostAsync("/api/ms/modeling/frame/deleteelementbyid",{
                                "elementId":elementId
                            },function(data){
                                if (responseView(data)==true) {
                                    $(obj).remove();
                                }
                            },function(err){
                            });
                        },function(){
                        });
                    });
                }, 100);
            }
        }
        function fillFaqUpdatePage(){
            for(var i=0;i<$scope.vm.elementIdArray.length;i++){
                var html= '<div class="framework mb-10"><span class="framework_s text-r">扩展问题：</span><div class=""><input type="text" class="L input-text mr-10" element-id="'+$scope.vm.elementIdArray[i]+'" value="'+$scope.vm.elementContentArray[i]+'" style="width:300px;" disabled="disabled"><a element-id="'+$scope.vm.elementIdArray[i]+'" href="javascript:;" class="del"><img src="../../images/images/delete_img.png"></a></div></div>';
                $(".exten_problem").append(html);
            }
        }
        function fillConceptUpdatePage(){
            for(var i=0;i<$scope.vm.elementIdArray.length;i++){
                if($scope.vm.elementAttributeIdArray[i]==10025){
                    $("#concept_title").val($scope.vm.elementContentArray[i]);
                    $("#concept_title").attr("element-id",$scope.vm.elementIdArray[i]);
                }else{
                    var originStr = $scope.vm.elementContentArray[i];
                    var idx1 = originStr.indexOf($scope.vm.textAndTagSplit);
                    if(idx1<=0){
                        return;
                    }
                    var originalText = originStr.substring(0,idx1);
                    var tagStr = originStr.substring(idx1+1,originStr.length);
                    var tagArr = tagStr.split($scope.vm.conceptSplit);
                    var tagHtml = '<div class="tag_box">';
                    for(var j=0;j<tagArr.length;j++){
                        tagHtml+='<span class="tag_s">'+tagArr[j]+'</span>';
                    }
                    tagHtml+='</div>';
                    var html =  '<div class="framework mb-10" element-id="'+$scope.vm.elementIdArray[i]+'">'+
                        '   <span class="framework_s text-r mt-7">概念扩展：</span>' +
                        '   <div class="formControlsForConcept" element-id="'+$scope.vm.elementIdArray[i]+'">'+
                        '       <input type="hidden" value="'+originalText+'"/>'+
                        tagHtml+
                        '       <a href="javascript:;" element-id="'+$scope.vm.elementIdArray[i]+'" class="del del-button">'+
                        '           <img src="../../images/images/delete_img.png">'+
                        '       </a>'+
                        '   </div>'+
                        '</div>';
                    $("#concept_extension").append(html);

                }
            }
        }
        //表达式类型数据组装 0:新增 1:修改
        function faqAssemble(type){
            requestArrayReset();
            $.each($(".exten_problem").find("input").filter(":gt(0)"),function(index,value){
                $scope.vm.elementAskContentArray[index]=$scope.vm.defaultString;
                $scope.vm.elementAttributeIdArray[index]=10026;
                $scope.vm.elementContentArray[index]=$(value).val();
                $scope.vm.elementFrameIdArray[index]=$scope.vm.defaultString;
                $scope.vm.elementMiningTypeIdArray[index]=$scope.vm.defaultInt;
                $scope.vm.elementRelateConceptArray[index]=$scope.vm.defaultString;
                $scope.vm.elementTypeIdArray[index]=$scope.vm.defaultInt;
                if(type==1){
                    if($(value).attr("element-id")){
                        $scope.vm.elementIdArray[index]=$(value).attr("element-id");
                    }else{
                        $scope.vm.elementIdArray[index]=$scope.vm.defaultString;
                    }
                }
            });
        }
        //组装框架数据
        function assembleFrame(){
            requestArrayReset();
            var frameInfo = eval('(' + $scope.vm.frameInfo + ')');
            $scope.vm.frameId=frameInfo.frameId;
            $scope.vm.frameTypeId=frameInfo.frameTypeId;
            $scope.vm.frameTitle=frameInfo.frameTitle;
            $scope.vm.frameModifierId=frameInfo.frameModifierId;
            $scope.vm.frameCategoryId=frameInfo.frameCategoryId;
            $scope.vm.frameEnableStatusId=frameInfo.frameEnableStatusId;
            for(var i=0;i<frameInfo.elements.length;i++){
                $scope.vm.elementAskContentArray[i]=frameInfo.elements[i].elementAskContent;
                $scope.vm.elementAttributeIdArray[i]=frameInfo.elements[i].elementAttributeId;
                $scope.vm.elementContentArray[i]=frameInfo.elements[i].elementContent;
                $scope.vm.elementFrameIdArray[i]=frameInfo.elements[i].elementFrameId;
                $scope.vm.elementMiningTypeIdArray[i]=frameInfo.elements[i].elementMiningTypeId;
                $scope.vm.elementRelateConceptArray[i]=frameInfo.elements[i].elementRelateConcept;
                $scope.vm.elementTypeIdArray[i]=frameInfo.elements[i].elementTypeId;
                $scope.vm.elementIdArray[i]=frameInfo.elements[i].elementId;
            }
        }
        //表达式类型数据校验
        function faqValidata(type){
            //框架标题校验
            if(lengthCheck($scope.vm.frameTitle,0,50)==false){
                $("#faqFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                return false;
            }
            if(isHtmlLabel($scope.vm.frameTitle)){
                $("#faqFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                return false;
            }
            if(frameTitleRepeatCheck(type,"#faqFrameAddErrorObj")==false){
                return false;
            }
            //扩展问题校验
            var length = $(".exten_problem").find("input").filter(":gt(0)").length;
            if(length==0){
                $("#faqExtendQuestionErrorObj").html("至少应该有一个扩展问题");
                return false;
            }
            return true;
        }
        function faqRequestAdd(){
            httpRequestPost("/api/ms/modeling/frame/add",{
                "elementAskContentArray":$scope.vm.elementAskContentArray,
                "elementAttributeIdArray":$scope.vm.elementAttributeIdArray,
                "elementContentArray":$scope.vm.elementContentArray,
                "elementFrameIdArray":$scope.vm.elementFrameIdArray,
                "elementMiningTypeIdArray":$scope.vm.elementMiningTypeIdArray,
                "elementRelateConceptArray":$scope.vm.elementRelateConceptArray,
                "elementTypeIdArray":$scope.vm.elementTypeIdArray,
                "frameCategoryId":$scope.vm.botSelectValue,
                "frameEnableStatusId":$scope.vm.frameEnableStatusId,
                "frameModifierId":categoryModifierId,
                "frameTitle":$scope.vm.frameTitle,
                "frameTypeId":$scope.vm.frameTypeId
            },function(data){
                if(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                }
            },function(err){
            });
        }
        function faqRequestUpdate(){
            httpRequestPost("/api/ms/modeling/frame/update",{
                "elementAskContentArray":$scope.vm.elementAskContentArray,
                "elementAttributeIdArray":$scope.vm.elementAttributeIdArray,
                "elementContentArray":$scope.vm.elementContentArray,
                "elementFrameIdArray":$scope.vm.elementFrameIdArray,
                "elementMiningTypeIdArray":$scope.vm.elementMiningTypeIdArray,
                "elementRelateConceptArray":$scope.vm.elementRelateConceptArray,
                "elementTypeIdArray":$scope.vm.elementTypeIdArray,
                "elementIdArray":$scope.vm.elementIdArray,
                "frameCategoryId":$scope.vm.botSelectValue,
                "frameEnableStatusId":$scope.vm.frameEnableStatusId,
                "frameModifierId":categoryModifierId,
                "frameTitle":$scope.vm.frameTitle,
                "frameTypeId":$scope.vm.frameTypeId,
                "frameId":$scope.vm.frameId
            },function(data){
                if(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                }
            },function(err){
            });
        }
        //添加概念表达式
        function addConcept(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptNewFrame.html",
                width:"625px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        if(conceptValidate(0)==true){
                            conceptAssemble(0);
                            conceptRequestAdd();
                        }else{
                            return false;
                        }
                    }
                }
            });
            if(dialog){
                $timeout(function(){
                    $("#conceptFrameTitle").blur(function(){
                        $scope.vm.frameTitle=$("#conceptFrameTitle").val();
                        if(lengthCheck($("#conceptFrameTitle").val(),0,50)==false){
                            $("#conceptFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return;
                        }
                        if(isHtmlLabel($("#conceptFrameTitle").val())){
                            $("#conceptFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return;
                        }
                        if(frameTitleRepeatCheck(0,"#conceptFrameAddErrorObj")==false){
                            return;
                        }
                    });
                    $("#concept_title").blur(function(){
                        if(lengthCheck($("#concept_title").val(),0,50)==false){
                            $("#conceptTitleErrorObj").html("概念标题为空或超过长度限制50");
                        }else if(isHtmlLabel($("#concept_title").val())){
                            $("#conceptTitleErrorObj").html($scope.vm.notContainHtmlLabel);
                        }else{
                            $("#conceptTitleErrorObj").html('');
                        }
                    });
                },100);
            }
        }
        //概念框架验证 0:添加 1:修改
        function conceptValidate(type){
            //框架标题校验
            if(lengthCheck($scope.vm.frameTitle,0,50)==false){
                $("#conceptFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                return false;
            }
            if(isHtmlLabel($scope.vm.frameTitle)){
                $("#conceptFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                return false;
            }
            if(frameTitleRepeatCheck(type,"#conceptFrameAddErrorObj")==false){
                return false;
            }
            //扩展问题校验
            var length = $(".exten_problem").find("input").filter(":gt(0)").length;
            if(length==0){
                $("#conceptExtendQuestionErrorObj").html("至少应该有一个概念扩展");
                return false;
            }
            return true;
        }
        //组装概念数据 0:添加 1:修改
        function conceptAssemble(type){
            requestArrayReset();
            $.each($("#concept_extension").find(".formControlsForConcept").filter(":gt(0)"),function(index,value){
                var contentInfo = $(value).find("input").val()+$scope.vm.textAndTagSplit;
                $.each($(value).find("span"),function(index1,value1){
                    contentInfo+=$(value1).html()+$scope.vm.conceptSplit;
                });
                if(contentInfo.indexOf($scope.vm.conceptSplit)>0){
                    contentInfo=contentInfo.substring(0,contentInfo.length-1);
                }
                $scope.vm.elementAskContentArray[index]=$scope.vm.defaultString;
                $scope.vm.elementAttributeIdArray[index]=10026;
                $scope.vm.elementContentArray[index]=contentInfo;
                $scope.vm.elementFrameIdArray[index]=$scope.vm.defaultString;
                $scope.vm.elementMiningTypeIdArray[index]=$scope.vm.defaultInt;
                $scope.vm.elementRelateConceptArray[index]=$scope.vm.defaultString;
                $scope.vm.elementTypeIdArray[index]=$scope.vm.defaultInt;
                if(type==1){
                    if($(value).attr("element-id")){
                        $scope.vm.elementIdArray[index]=$(value).attr("element-id");
                    }else{
                        $scope.vm.elementIdArray[index]=$scope.vm.defaultString;
                    }
                }
            });
        }
        //概念添加请求
        function conceptRequestAdd(){
            httpRequestPost("/api/ms/modeling/frame/add",{
                "elementAskContentArray":$scope.vm.elementAskContentArray,
                "elementAttributeIdArray":$scope.vm.elementAttributeIdArray,
                "elementContentArray":$scope.vm.elementContentArray,
                "elementFrameIdArray":$scope.vm.elementFrameIdArray,
                "elementMiningTypeIdArray":$scope.vm.elementMiningTypeIdArray,
                "elementRelateConceptArray":$scope.vm.elementRelateConceptArray,
                "elementTypeIdArray":$scope.vm.elementTypeIdArray,
                "frameCategoryId":$scope.vm.botSelectValue,
                "frameEnableStatusId":$scope.vm.frameEnableStatusId,
                "frameModifierId":categoryModifierId,
                "frameTitle":$scope.vm.frameTitle,
                "frameTypeId":$scope.vm.frameTypeId
            },function(data){
                if(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                }
            },function(err){
            });
        }
        //修改概念表达式
        function updateConcept(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/updateConceptFrame.html",
                width:"625px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        if(conceptValidate(1)==true){
                            conceptAssemble(1);
                            conceptRequestUpdate();
                        }else{
                            return false;
                        }
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    fillConceptUpdatePage();
                    $("#conceptFrameTitle").blur(function(){
                        $scope.vm.frameTitle=$("#conceptFrameTitle").val();
                        if(lengthCheck($("#conceptFrameTitle").val(),0,50)==false){
                            $("#conceptFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return;
                        }
                        if(isHtmlLabel($("#conceptFrameTitle").val())){
                            $("#conceptFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return;
                        }
                        if(frameTitleRepeatCheck(1,"#conceptFrameAddErrorObj")==false){
                            return;
                        }
                    });
                    $("#concept_title").blur(function(){
                        if(lengthCheck($("#concept_title").val(),0,50)==false){
                            $("#conceptTitleErrorObj").html("概念标题为空或超过长度限制50");
                        }else if(isHtmlLabel($("#concept_title").val())){
                            $("#conceptTitleErrorObj").html($scope.vm.notContainHtmlLabel);
                        }else{
                            $("#conceptTitleErrorObj").html('');
                        }
                    });
                    //单个删除元素
                    $("#concept_extension").on("click",'.del',function(){
                        if($(this).attr("element-id")==null){
                            return;
                        }
                        var obj = $(this).parent().parent();
                        var elementId=$(this).attr("element-id");
                        layer.confirm("删除以后不能恢复，确认删除？",{
                            btn:['确认','取消'],
                            shade:false
                        },function(){
                            httpRequestPost("/api/ms/modeling/frame/deleteelementbyid",{
                                "elementId":elementId
                            },function(data){
                                if (responseView(data)==true) {
                                    $(obj).remove();
                                }
                            },function(err){
                            });
                        },function(){
                        });
                    });
                }, 100);
            }
        }
        //概念添加请求
        function conceptRequestUpdate(){
            httpRequestPost("/api/ms/modeling/frame/update",{
                "elementAskContentArray":$scope.vm.elementAskContentArray,
                "elementAttributeIdArray":$scope.vm.elementAttributeIdArray,
                "elementContentArray":$scope.vm.elementContentArray,
                "elementFrameIdArray":$scope.vm.elementFrameIdArray,
                "elementMiningTypeIdArray":$scope.vm.elementMiningTypeIdArray,
                "elementRelateConceptArray":$scope.vm.elementRelateConceptArray,
                "elementTypeIdArray":$scope.vm.elementTypeIdArray,
                "elementIdArray":$scope.vm.elementIdArray,
                "frameCategoryId":$scope.vm.botSelectValue,
                "frameEnableStatusId":$scope.vm.frameEnableStatusId,
                "frameModifierId":categoryModifierId,
                "frameTitle":$scope.vm.frameTitle,
                "frameTypeId":$scope.vm.frameTypeId,
                "frameId":$scope.vm.frameId
            },function(data){
                if(responseView(data)==true){
                    loadFrameLibrary(1,0);
                }
            },function(err){
            });
        }
        //添加要素
        function addElement(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/factorNewFrame.html",
                width:"800px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        if(elementValidate(0)==true){
                            elementAssemble(0);
                            elementRequestAdd();
                        }else{
                            return false;
                        }
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    //选择全部
                    $("#selectAll").click(function(){
                        if($(this).prop("checked")==true){
                            $.each($("#add-item").find(".sid"),function(index,value){
                                $(value).prop("checked",true);
                            });
                        }else{
                            $.each($("#add-item").find(".sid"),function(index,value){
                                $(value).prop("checked",false);
                            });
                        }
                    });
                    $("#elementFrameTitle").blur(function(){
                        $scope.vm.frameTitle=$("#elementFrameTitle").val();
                        if(lengthCheck($("#elementFrameTitle").val(),0,50)==false){
                            $("#elementFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return;
                        }
                        if(isHtmlLabel($("#elementFrameTitle").val())){
                            $("#elementFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return;
                        }
                        if(frameTitleRepeatCheck(0,"#elementFrameAddErrorObj")==false){
                            return;
                        }
                    });
                    $("#ele-name-tr").mouseenter(function(){
                        $("#ele-name-error").attr("style","display:none;");
                        $("#ele-name-error").html('');
                    });
                    $("#ele-asked-tr").mouseenter(function(){
                        $("#ele-asked-error").attr("style","display:none;");
                        $("#ele-asked-error").html('');
                    });
                    $("#ele-concept-tr").mouseenter(function(){
                        $("#ele-concept-error").attr("style","display:none;");
                        $("#ele-concept-error").html('');
                    });
                    $(".ele-name").blur(function(){
                        if(lengthCheck($(".ele-name").val(),0,50)==false){
                            $("#ele-name-error").html('要素名称不能为空或超过长度限制50');
                            $("#ele-name-error").attr("style","display:inline-block;left: 10px;z-index:9999");
                            return;
                        }else if(isHtmlLabel($(".ele-name").val())){
                            $("#ele-name-error").html($scope.vm.notContainHtmlLabel);
                            $("#ele-name-error").attr("style","display:inline-block;left: 10px;z-index;");
                            return;
                        }else{
                            $("#ele-name-error").html('');
                            $("#ele-name-error").attr("style","display:none;");
                        }
                        $.each($("#add-item").find("tr"),function(index,value){
                            if($(".ele-name").val()==$(value).find(".ele-name-add").val()){
                                $("#ele-name-error").html('要素名称不能与已有要素名称重复');
                                $("#ele-name-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                                return true;
                            }else{
                                $("#ele-name-error").html('');
                                $("#ele-name-error").attr("style","display:none;");
                            }
                        });
                    });
                    $(".ele-asked").blur(function(){
                        if(lengthCheck($(".ele-asked").val(),0,255)==false){
                            $("#ele-asked-error").html('反问不能为空或超过长度限制255');
                            $("#ele-asked-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                            return;
                        }else if(isHtmlLabel($(".ele-asked").val())){
                            $("#ele-asked-error").html($scope.vm.notContainHtmlLabel);
                            $("#ele-asked-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                            return;
                        }else{
                            $("#ele-asked-error").html('');
                            $("#ele-asked-error").attr("style","display:none;");
                        }
                        $.each($("#add-item").find("tr"),function(index,value){
                            if($(".ele-asked").val()==$(value).find(".ele-asked-add").val()){
                                $("#ele-asked-error").html('反问不能与已有反问重复');
                                $("#ele-asked-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                                return true;
                            }else{
                                $("#ele-asked-error").html('');
                                $("#ele-asked-error").attr("style","display:none;");
                            }
                        });
                    });
                    $(".ele-concept").blur(function(){
                        var relateConceptIds = $(".ele-concept").attr("data-option");
                        var relateConceptVals = $(".ele-concept").val();
                        relateConceptVals=relateConceptVals.substring(0,relateConceptVals.length-1);
                        var sumConceptStr = relateConceptIds+$scope.vm.textAndTagSplit+relateConceptVals;
                        if(lengthCheck(sumConceptStr,0,255)==false){
                            $("#ele-concept-error").html('相关概念不能为空或超过长度限制');
                            $("#ele-concept-error").attr("style","display:inline-block;left: 10px;");
                            return;
                        }else{
                            $("#ele-concept-error").html('');
                            $("#ele-concept-error").attr("style","display:none;");
                        }
                        if(relateConceptVals==null){
                            return;
                        }
                        if(relateConceptVals==""){
                            return;
                        }
                        if(relateConceptIds==null){
                            return;
                        }
                        if(relateConceptIds==""){
                            return;
                        }
                    });
                    var keyword = "";
                    var keywordarr = $("#ele-concept-autocomplete").val().split(",");
                    keyword = keywordarr[keywordarr.length];
                    var conceptParams = {
                        "conceptKeyword":keyword,
                        "applicationId":categoryApplicationId
                    };
                    $scope.vm.relateConcept = new HashMap();
                    $("#ele-concept-autocomplete").on("keydown",function(event) {
                        if ( event.keyCode === 9 &&
                            $(this).autocomplete("instance").menu.active ) {
                            event.preventDefault();
                        }
                    }).autocomplete({
                        serviceUrl: "/api/ms/modeling/frame/searchconceptbykeyword",
                        type:'POST',
                        params:conceptParams,
                        paramName:'conceptKeyword',
                        dataType:'json',
                        delimiter:",",
                        transformResult:function(data){
                            var result = new Object();
                            var array = [];
                            if(data.data){
                                for(var i=0;i<data.data.length;i++){
                                    array[i]={
                                        data:data.data[i].id,
                                        value:data.data[i].name
                                    }
                                }
                            }
                            result.suggestions = array;
                            return result;
                        },
                        onSelect: function(suggestion) {
                            $scope.vm.relateConcept.put(suggestion.value,suggestion.data);
                            var selectConceptValue = "";
                            if($("#ele-concept-autocomplete").val()!=suggestion.value){
                                var terms = splitAuto($("#ele-concept-autocomplete").val());
                                for(var i=0;i<terms.length;i++){
                                    if(terms[i]==suggestion.value){
                                        //如果重复不添加
                                        continue;
                                    }else{
                                        selectConceptValue+=terms[i]+",";
                                    }
                                }
                            }
                            if(selectConceptValue==""){
                                $("#ele-concept-autocomplete").val(suggestion.value+",");
                            }else{
                                $("#ele-concept-autocomplete").val(selectConceptValue+suggestion.value+",");
                            }
                            var selectConceptId = "";
                            var selectedTerms = splitAuto($("#ele-concept-autocomplete").val());
                            for(var i=0;i<selectedTerms.length;i++){
                                if($scope.vm.relateConcept.get(selectedTerms[i])!=null){
                                    selectConceptId+=$scope.vm.relateConcept.get(selectedTerms[i])+$scope.vm.conceptSplit;
                                }
                            }
                            selectConceptId=selectConceptId.substring(0,selectConceptId.length-1);
                            $("#ele-concept-autocomplete").attr("data-option",selectConceptId);
                        },
                        onSearchStart:function(){
                            var selectConceptId = "";
                            var selectedTerms = splitAuto($("#ele-concept-autocomplete").val());
                            for(var i=0;i<selectedTerms.length;i++){
                                if($scope.vm.relateConcept.get(selectedTerms[i])!=null){
                                    selectConceptId+=$scope.vm.relateConcept.get(selectedTerms[i])+$scope.vm.conceptSplit;
                                }
                            }
                            selectConceptId=selectConceptId.substring(0,selectConceptId.length-1);
                            $("#ele-concept-autocomplete").attr("data-option",selectConceptId);
                        }
                    });
                }, 100);
            }
        }
        //元素类型验证
        function elementValidate(type){
            $scope.vm.frameTitle=$("#elementFrameTitle").val();
            if(lengthCheck($("#elementFrameTitle").val(),0,50)==false){
                $("#elementFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                return false;
            }
            if(isHtmlLabel($("#elementFrameTitle").val())){
                $("#elementFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                return false;
            }
            if(frameTitleRepeatCheck(type,"#elementFrameAddErrorObj")==false){
                return false;
            }
            var length = $("#add-item").find("tr").length;
            if(length==0){
                $("#elementNumberErr").html("至少应该有一个要素");
                return false;
            }else{
                $("#elementNumberErr").html('');
            }
            return true;
        }
        //元素类型数据组装
        function elementAssemble(type){
            requestArrayReset();
            $.each($("#add-item").find("tr"),function(index,value){
                $scope.vm.elementAskContentArray[index]=$(value).find(".ele-asked-add").val();
                $scope.vm.elementAttributeIdArray[index]=$scope.vm.defaultInt;
                $scope.vm.elementContentArray[index]=$(value).find(".ele-name-add").val();
                $scope.vm.elementFrameIdArray[index]=$scope.vm.defaultString;
                $scope.vm.elementMiningTypeIdArray[index]=$(value).find(".mining-type-add").val();
                if($(value).find(".ele-concept-add").attr("data-option")==""){
                    $scope.vm.elementRelateConceptArray[index]=$scope.vm.defaultString;
                }else{
                    $scope.vm.elementRelateConceptArray[index]=$(value).find(".ele-concept-add").attr("data-option");
                }
                $scope.vm.elementTypeIdArray[index]=$(value).find(".ele-type-add").val();
                if(type==1){
                    if($(value).attr("element-id")){
                        $scope.vm.elementIdArray[index]=$(value).attr("element-id");
                    }else{
                        $scope.vm.elementIdArray[index]=$scope.vm.defaultString;
                    }
                }
            });
        }
        //元素类型添加请求
        function elementRequestAdd(){
            httpRequestPost("/api/ms/modeling/frame/add",{
                "elementAskContentArray":$scope.vm.elementAskContentArray,
                "elementAttributeIdArray":$scope.vm.elementAttributeIdArray,
                "elementContentArray":$scope.vm.elementContentArray,
                "elementFrameIdArray":$scope.vm.elementFrameIdArray,
                "elementMiningTypeIdArray":$scope.vm.elementMiningTypeIdArray,
                "elementRelateConceptArray":$scope.vm.elementRelateConceptArray,
                "elementTypeIdArray":$scope.vm.elementTypeIdArray,
                "frameCategoryId":$scope.vm.botSelectValue,
                "frameEnableStatusId":$scope.vm.frameEnableStatusId,
                "frameModifierId":categoryModifierId,
                "frameTitle":$scope.vm.frameTitle,
                "frameTypeId":$scope.vm.frameTypeId
            },function(data){
                if(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                }
            },function(err){
            });
        }
        //元素类型修改请求
        function elementRequestUpdate(){
            httpRequestPost("/api/ms/modeling/frame/update",{
                "elementAskContentArray":$scope.vm.elementAskContentArray,
                "elementAttributeIdArray":$scope.vm.elementAttributeIdArray,
                "elementContentArray":$scope.vm.elementContentArray,
                "elementFrameIdArray":$scope.vm.elementFrameIdArray,
                "elementMiningTypeIdArray":$scope.vm.elementMiningTypeIdArray,
                "elementRelateConceptArray":$scope.vm.elementRelateConceptArray,
                "elementTypeIdArray":$scope.vm.elementTypeIdArray,
                "elementIdArray":$scope.vm.elementIdArray,
                "frameCategoryId":$scope.vm.botSelectValue,
                "frameEnableStatusId":$scope.vm.frameEnableStatusId,
                "frameModifierId":categoryModifierId,
                "frameTitle":$scope.vm.frameTitle,
                "frameTypeId":$scope.vm.frameTypeId,
                "frameId":$scope.vm.frameId
            },function(data){
                if(data){
                    if(responseView(data)==true){
                        loadFrameLibrary(1,0);
                    }
                }
            },function(err){
            });
        }
        //修改要素
        function updateElement(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/updateFactorFrame.html",
                width:"840px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        if(elementValidate(1)==true){
                            elementAssemble(1);
                            elementRequestUpdate();
                        }
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    fillElementUpdatePage();
                    //选择全部
                    $("#selectAll").click(function(){
                        if($(this).prop("checked")==true){
                            $.each($("#add-item").find(".sid"),function(index,value){
                                $(value).prop("checked",true);
                            });
                        }else{
                            $.each($("#add-item").find(".sid"),function(index,value){
                                $(value).prop("checked",false);
                            });
                        }
                    });
                    $("#elementFrameTitle").blur(function(){
                        $scope.vm.frameTitle=$("#elementFrameTitle").val();
                        if(lengthCheck($("#elementFrameTitle").val(),0,50)==false){
                            $("#elementFrameAddErrorObj").html($scope.vm.frameTitleNullErrorInfo);
                            return;
                        }
                        if(isHtmlLabel($("#elementFrameTitle").val())){
                            $("#elementFrameAddErrorObj").html($scope.vm.notContainHtmlLabel);
                            return;
                        }
                        if(frameTitleRepeatCheck(1,"#elementFrameAddErrorObj")==false){
                            return;
                        }
                    });
                    $("#ele-name-tr").mouseenter(function(){
                        $("#ele-name-error").attr("style","display:none;");
                        $("#ele-name-error").html('');
                    });
                    $("#ele-asked-tr").mouseenter(function(){
                        $("#ele-asked-error").attr("style","display:none;");
                        $("#ele-asked-error").html('');
                    });
                    $("#ele-concept-tr").mouseenter(function(){
                        $("#ele-concept-error").attr("style","display:none;");
                        $("#ele-concept-error").html('');
                    });
                    $(".ele-name").blur(function(){
                        if(lengthCheck($(".ele-name").val(),0,50)==false){
                            $("#ele-name-error").html('要素名称不能为空或超过长度限制50');
                            $("#ele-name-error").attr("style","display:inline-block;left: 10px;top:30px;z-index:9999;");
                            return;
                        }else if(isHtmlLabel($(".ele-name").val())){
                            $("#ele-name-error").html($scope.vm.notContainHtmlLabel);
                            $("#ele-name-error").attr("style","display:inline-block;left: 10px;top:30px;z-index:9999;");
                            return;
                        }else{
                            $("#ele-name-error").html('');
                            $("#ele-name-error").attr("style","display:none;");
                        }
                        $.each($("#add-item").find("tr"),function(index,value){
                            if($(".ele-name").val()==$(value).find(".ele-name-add").val()){
                                $("#ele-name-error").html('要素名称不能与已有要素名称重复');
                                $("#ele-name-error").attr("style","display:inline-block;left: 10px;top:30px;z-index:9999;");
                                return true;
                            }else{
                                $("#ele-name-error").html('');
                                $("#ele-name-error").attr("style","display:none;");
                            }
                        });
                    });
                    $(".ele-asked").blur(function(){
                        if(lengthCheck($(".ele-asked").val(),0,255)==false){
                            $("#ele-asked-error").html('反问不能为空或超过长度限制255');
                            $("#ele-asked-error").attr("style","display:inline-block;left: 10px;top:30px;z-index:9999");
                            return;
                        }else if(isHtmlLabel($(".ele-asked").val())){
                            $("#ele-asked-error").html($scope.vm.notContainHtmlLabel);
                            $("#ele-asked-error").attr("style","display:inline-block;left: 10px;top:30px;z-index:9999");
                            return;
                        }else{
                            $("#ele-asked-error").html('');
                            $("#ele-asked-error").attr("style","display:none;");
                        }
                        $.each($("#add-item").find("tr"),function(index,value){
                            if($(".ele-asked").val()==$(value).find(".ele-asked-add").val()){
                                $("#ele-asked-error").html('反问不能与已有反问重复');
                                $("#ele-asked-error").attr("style","display:inline-block;left: 10px;top:30px;z-index:9999;");
                                return true;
                            }else{
                                $("#ele-asked-error").html('');
                                $("#ele-asked-error").attr("style","display:none;");
                            }
                        });
                    });
                    $(".ele-concept").blur(function(){
                        var relateConceptIds = $(".ele-concept").attr("data-option");
                        var relateConceptVals = $(".ele-concept").val();
                        relateConceptVals=relateConceptVals.substring(0,relateConceptVals.length-1);
                        var sumConceptStr = relateConceptIds+$scope.vm.textAndTagSplit+relateConceptVals;
                        if(lengthCheck(sumConceptStr,0,255)==false){
                            $("#ele-concept-error").html('相关概念不能为空或超过长度限制');
                            $("#ele-concept-error").attr("style","display:inline-block;left: 710px;");
                            return;
                        }else{
                            $("#ele-concept-error").html('');
                            $("#ele-concept-error").attr("style","display:none;");
                        }
                        if(relateConceptVals==null){
                            return;
                        }
                        if(relateConceptVals==""){
                            return;
                        }
                        if(relateConceptIds==null){
                            return;
                        }
                        if(relateConceptIds==""){
                            return;
                        }
                    });
                    var keyword = "";
                    var keywordarr = $("#ele-concept-autocomplete").val().split(",");
                    keyword = keywordarr[keywordarr.length];
                    var conceptParams = {
                        "conceptKeyword":keyword,
                        "applicationId":categoryApplicationId
                    };
                    $scope.vm.relateConcept = new HashMap();
                    $("#ele-concept-autocomplete").on("keydown",function(event) {
                        if ( event.keyCode === 9 &&
                            $(this).autocomplete("instance").menu.active ) {
                            event.preventDefault();
                        }
                    }).autocomplete({
                        serviceUrl: "/api/ms/modeling/frame/searchconceptbykeyword",
                        type:'POST',
                        params:conceptParams,
                        paramName:'conceptKeyword',
                        dataType:'json',
                        delimiter:",",
                        transformResult:function(data){
                            var result = new Object();
                            var array = [];
                            if(data.data){
                                for(var i=0;i<data.data.length;i++){
                                    array[i]={
                                        data:data.data[i].id,
                                        value:data.data[i].name
                                    }
                                }
                            }
                            result.suggestions = array;
                            return result;
                        },
                        onSelect: function(suggestion) {
                            $scope.vm.relateConcept.put(suggestion.value,suggestion.data);
                            var selectConceptValue = "";
                            if($("#ele-concept-autocomplete").val()!=suggestion.value){
                                var terms = splitAuto($("#ele-concept-autocomplete").val());
                                for(var i=0;i<terms.length;i++){
                                    if(terms[i]==suggestion.value){
                                        //如果重复不添加
                                        continue;
                                    }else{
                                        selectConceptValue+=terms[i]+",";
                                    }
                                }
                            }
                            if(selectConceptValue==""){
                                $("#ele-concept-autocomplete").val(suggestion.value+",");
                            }else{
                                $("#ele-concept-autocomplete").val(selectConceptValue+suggestion.value+",");
                            }
                            var selectConceptId = "";
                            var selectedTerms = splitAuto($("#ele-concept-autocomplete").val());
                            for(var i=0;i<selectedTerms.length;i++){
                                if($scope.vm.relateConcept.get(selectedTerms[i])!=null){
                                    selectConceptId+=$scope.vm.relateConcept.get(selectedTerms[i])+$scope.vm.conceptSplit;
                                }
                            }
                            selectConceptId=selectConceptId.substring(0,selectConceptId.length-1);
                            $("#ele-concept-autocomplete").attr("data-option",selectConceptId);
                        },
                        onSearchStart:function(){
                            var selectConceptId = "";
                            var selectedTerms = splitAuto($("#ele-concept-autocomplete").val());
                            for(var i=0;i<selectedTerms.length;i++){
                                if($scope.vm.relateConcept.get(selectedTerms[i])!=null){
                                    selectConceptId+=$scope.vm.relateConcept.get(selectedTerms[i])+$scope.vm.conceptSplit;
                                }
                            }
                            selectConceptId=selectConceptId.substring(0,selectConceptId.length-1);
                            $("#ele-concept-autocomplete").attr("data-option",selectConceptId);
                        }
                    });
                }, 100);
            }
        }
        //填充元素修改页面
        function fillElementUpdatePage(){
            for(var i=0;i<$scope.vm.elementIdArray.length;i++){
                var originStr = $scope.vm.elementRelateConceptArray[i];
                var conceptValue = "";
                var idx1 = originStr.indexOf($scope.vm.textAndTagSplit);
                if(idx1>=0){
                    var conceptValueArr = originStr.split($scope.vm.conceptSplit);

                    for(var j=0;j<conceptValueArr.length;j++){
                        httpRequestPostAsync("/api/ms/modeling/frame/searchconceptbyid",{
                            "conceptId":conceptValueArr[j]
                        },function(data){
                            if(data.status==10000){
                                conceptValue+=data.conceptWithWeight.name+",";
                            }
                        },function(err){
                        });
                    }
                    conceptValue=conceptValue.substring(0,conceptValue.length-1);
                }

                var html =  '<tr element-id="'+$scope.vm.elementIdArray[i]+'">'+
                    '   <td><input type="checkbox" class="sid"/></td>'+
                    '   <td><input type="text" style="width: 200px;" class="input_text ele-name-add" disabled="disabled" value="'+$scope.vm.elementContentArray[i]+'"/></td>'+
                    '   <td>'+
                    '       <select class="ele-type-add bd">'+
                    '           <option value=10014>字符串</option>'+
                    '           <option value=10015>数字</option>'+
                    '           <option value=10016>范围</option>'+
                    '       </select>'+
                    '   </td>'+
                    '   <td>'+
                    '       <select class="mining-type-add bd" disabled="disabled">'+
                    '           <option value=10017>NLP</option>'+
                        /*'           <option value=10017>OEC</option>'+
                         '           <option value=10018>GATE</option>'+*/
                    '       </select>'+
                    '   </td>'+
                    '   <td><input style="width: 200px;" type="text" class="input_text ele-asked-add" value="'+$scope.vm.elementAskContentArray[i]+'" disabled="disabled"/></td>'+
                    '   <td><input style="width: 180px;" type="text" class="input_text ele-concept-add" placeholder="从概念库中选择" value="'+conceptValue+'" data-option="'+originStr+'" disabled="disabled"/></td>'+
                    '</tr>';
                $("#add-item").append(html);

                $("#add-item").find("tr").filter(":eq("+i+")").find(".ele-type-add").val($scope.vm.elementTypeIdArray[i]);
                $("#add-item").find("tr").filter(":eq("+i+")").find(".mining-type-add").val($scope.vm.elementMiningTypeIdArray[i]);
            }
        }
        //返回状态显示
        function responseView(data){
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                return true;
            }
            return false;
        }
        //返回状态显示
        function responseWithoutView(data){
            if(data==null){
                return false;
            }
            if(data.status==$scope.vm.success){
                return true;
            }
            return false;
        }
        //开关
        function turnOn(targetValue,targetName){
            $scope.vm[targetName] = targetValue ? 0 : 1 ;
        }
        //概念打标
        function concept_marking(){
            $.each($(".exten_problem").find("input").filter(":eq(0)"),function(index,value){
                if(lengthCheck($(value).val(),0,255)==false){
                    $("#conceptExtendQuestionErrorObj").html("概念扩展不能为空或长度超过255");
                    return true;
                }
                if(isHtmlLabel($(value).val())){
                    $("#conceptExtendQuestionErrorObj").html($scope.vm.notContainHtmlLabel);
                    return true;
                }
                if($(value).val()==$("#concept_title").val()){
                    $("#conceptExtendQuestionErrorObj").html("概念标题不能与概念扩展重复");
                    return true;
                }
                var flag = false;
                $.each($(".exten_problem").find("input").filter(":gt(0)"),function(index1,value1){
                    if($(value).val()==$(value1).val()){
                        $("#conceptExtendQuestionErrorObj").html("不能与已有概念扩展重复");
                        flag = true;
                        return true;
                    }
                });
                if(flag){
                    return true;
                }
                $("#conceptExtendQuestionErrorObj").html('');
                var arr = [];
                arr[0]=$(value).val();
                httpRequestPost("/api/ms/modeling/frame/batchtag",{
                    "extendQuestionList":arr,
                    "applicationId":categoryApplicationId
                },function(data){
                    if(data){
                        if(data.status==200){
                            if(data.data.length>0){
                                if(data.data[0]!=null){
                                    appendTag(data.data[0],$(value).val());

                                }
                            }
                        }
                    }
                    $.each($(".exten_problem").find("input").filter(":eq(0)"),function(index,value){
                        $(value).val('');
                    });
                },function(err){
                    $("#conceptExtendQuestionErrorObj").html("打标失败，请正确发布节点后再进行打标操作!");
                });
            });
        }
        function appendTag(data,originStr){
            var tagHtml = '<div class="tag_box">';
            for(var i=0;i<data.length;i++){
                for(var j=0;j<data[i].tagList.length;j++){
                    tagHtml+='<span class="tag_s">'+data[i].tagList[j]+'</span>';
                }
            }
            tagHtml+='</div>';
            var html =  '<div class="framework mb-10">'+
                '   <span class="framework_s mt-7">概念扩展：</span>' +
                '   <div class="formControlsForConcept">'+
                '       <input type="hidden" value="'+originStr+'"/>'+
                tagHtml+
                '       <a href="javascript:;" class="del-button" onclick="rem_ques(this);">'+
                '           <img src="../../images/images/delete_img.png">'+
                '       </a>'+
                '   </div>'+
                '</div>';
            $("#concept_extension").append(html);
            $('.extended_query_txt').val('');                   //2017 nnf 添加；
        }
        //添加表格子元素
        function addEle(){
            var eleName = $(".ele-name").val();
            if(lengthCheck(eleName,0,50)==false){
                $("#ele-name-error").html('要素名称不能为空或超过长度限制50');
                $("#ele-name-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                return;
            }else if(isHtmlLabel(eleName)){
                $("#ele-name-error").html($scope.vm.notContainHtmlLabel);
                $("#ele-name-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                return;
            }else{
                $("#ele-name-error").html('');
                $("#ele-name-error").attr("style","display:none;");
            }
            var flag1 = false;
            $.each($("#add-item").find("tr"),function(index,value){
                if(eleName==$(value).find(".ele-name-add").val()){
                    $("#ele-name-error").html('要素名称不能与已有要素名称重复');
                    $("#ele-name-error").attr("style","display:inline-block;left: 10px;z-index:9999");
                    flag1 = true;
                }
            });
            if(flag1==true){
                return;
            }
            $("#ele-name-error").html('');
            $("#ele-name-error").attr("style","display:none;");
            var eleType = $(".ele-type").val();
            var miningType = $(".mining-type").val();
            var eleAsked = $(".ele-asked").val();
            if(lengthCheck(eleAsked,0,255)==false){
                $("#ele-asked-error").html('反问不能为空或超过长度限制255');
                $("#ele-asked-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                return;
            }else if(isHtmlLabel(eleAsked)){
                $("#ele-asked-error").html($scope.vm.notContainHtmlLabel);
                $("#ele-asked-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                return;
            }else{
                $("#ele-asked-error").html('');
                $("#ele-asked-error").attr("style","display:none;");
            }
            var flag2 = false;
            $.each($("#add-item").find("tr"),function(index,value){
                if(eleAsked==$(value).find(".ele-asked-add").val()){
                    $("#ele-asked-error").html('反问不能与已有反问重复');
                    $("#ele-asked-error").attr("style","display:inline-block;left: 10px;z-index:9999;");
                    flag2 = true;
                }
            });
            if(flag2==true){
                return;
            }
            $("#ele-asked-error").html('');
            $("#ele-asked-error").attr("style","display:none;");
            var relateConceptIds = "";
            var relateConceptVals = "";
            if($(".ele-concept").attr("data-option")==undefined || $(".ele-concept").attr("data-option")==""){

            }else{
                relateConceptIds = $(".ele-concept").attr("data-option");
                relateConceptVals = $(".ele-concept").val();
                relateConceptVals=relateConceptVals.substring(0,relateConceptVals.length-1);
                var sumConceptStr = relateConceptIds+$scope.vm.textAndTagSplit+relateConceptVals;
                if(lengthCheck(sumConceptStr,0,255)==false){
                    $("#ele-concept-error").html('相关概念不能为空或超过长度限制');
                    $("#ele-concept-error").attr("style","display:inline-block;left: 10px;");
                    return;
                }else{
                    $("#ele-concept-error").html('');
                    $("#ele-concept-error").attr("style","display:none;");
                }
                if(relateConceptVals==null){
                    return;
                }
                if(relateConceptVals==""){
                    return;
                }
                if(relateConceptIds==null){
                    return;
                }
                if(relateConceptIds==""){
                    return;
                }
            }

            var html =  '<tr>'+
                '   <td><input type="checkbox" class="sid"/></td>'+
                '   <td class="pr"><input type="text" style="width: 200px;" class="input_text ele-name-add" placeholder="地区" value="'+eleName+'" disabled="disabled"/></td>'+
                '   <td>'+
                '       <select class="ele-type-add bd">'+
                '           <option value=10014>字符串</option>'+
                '           <option value=10015>数字</option>'+
                '           <option value=10016>范围</option>'+
                '       </select>'+
                '   </td>'+
                '   <td>'+
                '       <select class="mining-type-add bd" disabled="disabled">'+
                '           <option value=10017>NLP</option>'+
                    /*'           <option value=10017>OEC</option>'+
                     '           <option value=10018>GATE</option>'+*/
                '       </select>'+
                '   </td>'+
                '   <td class="pr"><input type="text" style="width: 200px;" class="input_text ele-asked-add" placeholder="" value="'+eleAsked+'" disabled="disabled"/></td>'+
                '   <td class="pr"><input type="text" style="width: 180px;" class="input_text ele-concept-add" placeholder="从概念库中选择" value="'+relateConceptVals+'" data-option="'+relateConceptIds+'" disabled="disabled"/></td>'+
                '</tr>';
            $("#add-item").prepend(html);

            $("#add-item").find("tr").filter(":eq(0)").find(".ele-type-add").val(eleType);
            $("#add-item").find("tr").filter(":eq(0)").find(".mining-type-add").val(miningType);
            //clear
            $(".ele-name").val("");
            $(".ele-type").val(10014);
            $(".mining-type").val(10017);
            $(".ele-asked").val("");
            $(".ele-concept").attr("data-option","");
            $(".ele-concept").val("");
        }
        //删除表格子元素
        function delEle(){
                layer.confirm("确认删除？", {
                    btn: ['确认', '取消'],
                    shade: false
                }, function (index) {
                    layer.close(index);
                    $.each($("#add-item").find(".sid"), function (index, value) {
                        if ($(value).prop("checked") == true) {
                            if ($(value).parent().parent().attr("element-id") != null) {
                                httpRequestPostAsync("/api/ms/modeling/frame/deleteelementbyid", {
                                    "elementId": $(value).parent().parent().attr("element-id")
                                }, function (data) {
                                    if (responseView(data) == true) {
                                        loadFrameLibrary(1, 0);

                                    }
                                }, function (err) {
                                });
                            }
                            $(value).parent().parent().remove();
                        }
                    });
                }, function () {
                });
            }
        function splitAuto(val) {
            return val.split(",");
        }
        function HashMap(){
            //定义长度
            var length = 0;
            //创建一个对象
            var obj = new Object();

            /**
             * 判断Map是否为空
             */
            this.isEmpty = function(){
                return length == 0;
            };

            /**
             * 判断对象中是否包含给定Key
             */
            this.containsKey=function(key){
                return (key in obj);
            };

            /**
             * 判断对象中是否包含给定的Value
             */
            this.containsValue=function(value){
                for(var key in obj){
                    if(obj[key] == value){
                        return true;
                    }
                }
                return false;
            };

            /**
             *向map中添加数据
             */
            this.put=function(key,value){
                if(!this.containsKey(key)){
                    length++;
                }
                obj[key] = value;
            };

            /**
             * 根据给定的Key获得Value
             */
            this.get=function(key){
                return this.containsKey(key)?obj[key]:null;
            };

            /**
             * 根据给定的Key删除一个值
             */
            this.remove=function(key){
                if(this.containsKey(key)&&(delete obj[key])){
                    length--;
                }
            };

            /**
             * 获得Map中的所有Value
             */
            this.values=function(){
                var _values= new Array();
                for(var key in obj){
                    _values.push(obj[key]);
                }
                return _values;
            };

            /**
             * 获得Map中的所有Key
             */
            this.keySet=function(){
                var _keys = new Array();
                for(var key in obj){
                    _keys.push(key);
                }
                return _keys;
            };

            /**
             * 获得Map的长度
             */
            this.size = function(){
                return length;
            };

            /**
             * 清空Map
             */
            this.clear = function(){
                length = 0;
                obj = new Object();
            };
        }
    }
]);
// Source: app/static/businessModeling/js/controller/intentionConceptManage_controller.js
/**
* Created by mileS on 2017/3/23.
*/


angular.module('businessModelingModule').controller('intentionConceptManageController', [
'$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addForceSegment : addForceSegment,
            editForceSegment : editForceSegment,
            deleteForceSegment:deleteForceSegment,
            listData : "",   // table 数据
            singleDelForceSegmentConcept : singleDelForceSegmentConcept,    //單條刪除
            singleAddForceSegmentConcept : singleAddForceSegmentConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchForceSegmentConcept : searchForceSegmentConcept,
            searchVal : "",
            searchType : "forceSegmentConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadForceSegmentConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/forceSegment/listByAttribute",{
                "forceSegmentConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadForceSegmentConcept(current,data);
            },function(){
               // layer.msg("请求失败");
                console.log('请求失败');
            });
        }
        function loadForceSegmentConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchForceSegmentConcept(current);
                    }else{
                        loadForceSegmentConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/forceSegment/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadForceSegmentConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editForceSegment(item){
            $scope.vm.dialogTitle="编辑强制分词概念";
            $scope.vm.key = item.forceSegmentConceptKey;
            $scope.vm.term =  item.forceSegmentConceptTerm;
            addForceSegmentConceptDialog(singleEditForceSegmentConcept,item);
        }
        function searchForceSegmentConcept(current){
            if($scope.vm.searchType == "forceSegmentConceptModifier"){
                searchForceSegmentConceptByUser(current);
            }else{
                searchForceSegmentConceptByType(current);
            }
        }
        //查询
        function searchForceSegmentConceptByUser(current){
            console.log($scope.vm.searchVal);
            httpRequestPost("/api/ms/modeling/concept/forceSegment/listByModifier",{
                "forceSegmentConceptModifier":$scope.vm.searchVal,
                "forceSegmentConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadForceSegmentConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchForceSegmentConceptByType(current){
            var request = new Object();
            request.forceSegmentConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "forceSegmentConceptModifyTime"){
                request=switchForceSegmentConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/forceSegment/listByAttribute",request,function(data){
                loadForceSegmentConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchForceSegmentConceptSearchType(request,value){
            if($("#searchType").val()=="forceSegmentConceptKey"){
                request.forceSegmentConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="forceSegmentConceptTerm"){
                request.forceSegmentConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addForceSegment(){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/intention/intentionConceptManageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/forceSegment/repeatCheck", {
                            "forceSegmentConceptApplicationId": $scope.vm.applicationId,
                            "forceSegmentConceptKey": $scope.vm.key
                        }, function (data) {          //类名重複
                            if (data.status === 10002) {
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/forceSegment/listByAttribute", {
                                        "forceSegmentConceptApplicationId": $scope.vm.applicationId,
                                        "forceSegmentConceptKey": $scope.vm.key,
                                        "index": 0,
                                        "pageSize": 1
                                    }, function (data) {
                                        $scope.vm.dialogTitle = "编辑强制分词概念";
                                        console.log(data);
                                        addForceSegmentConceptDialog(singleEditForceSegmentConcept, data.data[0]);
                                        $scope.vm.key = data.data[0].forceSegmentConceptKey;
                                        $scope.vm.term = data.data[0].forceSegmentConceptTerm;
                                    }, function () {
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            } else {
                                //类名无冲突
                                $scope.vm.dialogTitle = "增加强制分词概念";
                                $scope.vm.term = "";
                                addForceSegmentConceptDialog(singleAddForceSegmentConcept);
                            }
                        }, function () {
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#forceSegmentKey").blur(function(){
                        if(lengthCheck($("#forceSegmentKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addForceSegmentConceptDialog(callback,item){
           var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/intention/intentionConceptManageDialog2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#forceSegmentKeyTwo").blur(function(){
                        if(lengthCheck($("#forceSegmentKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteForceSegment(id){
            var dia = angular.element(".ngdialog ");
            if(dia.length==0) {
                var dialog = ngDialog.openConfirm({
                    template: "/static/businessModeling/conceptManageDialog.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                        if (e === 1) {
                            singleDelForceSegmentConcept(id)
                        }
                    }
                });
            }
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadForceSegmentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/forceSegment/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditForceSegmentConcept(item){
            assembleForceSegmentConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/forceSegment/update",{
                "forceSegmentConceptId":item.forceSegmentConceptId,
                "forceSegmentConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "forceSegmentConceptKey":  $scope.vm.key,
                "forceSegmentConceptModifier": $scope.vm.modifier,
                "forceSegmentConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadForceSegmentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddForceSegmentConcept(){
            assembleForceSegmentConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/forceSegment/add",{
                "forceSegmentConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "forceSegmentConceptKey":  $scope.vm.key,
                "forceSegmentConceptModifier": $scope.vm.modifier,
                "forceSegmentConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadForceSegmentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelForceSegmentConcept(id){
            httpRequestPost("/api/ms/modeling/concept/forceSegment/delete",{
                "forceSegmentConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadForceSegmentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleForceSegmentConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","concept_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/forceSegment/export",{
                "forceSegmentConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);


// Source: app/static/businessModeling/js/controller/semanticExpressionConceptManage_controller.js
/**
 * Created by mileS on 2017/3/23.
 */

angular.module('businessModelingModule').controller('semanticExpressionConceptManageController', [
'$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addSemanticExpression : addSemanticExpression,
            editSemanticExpression : editSemanticExpression,
            deleteSemanticExpression:deleteSemanticExpression,
            listData : "",   // table 数据
            singleDelSemanticExpressionConcept : singleDelSemanticExpressionConcept,    //單條刪除
            singleAddSemanticExpressionConcept : singleAddSemanticExpressionConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchSemanticExpressionConcept : searchSemanticExpressionConcept,
            searchVal : "",
            searchType : "semanticExpressionConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            synonym: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            synonymBeyondLimit:"同义概念不能超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadSemanticExpressionConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/listByAttribute",{
                "semanticExpressionConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSemanticExpressionConcept(current,data);
            },function(){
               // layer.msg("请求失败");
                console.log('请求失败');
            })
        }
        function loadSemanticExpressionConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchSemanticExpressionConcept(current);
                    }else{
                        loadSemanticExpressionConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/semanticexpression/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadSemanticExpressionConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editSemanticExpression(item){
            $scope.vm.dialogTitle="编辑语义表达概念";
            $scope.vm.key = item.semanticExpressionConceptKey;
            $scope.vm.synonym = item.semanticExpressionSynonymConcept;
            $scope.vm.term =  item.semanticExpressionConceptTerm;
            addSemanticExpressionConceptDialog(singleEditSemanticExpressionConcept,item);
        }
        function searchSemanticExpressionConcept(current){
            if($scope.vm.searchType == "semanticExpressionConceptModifier"){
                searchSemanticExpressionConceptByUser(current);
            }else{
                searchSemanticExpressionConceptByType(current);
            }
        }
        //查询
        function searchSemanticExpressionConceptByUser(current){
            console.log($scope.vm.searchVal);
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/listByModifier",{
                "semanticExpressionConceptModifier":$scope.vm.searchVal,
                "semanticExpressionConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSemanticExpressionConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchSemanticExpressionConceptByType(current){
            var request = new Object();
            request.semanticExpressionConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "semanticExpressionConceptModifyTime"){
                request=switchSemanticExpressionConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/listByAttribute",request,function(data){
                loadSemanticExpressionConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchSemanticExpressionConceptSearchType(request,value){
            if($("#searchType").val()=="semanticExpressionConceptKey"){
                request.semanticExpressionConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="semanticExpressionConceptTerm"){
                request.semanticExpressionConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="semanticExpressionSynonymConcept"){
                request.semanticExpressionSynonymConcept=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addSemanticExpression(){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/semanticExpression/semanticExpressionConceptManageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/semanticexpression/repeatCheck", {
                            "semanticExpressionConceptApplicationId": $scope.vm.applicationId,
                            "semanticExpressionConceptKey": $scope.vm.key
                        }, function (data) {          //类名重複
                            if (data.status === 10002) {
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/semanticexpression/listByAttribute", {
                                        "semanticExpressionConceptApplicationId": $scope.vm.applicationId,
                                        "semanticExpressionConceptKey": $scope.vm.key,
                                        "index": 0,
                                        "pageSize": 1
                                    }, function (data) {
                                        $scope.vm.dialogTitle = "编辑语义表达概念";
                                        console.log(data);
                                        addSemanticExpressionConceptDialog(singleEditSemanticExpressionConcept, data.data[0]);
                                        $scope.vm.key = data.data[0].semanticExpressionConceptKey;
                                        $scope.vm.term = data.data[0].semanticExpressionConceptTerm;
                                        $scope.vm.synonym = data.data[0].semanticExpressionSynonymConcept;
                                    }, function () {
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            } else {
                                //类名无冲突
                                $scope.vm.dialogTitle = "增加语义表达概念";
                                $scope.vm.term = "";
                                $scope.vm.synonym = "";
                                addSemanticExpressionConceptDialog(singleAddSemanticExpressionConcept);
                            }
                        }, function () {
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        });
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.synonym = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#semanticExpressionKey").blur(function(){
                        if(lengthCheck($("#semanticExpressionKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addSemanticExpressionConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/semanticExpression/semanticExpressionConceptManageDialog2.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        if($scope.vm.synonym!=""){
                            if(lengthCheck($scope.vm.synonym,0,50)==false){
                                $("#synonymAddError").html($scope.vm.synonymBeyondLimit);
                                return false;
                            }
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                        $scope.vm.synonym = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#semanticExpressionKeyTwo").blur(function(){
                        if(lengthCheck($("#semanticExpressionKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                    $("#semanticExpressionSynonymConcept").blur(function(){
                        if(nullCheck($("#semanticExpressionSynonymConcept").val())==true){
                            if(lengthCheck($("#semanticExpressionSynonymConcept").val(),0,50)==false){
                                $("#synonymAddError").html($scope.vm.synonymBeyondLimit);
                            }else{
                                $("#synonymAddError").html('');
                            }
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteSemanticExpression(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelSemanticExpressionConcept(id)
                    }
                }
            });
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadSemanticExpressionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/semanticexpression/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditSemanticExpressionConcept(item){
            assembleSemanticExpressionConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/update",{
                "semanticExpressionConceptId":item.semanticExpressionConceptId,
                "semanticExpressionConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "semanticExpressionConceptKey":  $scope.vm.key,
                "semanticExpressionSynonymConcept":  $scope.vm.synonym,
                "semanticExpressionConceptModifier": $scope.vm.modifier,
                "semanticExpressionConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadSemanticExpressionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddSemanticExpressionConcept(){
            assembleSemanticExpressionConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/add",{
                "semanticExpressionConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "semanticExpressionConceptKey":  $scope.vm.key,
                "semanticExpressionSynonymConcept":  $scope.vm.synonym,
                "semanticExpressionConceptModifier": $scope.vm.modifier,
                "semanticExpressionConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadSemanticExpressionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelSemanticExpressionConcept(id){
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/delete",{
                "semanticExpressionConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadSemanticExpressionConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleSemanticExpressionConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            $scope.vm.synonym = "";
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","semantic_expression_concept_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/semanticexpression/export",{
                "semanticExpressionConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);

// Source: app/static/businessModeling/js/controller/sensitiveConceptManage_controller.js
/**
 * Created by mileS on 2017/3/23.
 */


angular.module('businessModelingModule').controller('sensitiveConceptManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addSensitive : addSensitive,
            editSensitive : editSensitive,
            deleteSensitive:deleteSensitive,
            listData : "",   // table 数据
            singleDelSensitiveConcept : singleDelSensitiveConcept,    //單條刪除
            singleAddSensitiveConcept : singleAddSensitiveConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchSensitiveConcept : searchSensitiveConcept,
            searchVal : "",
            searchType : "sensitiveConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadSensitiveConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/sensitive/listByAttribute",{
                "sensitiveConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSensitiveConcept(current,data);
            },function(){
                //layer.msg("请求失败");
                console.log('请求失败');
            });
        }
        function loadSensitiveConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchSensitiveConcept(current);
                    }else{
                        loadSensitiveConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/sensitive/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadSensitiveConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        //编辑
        function editSensitive(item){
            $scope.vm.dialogTitle="编辑敏感概念";
            $scope.vm.key = item.sensitiveConceptKey;
            $scope.vm.term =  item.sensitiveConceptTerm;
            addSensitiveConceptDialog(singleEditSensitiveConcept,item);
        }
        function searchSensitiveConcept(current){
            if($scope.vm.searchType == "sensitiveConceptModifier"){
                searchSensitiveConceptByUser(current);
            }else{
                searchSensitiveConceptByType(current);
            }
        }
        //查询
        function searchSensitiveConceptByUser(current){
            httpRequestPost("/api/ms/modeling/concept/sensitive/listByModifier",{
                "sensitiveConceptModifier":$scope.vm.searchVal,
                "sensitiveConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSensitiveConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchSensitiveConceptByType(current){
            var request = new Object();
            request.sensitiveConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "sensitiveConceptModifyTime"){
                request=switchSensitiveConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/sensitive/listByAttribute",request,function(data){
                loadSensitiveConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchSensitiveConceptSearchType(request,value){
            if($("#searchType").val()=="sensitiveConceptKey"){
                request.sensitiveConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="sensitiveConceptTerm"){
                request.sensitiveConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }

        //添加 窗口
        function addSensitive(){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/sensitive/sensitiveConceptManageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/sensitive/repeatCheck", {
                            "sensitiveConceptApplicationId": $scope.vm.applicationId,
                            "sensitiveConceptKey": $scope.vm.key
                        }, function (data) {          //类名重複
                            if (data.status === 10002) {
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/sensitive/listByAttribute", {
                                        "sensitiveConceptApplicationId": $scope.vm.applicationId,
                                        "sensitiveConceptKey": $scope.vm.key,
                                        "index": 0,
                                        "pageSize": 1
                                    }, function (data) {
                                        $scope.vm.dialogTitle = "编辑敏感概念";
                                        console.log(data);
                                        addSensitiveConceptDialog(singleEditSensitiveConcept, data.data[0]);
                                        $scope.vm.key = data.data[0].sensitiveConceptKey;
                                        $scope.vm.term = data.data[0].sensitiveConceptTerm;
                                    }, function () {
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            } else {
                                //类名无冲突
                                $scope.vm.dialogTitle = "增加敏感概念";
                                $scope.vm.term = "";
                                addSensitiveConceptDialog(singleAddSensitiveConcept);
                            }
                        }, function () {
                           // layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#sensitiveKey").blur(function(){
                        if(lengthCheck($("#sensitiveKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addSensitiveConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/sensitive/sensitiveConceptManageDialog2.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.term = "";
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#sensitiveKeyTwo").blur(function(){
                        if(lengthCheck($("#sensitiveKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteSensitive(id){
            var dia = angular.element(".ngdialog ");
            if(dia.length==0) {
                var dialog = ngDialog.openConfirm({
                    template: "/static/businessModeling/conceptManageDialog.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                        if (e === 1) {
                            singleDelSensitiveConcept(id);
                        }
                    }
                });
            }
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadSensitiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/sensitive/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditSensitiveConcept(item){
            assembleSensitiveConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/sensitive/update",{
                "sensitiveConceptId":item.sensitiveConceptId,
                "sensitiveConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "sensitiveConceptKey":  $scope.vm.key,
                "sensitiveConceptModifier": $scope.vm.modifier,
                "sensitiveConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadSensitiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddSensitiveConcept(){
            assembleSensitiveConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/sensitive/add",{
                "sensitiveConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "sensitiveConceptKey":  $scope.vm.key,
                "sensitiveConceptModifier": $scope.vm.modifier,
                "sensitiveConceptTerm": $scope.vm.term
            },function(data){
                if(responseView(data)==true){
                    loadSensitiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelSensitiveConcept(id){
            httpRequestPost("/api/ms/modeling/concept/sensitive/delete",{
                "sensitiveConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadSensitiveConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleSensitiveConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.term = "";
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","concept_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/sensitive/export",{
                "sensitiveConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);
// Source: app/static/businessModeling/js/controller/sentimentConceptManage_controller.js
/**
 * Created by mileS on 2017/3/23.
 */

angular.module('businessModelingModule').controller('sentimentConceptManageController', [
'$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addSentiment : addSentiment,
            editSentiment : editSentiment,
            deleteSentiment:deleteSentiment,
            listData : "",   // table 数据
            singleDelSentimentConcept : singleDelSentimentConcept,    //單條刪除
            singleAddSentimentConcept : singleAddSentimentConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchSentimentConcept : searchSentimentConcept,
            searchVal : "",
            searchType : "sentimentConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            modifier: $cookieStore.get("userId"),
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            classify:490,
            strength:5,
            polar:0,
            batchUpload:batchUpload,
            exportAll:exportAll,
            batchDelete:batchDelete,
            downloadTemplate:downloadTemplate
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadSentimentConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/listByAttribute",{
                "sentimentConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSentimentConcept(current,data);
            },function(){
               // layer.msg("请求失败");
                console.log('请求失败');
            })
        }
        function loadSentimentConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($("#sentimentConceptClassify").val())==true || nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchSentimentConcept(current);
                    }else{
                        loadSentimentConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //编辑
        function editSentiment(item){
            $scope.vm.dialogTitle="编辑情感概念";
            $scope.vm.key = item.sentimentConceptKey;
            $scope.vm.classify =  item.sentimentConceptClassify;
            addSentimentConceptDialog(singleEditSentimentConcept,item);
        }
        function searchSentimentConcept(current){
            if($scope.vm.searchType == "sentimentConceptModifier"){
                searchSentimentConceptByUser(current);
            }else{
                searchSentimentConceptByType(current);
            }
        }
        //查询
        function searchSentimentConceptByUser(current){
            console.log($scope.vm.searchVal);
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/listByModifier",{
                "sentimentConceptModifier":$scope.vm.searchVal,
                "sentimentConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSentimentConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchSentimentConceptByType(current){
            var request = new Object();
            request.sentimentConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "sentimentConceptModifyTime"){
                request=switchSentimentConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/listByAttribute",request,function(data){
                loadSentimentConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }

        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchSentimentConceptSearchType(request,value){
            if($("#searchType").val()=="sentimentConceptKey"){
                request.sentimentConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="sentimentConceptClassify"){
                request.sentimentConceptClassify=$("#sentimentConceptClassify").val();
            }else if($("#searchType").val()=="sentimentConceptStrength"){
                request.sentimentConceptStrength=value;
            }else if($("#searchType").val()=="sentimentConceptPolar"){
                request.sentimentConceptPolar=value;
            }
            return request;
        }

        //添加 窗口
        function addSentiment(){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/sentiment/sentimentConceptManageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/poc/sentiment/repeatCheck", {
                            "sentimentConceptApplicationId": $scope.vm.applicationId,
                            "sentimentConceptKey": $scope.vm.key
                        }, function (data) {          //类名重複
                            if (data.status === 10002) {
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/poc/sentiment/listByAttribute", {
                                        "sentimentConceptApplicationId": $scope.vm.applicationId,
                                        "sentimentConceptKey": $scope.vm.key,
                                        "index": 0,
                                        "pageSize": 1
                                    }, function (data) {
                                        $scope.vm.dialogTitle = "编辑情感概念";
                                        console.log(data);
                                        addSentimentConceptDialog(singleEditSentimentConcept, data.data[0]);
                                        $scope.vm.key = data.data[0].sentimentConceptKey;
                                        $scope.vm.classify = data.data[0].sentimentConceptClassify;
                                        $scope.vm.strength = data.data[0].sentimentConceptStrength;
                                        $scope.vm.polar = data.data[0].sentimentConceptPolar;
                                    }, function () {
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            } else {
                                //类名无冲突
                                $scope.vm.dialogTitle = "增加情感概念";
                                $scope.vm.classify = "";
                                addSentimentConceptDialog(singleAddSentimentConcept);
                            }
                        }, function () {
                            console.log('添加失败');
                        })
                    } else {
                        $scope.vm.key = "";
                        $scope.vm.classify = 490;
                        $scope.vm.strength = 5;
                        $scope.vm.polar = 0;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    $("#sentimentKey").blur(function(){
                        if(lengthCheck($("#sentimentKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addSentimentConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template: "/static/businessModeling/sentiment/sentimentConceptManageDialog2.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        callback(item);
                    }
                    $scope.vm.key = "";
                    $scope.vm.classify = 490;
                    $scope.vm.strength = 5;
                    $scope.vm.polar = 0;
                }
            });
            if(dialog){
                $timeout(function () {
                    $("#sentimentKeyTwo").blur(function(){
                        if(lengthCheck($("#sentimentKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }
        //   刪除 彈框
        function deleteSentiment(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelSentimentConcept(id)
                    }
                }
            });
        }
        //編輯事件
        function singleEditSentimentConcept(item){
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/update",{
                "sentimentConceptId":item.sentimentConceptId,
                "sentimentConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "sentimentConceptKey":  $scope.vm.key,
                "sentimentConceptModifier": $scope.vm.modifier,
                "sentimentConceptClassify": $scope.vm.classify,
                "sentimentConceptStrength": $scope.vm.strength,
                "sentimentConceptPolar": $scope.vm.polar
            },function(data){
                if(responseView(data)==true){
                    loadSentimentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddSentimentConcept(){
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/add",{
                "sentimentConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "sentimentConceptKey":  $scope.vm.key,
                "sentimentConceptModifier": $scope.vm.modifier,
                "sentimentConceptClassify": $scope.vm.classify,
                "sentimentConceptStrength": $scope.vm.strength,
                "sentimentConceptPolar": $scope.vm.polar
            },function(data){
                if(responseView(data)==true){
                    loadSentimentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条刪除
        function singleDelSentimentConcept(id){
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/delete",{
                "sentimentConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadSentimentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //返回状态显示
        function responseView(data){
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/poc/sentiment/export",{
                "sentimentConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadSentimentConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/poc/sentiment/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","sentiment_concept_template.xlsx");
        }
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！",{time:1000});
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.ids=id_array;
                httpRequestPost("/api/ms/modeling/concept/poc/sentiment/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadSentimentConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
    }
]);

// Source: app/static/businessModeling/js/controller/synonyConceptManage_controller.js
/**
 * Created by mileS on 2017/3/23.
 */

angular.module('businessModelingModule').controller('synonyConceptManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$cookieStore",function ($scope,localStorageService, $state,ngDialog,$timeout,$cookieStore) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            applicationId : $cookieStore.get("applicationId"),
            addSynonym : addSynonym,
            editSynonym : editSynonym,
            deleteSynonym:deleteSynonym,
            listData : "",   // table 数据
            singleDelSynonymConcept : singleDelSynonymConcept,    //單條刪除
            singleAddSynonymConcept : singleAddSynonymConcept,
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            //查詢
            searchSynonymConcept : searchSynonymConcept,
            searchVal : "",
            searchType : "synonymConceptKey",
            timeStart : "",
            timeEnd : "",
            //新增
            key: "" ,
            oldKey: "" ,
            modifier: $cookieStore.get("userId"),
            term: "",
            weight: "33" ,   //默認權重
            dialogTitle : "",
            inputSelect : [],
            inputVal : "",
            termSpliter: "；",
            percent:"%",
            keyNullOrBeyondLimit:"概念类名不能为空或超过长度限制50",
            termNullOrBeyondLimit:"概念集合不能为空或超过长度限制5000",
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            batchDelete:batchDelete,
            findMining: findMining
        };

        /**
         * 加载分页条
         * @type
         */
        init();

        function init(){
            $scope.vm.paginationConf = {
                currentPage: 1,
                totalItems: 0,
                pageSize: 0,
                pagesLength: 8
            };
        }
        //请求列表
        function loadSynonymConceptTable(current){
            httpRequestPost("/api/ms/modeling/concept/synonym/listByAttribute",{
                "synonymConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSynonymConcept(current,data);
            },function(){
                //layer.msg("请求失败")
                console.log('请求失败');
            })
        }
        function loadSynonymConcept(current,data){
            clearSelectAll();
            $scope.vm.listData = data.data;
            $scope.vm.paginationConf = {
                currentPage: current,//当前页
                totalItems: data.total, //总条数
                pageSize: $scope.vm.pageSize,//第页条目数
                pagesLength: 8,//分页框数量
            };
            $scope.$apply();
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if(nullCheck($("#synonymConceptWeight").val())==true || nullCheck($scope.vm.searchVal)==true || (nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true)){
                        searchSynonymConcept(current);
                    }else{
                        loadSynonymConceptTable(current);
                    }
                }, 100);
            }
        },true);
        //全选
        $("#selectAll").on("click",function(){
            var ids = document.getElementsByName("sid");
            var flag = false;
            if(this.checked){
                flag = true;
            }
            $.each(ids,function(index,value){
                if(flag){
                    $(value).attr("checked",true);
                    $(value).prop("checked",true);
                }else{
                    $(value).attr("checked",false);
                    $(value).prop("checked",false);
                }
            });
        });
        //清空全选
        function clearSelectAll(){
            console.log("=====clearSelectAll=====");
            $("#selectAll").attr("checked",false);
            $("#selectAll").prop("checked",false);
        }
        //批量删除
        function batchDelete(){
            var ids = document.getElementsByName("sid");
            var id_array = [];
            var key_array = [];
            for (var i = 0; i < ids.length; i++) {
                if (ids[i].checked) {
                    id_array.push(ids[i].value);
                    key_array.push($(ids[i]).attr("synonymkey"));
                }
            }
            if (id_array.length == 0) {
                layer.msg("请选择要删除的记录！");
                return;
            }
            layer.confirm('确认要删除吗？', function (index) {
                layer.close(index);
                var request = new Object();
                request.synonymConceptModifier=$scope.vm.modifier;
                request.synonymConceptApplicationId=$scope.vm.applicationId;
                request.ids=id_array;
                request.keyArray=key_array;
                httpRequestPost("/api/ms/modeling/concept/synonym/batchDelete",request,function(data){
                    if(responseView(data)==true){
                        loadSynonymConceptTable($scope.vm.paginationConf.currentPage);
                    }
                });
            });
        }
        function editSynonym(item){
            $scope.vm.dialogTitle="编辑同义概念";
            $scope.vm.key = item.synonymConceptKey;
            $scope.vm.oldKey = item.synonymConceptKey;
            $scope.vm.term =  item.synonymConceptTerm;
            $scope.vm.weight =  item.synonymConceptWeight;
            addSynonymConceptDialog(singleEditSynonymConcept,item);
        }
        function searchSynonymConcept(current){
            //进行条件查询的时候 更新当前页数
            if($scope.vm.searchType == "synonymConceptModifier"){
                searchSynonymConceptByUser(current);
            }else{
                searchSynonymConceptByType(current);
            }
        }
        //查询
        function searchSynonymConceptByUser(current){
            httpRequestPost("/api/ms/modeling/concept/synonym/listByModifier",{
                "synonymConceptModifier":$scope.vm.searchVal,
                "synonymConceptApplicationId": $scope.vm.applicationId,
                "index" :(current-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                loadSynonymConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息");
            });
        }
        function searchSynonymConceptByType(current){
            var request = new Object();
            request.synonymConceptApplicationId=$scope.vm.applicationId;
            request.index=(current-1)*$scope.vm.pageSize;
            request.pageSize=$scope.vm.pageSize;
            if($scope.vm.searchType != "synonymConceptModifyTime"){
                request=switchSynonymConceptSearchType(request,$scope.vm.searchVal);
            }else if(nullCheck($scope.vm.timeStart)==true && nullCheck($scope.vm.timeEnd)==true){
                request.startTimeRequest=$scope.vm.timeStart;
                request.endTimeRequest=$scope.vm.timeEnd;
            }else{
                layer.msg("请选择时间段");
                return;
            }
            httpRequestPost("/api/ms/modeling/concept/synonym/listByAttribute",request,function(data){
                loadSynonymConcept(current,data);
            },function(){
                layer.msg("查询没有对应信息")
            });
        }
        /**
         * 转换查询类型
         * @param request
         * @param value
         * @returns {*}
         */
        function switchSynonymConceptSearchType(request,value){
            if($("#searchType").val()=="synonymConceptKey"){
                request.synonymConceptKey=$scope.vm.percent+value+$scope.vm.percent;
            }else if($("#searchType").val()=="synonymConceptWeight"){
                request.synonymConceptWeight=$("#synonymConceptWeight").val();
            }else if($("#searchType").val()=="synonymConceptTerm"){
                request.synonymConceptTerm=$scope.vm.percent+value+$scope.vm.percent;
            }
            return request;
        }
        //添加 窗口
        function addSynonym(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/synony/synonyConceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }
                        httpRequestPost("/api/ms/modeling/concept/synonym/repeatCheck",{
                            "synonymConceptApplicationId": $scope.vm.applicationId,
                            "synonymConceptKey": $scope.vm.key
                        },function(data){          //类名重複
                            if(data.status===10002){
                                layer.confirm("您添加的概念类已经在，是否前往编辑？",{
                                    btn:['前往','取消'],
                                    shade:false
                                },function(index){
                                    layer.close(index);
                                    httpRequestPost("/api/ms/modeling/concept/synonym/listByAttribute",{
                                        "synonymConceptApplicationId": $scope.vm.applicationId,
                                        "synonymConceptKey":$scope.vm.key,
                                        "index":0,
                                        "pageSize":1
                                    },function(data){
                                        $scope.vm.dialogTitle="编辑同义概念";
                                        console.log(data);
                                        addSynonymConceptDialog(singleEditSynonymConcept,data.data[0]);
                                        $scope.vm.key = data.data[0].synonymConceptKey;
                                        $scope.vm.term =  data.data[0].synonymConceptTerm;
                                        $scope.vm.weight =  data.data[0].synonymConceptWeight;
                                    },function(){
                                        console.log("cancel");
                                    });
                                },function(){
                                    console.log("cancel");
                                });
                            }else{
                                //类名无冲突
                                $scope.vm.dialogTitle="增加同义概念";
                                $scope.vm.term="";
                                $scope.vm.weight="33" ;   //默認權重
                                findMining();
                            }
                        },function(){
                            //layer.msg("添加失败")
                            console.log('添加失败');
                        })
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.oldKey = "";
                        $scope.vm.term = "";
                        $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#synonymKey").blur(function(){
                        if(lengthCheck($("#synonymKey").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //編輯彈框   添加公用
        function addSynonymConceptDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/synony/synonyConceptManageDialog2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(lengthCheck($scope.vm.key,0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                            return false;
                        }

                        var obj = $("#term").next();
                        var term = "";
                        var length = obj.find("li").length;
                        if(length<=0){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        $.each(obj.find("li"),function(index,value){
                            if(index>0){
                                $.each($(value).find("div"),function(index1,value1){
                                    if(index1==1){
                                        term+=$(value1).html()+$scope.vm.termSpliter;
                                    }
                                });
                            }
                        });
                        term=term.substring(0,term.length-1);
                        $scope.vm.term=term;
                        if(lengthCheck(term,0,500)==false){
                            $("#termAddError").html($scope.vm.termNullOrBeyondLimit);
                            return false;
                        }else{
                            $("#termAddError").html('');
                        }
                        callback(item);
                    }else{
                        $scope.vm.key = "";
                        $scope.vm.oldKey = "";
                        $scope.vm.term = "";
                        $scope.vm.weight = 33;
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    termSpliterTagEditor();
                    $("#synonymKeyTwo").blur(function(){
                        if(lengthCheck($("#synonymKeyTwo").val(),0,50)==false){
                            $("#keyAddError").html($scope.vm.keyNullOrBeyondLimit);
                        }else{
                            $("#keyAddError").html('');
                        }
                    });
                }, 100);
            }
        }

        //查询挖掘词
        function findMining() {
            httpRequestPostParam("/api/ms/modeling/concept/mining/listByConceptKey",{
                "request": "string",
                "question": $scope.vm.key,
                "count": 5
            },function(data){
                if(data.status == 200){
                    $scope.vm.term = data.data;
                    addSynonymConceptDialog(singleAddSynonymConcept, $scope.vm.term);
                }else{
                    addSynonymConceptDialog(singleAddSynonymConcept);
                    console.log('概念挖掘失败');
                }
            });
        }
        //   刪除 彈框
        function deleteSynonym(id){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/conceptManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        singleDelSynonymConcept(id)
                    }
                }
            });
        }
        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    loadSynonymConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/concept/synonym/batchAdd?applicationId='+$scope.vm.applicationId+'&modifierId='+$scope.vm.modifier);
                }, 100);
            }
        }
        //編輯事件
        function singleEditSynonymConcept(item){
            assembleSynonymConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/synonym/update",{
                "synonymConceptId":item.synonymConceptId,
                "synonymConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "synonymConceptKey":  $scope.vm.key,
                "synonymConceptOldKey":  $scope.vm.oldKey,
                "synonymConceptModifier": $scope.vm.modifier,
                "synonymConceptTerm": $scope.vm.term,
                "synonymConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadSynonymConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //单条新增
        function singleAddSynonymConcept(){
            assembleSynonymConceptTerm();
            httpRequestPost("/api/ms/modeling/concept/synonym/add",{
                "synonymConceptApplicationId": $scope.vm.applicationId,
                "applicationId": $scope.vm.applicationId,
                "synonymConceptKey":  $scope.vm.key,
                "synonymConceptModifier": $scope.vm.modifier,
                "synonymConceptTerm": $scope.vm.term,
                "synonymConceptWeight": $scope.vm.weight
            },function(data){
                if(responseView(data)==true){
                    loadSynonymConceptTable($scope.vm.paginationConf.currentPage);
                }
            })
        }
        //单条刪除
        function singleDelSynonymConcept(id){
            httpRequestPost("/api/ms/modeling/concept/synonym/delete",{
                "synonymConceptId":id
            },function(data){
                if(responseView(data)==true){
                    loadSynonymConceptTable($scope.vm.paginationConf.currentPage);
                }
            });
        }
        //初始化tagEditor插件
        function termSpliterTagEditor() {
            var term = $scope.vm.term;
            if(term==""){
                $("#term").tagEditor({
                    forceLowercase: false
                });
            }else if(term instanceof  Array){
                $("#term").tagEditor({
                    initialTags:term,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: term},
                    forceLowercase: false
                });
            }else{
                var terms = term.split($scope.vm.termSpliter);
                console.log(terms);
                $("#term").tagEditor({
                    initialTags:terms,
                    autocomplete: {delay: 0, position: {collision: 'flip'}, source: terms},
                    forceLowercase: false
                });
            }
        }
        //组装term数据
        function assembleSynonymConceptTerm(){
            var obj = $("#term").next();
            var term = "";
            $.each(obj.find("li"),function(index,value){
                if(index>0){
                    $.each($(value).find("div"),function(index1,value1){
                        if(index1==1){
                            term+=$(value1).html()+$scope.vm.termSpliter;
                        }
                    });
                }
            });
            term=term.substring(0,term.length-1);
            $scope.vm.term=term;
        }
        //返回状态显示
        function responseView(data){
            $scope.vm.key = "";
            $scope.vm.oldKey = "";
            $scope.vm.term = "";
            $scope.vm.weight = 33;
            clearSelectAll();
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                console.log("===success===");
                return true;
            }
            return false;
        }
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","concept_with_weight_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/concept/synonym/export",{
                "synonymConceptApplicationId":$scope.vm.applicationId
            },function(data){
                if(responseView(data)==true){
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
    }
]);
// Source: app/static/businessModeling/js/filter/typeFilter.js
/**
 * Created by Administrator on 2017/4/10.
 */
angular.module('knowledge_static_web').filter('typeFilter', function () {
    return function (val) {
        var result;
        if(val == 100){
            result = "FAQ型聊天知识"
        }else{
            result = "概念型聊天知识"
        }
        return result
    };
});
// Source: app/static/businessModeling/js/filter/weight.js
/**
 * Created by 41212 on 2017/4/6.
 */
angular.module('knowledge_static_web').filter('faqWeight', function () {
    return function (val) {
        var result;
        if(val == 60){
            result = "普通"
        }else{
            result = "否定"
        }
        return result
    };
});

// Source: app/static/deepLearning/js/controller/acquisitionDetails_controller.js
/**
 * 深度学习-数据采集-知识页面控制器JS
 * add by zhanjian 2017年7月18日18:58:02
 */
angular.module('deepLearning').controller('acquisitionDetailsController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams", "$timeout",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$timeout) {
        $state.go("deepLearning.acquisitionDetails");//页面跳转
        
        //定义作用域范围内变量
        $scope.vm = {
        	editOrView : editOrView,//编辑 or 查看
            del : del,//删除
            napSearch : napSearch,//页面搜索
            verifyRelease : verifyRelease,//参数校验，主要用于编辑或新增
            crawlRecordId : $stateParams.crawlRecordId,
            allowSubmit : 1, //是否允许提交
            pageSize: 10 //默认每页展示数量
        };
        
        //编辑（isEdit：0查看 or 1编辑)
        //编辑时，页面输入内容可以编辑，存在保存按钮；查看时，页面输入内容不能编辑，隐藏保存按钮。默认从参数中传过来
        function editOrView(data, isEdit){
        	//将要展示的对象赋值给作用域的全局变量。
        	$scope.vm.knowledgeId = data.knowledgeId;
            $scope.vm.crawlQuestion = data.crawlQuestion;
            $scope.vm.crawlAnswer = data.crawlAnswer;
            $scope.vm.knowledgeQuestion = data.knowledgeQuestion;
            $scope.vm.knowledgeAnswer = data.knowledgeAnswer;
            $scope.vm.isEdit = isEdit;
            
            //（编辑 or查看）弹出层
            var dialog = ngDialog.openConfirm({
                template: "/static/deepLearning/acquisitionDetailsDialog.html",
                width:"900px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {//关闭回掉汗水
                    if (e === 1) {
                    	if(isEdit == 1) {
	                        if($scope.vm.allowSubmit) {//如果参数校验通过，允许提交
	                        	//请求后台
	                            httpRequestPost("/sprider/knowledge/editByKnowledgeId", {
	                            	knowledgeId: $scope.vm.knowledgeId,
	                                knowledgeQuestion: $scope.vm.knowledgeQuestion,
	                                knowledgeAnswer: $scope.vm.knowledgeAnswer,
	                            }, function (data) {
	                            	layer.msg(data.info, {time:2000});
	                                $state.reload(); //刷新页面
	                            }, function () {
	                            	layer.msg("请求失败", {time:2000});
	                            })
	                        }
                    	}
                    } 
                    //保存的同时清空数据
                    $scope.vm.knowledgeId = "";
                    $scope.vm.crawlQuestion = "";
                    $scope.vm.crawlAnswer = "";
                    $scope.vm.knowledgeQuestion = "";
                    $scope.vm.knowledgeAnswer = "";
                }
            });
        }
        
        //添加输入参数校验
        function verifyRelease(){
            if($scope.vm.knowledgeId == null || $scope.vm.knowledgeId == ""){
                layer.msg("知识序号为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.knowledgeQuestion == null || $scope.vm.knowledgeQuestion == ""){
                layer.msg("处理后问题不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.knowledgeAnswer == null || $scope.vm.knowledgeAnswer == ""){
                layer.msg("处理后回答不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            return 1;
        }

        //页面初始化-加载列表
        napSearch();
        function napSearch(){
            getData(1);
        }
        //查询记录列表
        function getData(index){
            httpRequestPost("/sprider/knowledge/getByRecordId",{
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "crawlRecordId" : $scope.vm.crawlRecordId
            },function(data){
            	if(data.status == 200) {
            		if(data.data.objs == null || data.data.objs.length <= 0) {
            			layer.msg("没有查询到任何数据", {time:2000});
            			return false;
            		}
            		$scope.vm.listData = data.data.objs;
            		$scope.vm.paginationConf = {
            				currentPage: index,//当前页
            				totalItems: data.data.total, //总条数
            				pageSize: $scope.vm.pageSize,//第页条目数
            				pagesLength: 10,//分页框数量
            		};
            		$scope.$apply();
            		return true;
            	} else {
            		layer.msg(data.info, {time:2000});
            	}
            }, function () {
            	layer.msg("请求失败", {time:2000});
            });
        }

        //监听分页栏currentPage改变事件
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
            	if (timeout) {
                    $timeout.cancel(timeout)
                }
            	timeout = $timeout(function () {
                    getData(current);
            	}, 100)
            }
        },true);
        
        //删除知识
        function del(knowledgeId){
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/sprider/knowledge/delByKnowledgeId",{
                            knowledgeId:knowledgeId,
                        },function(data){
                        	layer.msg(data.info, {time:2000});
                            $state.reload();
                        }, function () {
                        	layer.msg("请求失败", {time:2000});
                        })
                    }
                }
            });
        }
    }
]);


// Source: app/static/deepLearning/js/controller/dataAcquisition_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */
angular.module('deepLearning').controller('dataAcquisitionController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$stateParams","$cookieStore","$timeout",
    function ($scope,localStorageService, $state,ngDialog,$stateParams,$cookieStore,$timeout) {
        $state.go("deepLearning.dataAcquisition");
        $scope.vm = {

            crawlStartTime : "", //查询的采集开始日期
            crawlEndTime : "", //查询的采集截止日期
            crawlRecordData : "",   // 采集的记录列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //数据记录总数
            listCrawlRecordData : listCrawlRecordData, //分页查询
            clearDate : clearDate, //情况日期查询
            save : save,//新建任务保存
            newTask : newTaskDialog, //新建任务弹窗
            exportToChat : exportToChat //导入到闲聊库
        };

        //清空日期查询
        function clearDate(){
            $scope.vm.crawlStartTime="";
            $scope.vm.crawlEndTime="";
            listCrawlRecordData(1);
        }
        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listCrawlRecordData(1);
        //请求采集数据列表
        function listCrawlRecordData(index){
            httpRequestPost("/sprider/record/getCrawlRecord",{
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "crawlStartTime": $scope.vm.crawlStartTime,
                "crawlEndTime": $scope.vm.crawlEndTime
            },function(data){
                $scope.vm.crawlRecordData = data.data;
                console.log(data.data);
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listCrawlRecordData(current);
                }, 100)
            }
        },true);

        //根据采集批次导入数据到闲聊库
        function exportToChat(crawlRecordId){
            httpRequestPost("/sprider/record/exportDataToChat",{
                "crawlRecordId": crawlRecordId
            },function(data){
                if(data.status==200){
                    layer.msg("数据导入中，请稍后查看闲聊库！");
                }else{
                    layer.msg("数据导入失败");
                }
            },function(){
                layer.msg("数据导入失败");
            });
        }

        //新建任务弹窗
        function newTaskDialog(callback){
            var dialog = ngDialog.openConfirm({
                template: "/static/deepLearning/dataAcquisitionDialog.html",
                width:"500px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                    } else {
                    }
                }
            });
        }

        //新建任务 获取参数
        function getParams(){
            var params =  {
                "crawlSource" : $scope.vm.crawlSource,
                "crawlDate": $scope.vm.crawlDate,
                "crawlCount" : $scope.vm.crawlCount
            };
            return params
        }
        
        //新建任务 检验参数
        function checkSave(){
            var params = getParams();
            if(!params.crawlSource){
                layer.msg("数据源不能为空，请填写");
                return false
            }else if(!params.crawlDate.length){
                layer.msg("采集日期不能为空，请选择时间");
                return false
            }else if(!params.crawlCount.length){
                layer.msg("采集数量不能为空，请填写");
                return false
            }else{
                return true
            }
        }

        //新建任务保存
        function save(){
            if (!checkSave()) {
                return false
            } else {
            	$scope.vm.data = getParams();
                httpRequestPost("/sprider/record/createCrawlRecord", getParams(), function (data) {
                    if (data.status == 200) {
                        $state.go('deepLearning.dataAcquisition');
                    } else {
                        layer.msg("新建采集任务失败") ;
                    }
                }, function (err) {
                    layer.msg("新建采集任务失败") ;
                });

            }
        }
    }
]);


// Source: app/static/deepLearning/js/controller/deepLearningCon_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */
angular.module('deepLearning').controller('deepLearningConController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams","$interval",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$interval) {
        $state.go("deepLearning.deepLearningCon");
        $scope.vm = {
            showProcess :showProcess ,
            samples:'',
            name:'',
            epoches:'',
            checkpoint:'',
            train:train,
            listName : "",
            modelName:modelName,
            trainTerminal:trainTerminal,
            trainProcess:trainProcess,
            showAttenuation:showAttenuation,
            showCharts:showCharts,
            isDeeplearnTrain:isDeeplearnTrain,
            isDisabled:"false",
        };
        $scope.vm.isDeeplearnTrain();
        $scope.vm.trainProcess();
        var timeout_upd= $interval($scope.vm.trainProcess,5000);
        $scope.$on('$destroy',function(){
            $interval.cancel(timeout_upd);
        })
        //bar
        var dataX = [];
        var dataDian = [];
        var a="#c23531";
        var b="#dfdfdf";
        var w="410px";
        var h="15px";
        var div=$(".bar_div");//进度条要插入的地方
        var barb=function(){
            div.each(function(){
                var width=$(this).attr('w');
                var barbox='<dl class="barbox" style="width:410px;"><dd class="barline" ><div w="'+width+'" class="charts" style="width:0px"><d></d></div></dd></dl>';
                $(this).append(barbox);
            })
        }

        var amimeat=function(){
            $(".charts").each(function(i,item){
                var wi=parseInt($(this).attr("w"));
                $(item).animate({width: wi+"%"},1000,function(){//一天内走完
                    $(this).children('d').html(wi+"%");
                });
            });
        }
        var barbCss=function(a,b){
            $(".barbox").css({
                "height":h,
                "line-height":h,
                "text-align":"center",
                "color":"#fff",
            })
            $(".barbox>dd").css({
                "float":"left"
            })
            $(".barline").css({
                "width":w,
                "background":b,
                "height":h,
                "overflow":"hidden",
                "display":"inline",
                "position":"relative",
                "border-radius":"8px",
            })
            $(".barline>d").css({
                "position":"absolute",
                "top":"0px",
            })
            $(".charts").css({
                "background":a,
                "height":h,
                "width":"0px",
                "overflow":"hidden",
                "border-radius":"8px"
            })
        }
        barb();
        amimeat();
        barbCss(a,b);

        //启动训练
        function train(){
            if($scope.vm.isDisabled == true){
                return;
            }
            var cell;
            var activation;
            var regularization;
            var regularizationRate;
            var layers;
            var neurons;
            var learningRate;
            var maxGradient;
            var dropout;
            var batchSize;
            //根据名字查询配置文件
            var request = new Object();
            request.name=$scope.vm.name;
            if($scope.vm.name == ""||$scope.vm.name==null){

                layer.msg("请选择一个模型！", {time:3000}) ;
                return;
            }
            request.index=0;
            request.pageSize=5;
            httpRequestPost("/sprider/deeplearn/queryByName",request,function(data){
                if (data.status == 200) {
                    var list =data.data.objs;
                    for(var i=0;i<list.length;i++)
                    {
                        cell = list[i].name;
                        activation = list[i].activation;
                        regularization = list[i].regularization;
                        regularizationRate = list[i].regularizationRate;
                        layers = list[i].layers;
                        neurons = list[i].neurons;
                        learningRate = list[i].learningRate;
                        maxGradient = list[i].maxGradient;
                        dropout = list[i].dropout;
                        batchSize = list[i].batchSize;
                    }

                    //解析结果参数
                    var request = new Object();
                    request.cell=cell;
                    request.activation=activation;
                    request.regularization=regularization;
                    request.regularizationRate=regularizationRate;
                    request.layers=layers;
                    request.neurons=neurons;
                    request.learningRate=learningRate;
                    request.maxGradient=maxGradient;
                    request.dropout=dropout;
                    request.batchSize=batchSize;
                    if($scope.vm.samples == null || $scope.vm.samples==""){
                        request.samplesPerEpoch = "1024";
                    }
                    else{
                        request.samplesPerEpoch = $scope.vm.samples;
                    }
                    if($scope.vm.epoches == null ||$scope.vm.epoches ==""){
                        request.epoches = "10";
                    }
                    else{
                        request.epoches = $scope.vm.epoches;
                    }
                    if($scope.vm.checkpoint == null||$scope.vm.checkpoint ==""){
                        request.checkpointInterval = "10";
                    }
                    else{
                        request.checkpointInterval = $scope.vm.checkpoint;
                    }
                    httpRequestPost("/sprider/deeplearn/deeplearnTrain",request,function(data){
                        if (data.status == 200) {
                            if(data.data == 1)
                            {
                                layer.msg("已启动深度学习，请不要重复操作！", {time:3000}) ;
                            }
                            else
                            {
                                layer.msg("启动深度学习成功！", {time:3000}) ;
                                $scope.vm.isDisabled=true;
                                $('#train').css('background','#eee');
                                $scope.vm.trainProcess();
                            }
                        }
                        else {
                            layer.msg("启动训练失败，请联系管理员！", {time:2000}) ;
                        }
                    });
                } else {
                    layer.msg(data.info, {time:2000}) ;
                }
            });
        }

        //查模型名称
        void function queryName(){
            var request = new Object();
            request.index=0;
            request.pageSize=50;
            httpRequestPost("/sprider/deeplearn/queryByPage",request,function(data){
                if (data.status == 200) {
                    $scope.$apply(function(){
                        $scope.vm.listName = data.data.objs;
                    })
                } else {
                    layer.msg(data.info, {time:2000}) ;
                }
            });
        }()

        //查询模型名称
        function modelName(){
            //解析结果参数
            var request = new Object();
            httpRequestPost("/sprider/deeplearn/query",request,function(data){
                if (data.status == 200) {
                    var list =data.data.list;
                    for(var i=0;i<list.length;i++){
                        var name = list[i].name;
                    }
                } else {
                    layer.msg(data.info, {time:2000});
                }
            }, function() {
                layer.msg("请求失败", {time:2000});
            });
        }

        //终止训练
        function trainTerminal(){
            //解析结果参数

            var request = new Object();
            httpRequestPost("/sprider/deeplearn/deeplearnTrainTerminate",request,function(data){
                if(data.status==200){
                    $scope.vm.isDisabled=false;
                    $('#train').css('background','rgb(82, 159, 246)');
                    layer.msg(data.info, {time:2000});
                    $scope.vm.trainProcess();
                }
                else{
                    layer.msg("终止请求失败", {time:2000});
                }

            });
        }

        //训练进度
        function trainProcess(){
            //解析结果参数
            var request = new Object();
            httpRequestPost("/sprider/deeplearn/deeplearnTrainProcess",request,function(data){
                if (data.status == 200) {
                    $scope.vm.showProcess(data);
                    $scope.vm.showAttenuation(data);
                } else {
                    layer.msg(data.info, {time:2000});
                }
            });
        }
        //显示百分比
        function showProcess(data){
            $(".charts").each(function(i,item){
                var all = data.data.progressBarAll;
                var now = data.data.progressBarNow*100;
                var ElapsedTime = data.data.useTime;
                if(now == "0" && $scope.vm.isDisabled == true)
                {
                    $('.use_time').html("");
                    $('.use_time').empty();
                    var str = "<div>模型构建中，请稍等<span class='dotting'></span></div>"
                    $('.use_time').append(str);
                }
                else
                {
                    $('.use_time').html(ElapsedTime);
                }
                //進度百分比
                var process = parseInt(now/all);
                if(now==0 && all==0){
                    var wi=0;
                }else{
                    var wi=process;
                }

                $(item).animate({width: wi+"%"},1000,function(){//一天内走完
                    $(this).children('d').html(wi+"%");
                });
                //刻度
                var checkPoints =data.data.checkPoints;
                var point = checkPoints.split(",");
                var scale =410/all;
                var str="";
                $('#scale').empty();
                for(var i=0;i<point.length;i++){
                    var left = point[i]*scale;
                    str +="<div style='left:"+left+"px;'><em></em><span>"+point[i]+"</span></div>"

                }
                $('#scale').append(str);
            });
        }

        //显示衰减
        function showAttenuation(data){
            dataX = data.data.x.split(",");
            dataDian = data.data.date.split(",");
            var myChart2 = echarts.init(document.getElementById('access_echart_div2'));
            myChart2.setOption(showCharts(dataX,dataDian)) ;
        }
        function showCharts(dataX,dataDian){
            return {
                title: {
                    textStyle: {
                        color: '#75777b',
                        fontStyle: 'normal',
                        fontWeight: 'normal',
                        fontFamily: 'sans-serif',
                        fontSize: 14,
                    },
                    text: 'Training Loss'
                },
                tooltip: {
                    trigger: 'axis'
                },
                animation:false,
                grid: {
                    left: '3%',
                    right: '10%',
                    bottom: '3%',
                    containLabel: true
                },
                toolbox: {
                },
                xAxis: {
                    name: 'Epoches',
                    type: 'category',
                    boundaryGap: false,
                    data: dataX
                },
                yAxis: {
                    type: 'value'
                },
                series: [
                    {
                        name:'',
                        type:'line',
                        stack: '总量',
                        data:dataDian
                    }
                ]
            }
        }
        //判断有没有在进行的深度学习训练
        function isDeeplearnTrain(){
            console.log($scope.vm.isDisabled);
            var request = new Object();
            httpRequestPost("/sprider/deeplearn/isDeeplearnTrain",request,function(data){
                if (data.status == 200) {
                    if(data.data == 1)
                    {
                        $scope.vm.isDisabled = true;
                        $('#train').css('background','#eee');
                        //train按钮变为灰色，不可点击
                    }
                    else
                    {
                        $scope.vm.isDisabled = false;//train按钮正常，可点击
                    }
                } else {
                    layer.msg("查询训练状态失败", {time:2000}) ;
                }
            });
        }
    }
]);


// Source: app/static/deepLearning/js/controller/deepLearning_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */
angular.module('deepLearning').controller('deepLearningController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams) {
        //$state.go("deepLearning");

        $scope.vm = {

        };
    }
]);


// Source: app/static/deepLearning/js/controller/deeplearnConfig_controller.js
/**
 * 深度学习-配置控制器
 * add by zhanjian 2017年7月18日19:12:16
 */
angular.module('deepLearning').controller('deeplearnConfigController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams", "$timeout",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$timeout) {
    	
    	//页面跳转
        $state.go("deepLearning.deeplearnConfig");
        
        //作用域内全局变量
        $scope.vm = {
    		editOrView : editOrView,//编辑或查看功能
            del : del,//删除功能
            search : search,//页面搜索功能
            create : create,//新建功能
            verifyRelease : verifyRelease,//新增或者编辑时，参数校验
            crawlRecordId : $stateParams.crawlRecordId,
            allowSubmit : 1, //是否允许提交
            pageSize: 10, //默认显示10页
            cell:"RNN",
            activation:"ReLu",
            regularization:"l1"

        };
        
        //编辑（isEdit：0查看 or 1编辑)
        //编辑时，页面输入内容可以编辑，存在保存按钮；查看时，页面输入内容不能编辑，隐藏保存按钮。默认从参数中传过来
        function editOrView(data, isEdit){
        	
        	//将要展示的对象赋值给作用域的全局变量。
        	$scope.vm._name = data.name;
            $scope.vm.cell = data.cell;
            $scope.vm.activation = data.activation;
            $scope.vm.regularization = data.regularization;
            $scope.vm.regularizationRate = data.regularizationRate;
            $scope.vm.layers = data.layers;
            $scope.vm.neurons = data.neurons;
            $scope.vm.learningRate = data.learningRate;
            $scope.vm.maxGradient = data.maxGradient;
            $scope.vm.dropout = data.dropout;
            $scope.vm.batchSize = data.batchSize;
            $scope.vm.isEdit = isEdit;//当isEdit = 1时，弹出层默认显示保存按钮，当不为1时，页面默认显示查看功能页面，没有保存按钮。
            
            //弹出层展示 
            var dialog = ngDialog.openConfirm({
                template: "/static/deepLearning/deeplearnConfigModify.html",
                width:"600px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {//关闭回掉事件
                    if (e === 1) {
                    	if(isEdit == 1) {//isEdit == 1可以编辑
	                        if($scope.vm.allowSubmit) {//如果参数校验通过，允许提交
	                        	//请求后台
	                            httpRequestPost("/sprider/deeplearn/modify", getParams(), function (data) {
                                    layer.msg(data.info, {time:2000});
	                                $state.reload(); //刷新页面
	                            }, function () {
	                            	layer.msg("请求失败", {time:2000})
	                            })
	                        }
                    	}
                    } 
                    //保存的同时清空数据
                    $scope.vm._name = null;
                    $scope.vm.cell = null;
                    $scope.vm.activation = null;
                    $scope.vm.regularization = null;
                    $scope.vm.regularizationRate = null;
                    $scope.vm.layers = null;
                    $scope.vm.neurons = null;
                    $scope.vm.learningRate = null;
                    $scope.vm.maxGradient = null;
                    $scope.vm.dropout = null;
                    $scope.vm.batchSize = null;
                }
            });
        }
        
        //添加用户校验
        function verifyRelease(){
            /*if($scope.vm.knowledgeId == null || $scope.vm.knowledgeId == ""){
                layer.msg("知识序号为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.knowledgeQuestion == null || $scope.vm.knowledgeQuestion == ""){
                layer.msg("处理后问题不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.knowledgeAnswer == null || $scope.vm.knowledgeAnswer == ""){
                layer.msg("处理后回答不能为空!")
                $scope.vm.allowSubmit=0;
                return 0;
            }*/
            return 1;
        }

        //初始化页面-列表 数据加载
        search();
        function search(){
            getData(1);
        }
        
        //查询记录列表
        function getData(index){
            httpRequestPost("/sprider/deeplearn/queryByPage",{
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "name" : $scope.vm.name
            },function(data){
            	if(data.status == 200) {
            		if(data.data.objs == null || data.data.objs.length <= 0) {
            			layer.msg("没有查询到任何数据", {time:2000});
            			return false;
            		}
            		$scope.vm.listData = data.data.objs;
            		$scope.vm.paginationConf = {
            				currentPage: index,//当前页
            				totalItems: data.data.total, //总条数
            				pageSize: $scope.vm.pageSize,//第页条目数
            				pagesLength: 10,//分页框数量
            		};
            		$scope.$apply();
            		return true;
            	} else {
            		layer.msg(data.info, {time:2000});
            	}
            },function(err){
            	layer.msg("请求失败", {time:2000}) ;
            });
        }

        //监听当前页面的分页栏发生变化，进行重新查询
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getData(current);
                }, 100)
            }
        },true);
        
        //删除配置
        function del(name){
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/sprider/deeplearn/del",{name:name},
                        	function(data){
                        		layer.msg(data.info, {time:2000});
                        		$state.reload(); //刷新页面
	                        },function(){
	                        	layer.msg("请求失败", {time:2000}) ;
	                        }
                        )
                    }
                }
            });
        }
        
        //新建配置按钮
        function create(){
            var dialog = ngDialog.openConfirm({
                template: "/static/deepLearning/deeplearnConfigDialog.html",
                width:"600px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {//关闭回掉发生的事件
                    if (e === 1) {
                    	if ($scope.vm.allowSubmit) {//如果允许校验通过，允许提交
                        	$scope.vm.data = getParams();//获取页面输入参数
                            httpRequestPost("/sprider/deeplearn/add", getParams(), function (data) {
                                layer.msg(data.info, {time:2000})
                                $state.reload(); //刷新页面
                            }, function (err) {
                                layer.msg("请求失败", {time:2000}) ;
                            });
                        }
                    } 
                    //输入参数清空操作
                    $scope.vm._name = null;
                    $scope.vm.cell = null;
                    $scope.vm.activation = null;
                    $scope.vm.regularization = null;
                    $scope.vm.regularizationRate = null;
                    $scope.vm.layers = null;
                    $scope.vm.neurons = null;
                    $scope.vm.learningRate = null;
                    $scope.vm.maxGradient = null;
                    $scope.vm.dropout = null;
                    $scope.vm.batchSize = null;
                }
            });
        }
        
        // 获取参数
        function getParams(){
        	return  {
                "name" : $scope.vm._name,
                "cell": $scope.vm.cell ==null? "RNN" : $scope.vm.cell,
                "activation" : $scope.vm.activation ==null? "ReLu" : $scope.vm.activation,
                "regularization" : $scope.vm.regularization ==null? "l1" :$scope.vm.regularization,
                "regularizationRate": $scope.vm.regularizationRate ==null? "0" : $scope.vm.regularizationRate,
                "layers" : $scope.vm.layers ==null? "2" :$scope.vm.layers,
                "neurons" : $scope.vm.neurons ==null? "1024" :$scope.vm.neurons,
                "learningRate" : $scope.vm.learningRate ==null? "0.0003" :$scope.vm.learningRate,
                "maxGradient" : $scope.vm.maxGradient ==null? "5.0" :$scope.vm.maxGradient,
                "dropout" : $scope.vm.dropout ==null? "0.5" :$scope.vm.dropout,
                "batchSize" : $scope.vm.batchSize ==null? "64" :$scope.vm.batchSize
            };
        }
    }
]);


// Source: app/static/deepLearning/js/controller/similarityCalculation_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */
angular.module('deepLearning').controller('similarityCalculationController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams) {
        $state.go("deepLearning.similarityCalculation");
        $scope.vm = {
            similarityCalculation:similarityCalculation,
            getResult:getResult,
            change:change,
            algorithm:'1',
            embedding:'1',
            sentence1:'',
            sentence2:'',
            words:'',
            top:'',
            result:''
        };
        //
        function getResult(){
            var words = $scope.vm.words;

            if($scope.vm.top == null ||$scope.vm.top==undefined ||$scope.vm.top==""){
                var top = "10";
            }
            else{
                var top = $scope.vm.top;
            }
            var request = new Object();
            request.words=words;
            request.top=top;
            httpRequestPost("/sprider/deeplearn/similarityWords",request,function(data){
                if (data.status == 200) {
                    if(data.data =='')

                    {
                        layer.msg("没有Similar Words", {time:2000}) ;
                    }
                    else
                    {
                        $scope.$apply(function(){
                            $scope.vm.result =data.data;
                        })
                    }
                } else {
                    layer.msg("请求失败，请重试或联系管理员！", {time:2000}) ;
                }
            });
        }

        //计算相似度
        function similarityCalculation(){
            var algorithm = $scope.vm.algorithm;
            var embedding = $scope.vm.embedding;
            var sentence1 = $scope.vm.sentence1;
            var sentence2 = $scope.vm.sentence2;
            var request = new Object();
            request.algorithm=algorithm;
            request.embedding=embedding;
            request.sentence1=sentence1;
            request.sentence2=sentence2;
            httpRequestPost("/sprider/deeplearn/similarityCalculation",request,function(data){
                if (data.status == 200) {
                    if(algorithm != "4") {
                        showTable(data);
                    } else {
                        showLines(data);
                    }
                } else {
                    layer.msg("请求失败，请重试或联系管理员！", {time:2000}) ;
                }
            });
        }

        function showLines(data){
            $("#tableWords").html("");
            var score="";
            score += "<em class='bold'>Score: </em><em>"+data.data.score+"</em>";
            $("#score").empty();
            $("#score").append(score);
            var xWords = data.data.wordHorizontal;
            var yWords = data.data.wordVertical;

            var xWord = xWords.split(',');
            var str='<tr>';
            str += "<td>"+"Matched Item(Q)"+"</td>";
            str += "<td style='text-align: left'>";
            for(var i =0;i<xWord.length;i++)
            {
                if(i%2 == 0)
                {
                    str +="<span class='p5'>"+xWord[i]+"</span>";
                }else{
                    str +="<span style='color:#CD2626' class='p5'>"+xWord[i]+"</span>";
                }
                str += " ";
            }
            str += "</td>";

            str+='</tr>';
            str+='<tr>';

            var yWord = yWords.split(',');
            str += "<td>"+"Matched Item(A)"+"</td>";
            str += "<td style='text-align: left'>";
            for(var i =0;i<yWord.length;i++)
            {
                if(i%2 == 0)
                {
                    str +="<span class='p5'>"+yWord[i]+"</span>";
                }else{
                    str +="<span style='color:#CD2626' class='p5'>"+yWord[i]+"</span>";
                }
                str += " ";
            }
            str += "</td>";
            str+='</tr>';

            var xxWords = data.data.wordsXX;
            var yyWords = data.data.wordsYY;
            var xxWordsSplit = xxWords.split(",");
            str+='<tr>';
            str += "<td>"+"Unmatched Item(A)"+"</td>";
            str += "<td style='text-align: left'>";
            for(var i =0;i<xxWordsSplit.length;i++)
            {
                if(i%2 == 0)
                {
                    str +="<span class='p5'>"+xxWordsSplit[i]+"</span>";
                }else{
                    str +="<span style='color:#CD2626' class='p5'>"+xxWordsSplit[i]+"</span>";
                }
                str += " ";
            }
            str += "</td>";
            str+='</tr>';
            var yyWordsSplit = yyWords.split(",");
            str+='<tr>';
            str += "<td>"+"Unmatched Item(Q)"+"</td>";
            str += "<td style='text-align: left'>";
            for(var i =0;i<yyWordsSplit.length;i++)
            {
                if(i%2 == 0)
                {
                    str +="<span class='p5'>"+yyWordsSplit[i]+"</span>";
                }else{
                    str +="<span style='color:#CD2626' class='p5'>"+yyWordsSplit[i]+"</span>";
                }
                str += " ";
            }
            str += "</td>";
            str+='</tr>';
            $("#tableWords").append(str);
        }

        //显示表格
        function showTable(data){
            $("#tableWords").html("");
            var score="";
            score += "<em class='bold'>Score: </em><em>"+data.data.score+"</em>";
            $("#score").empty();
            $("#score").append(score);
            var xWords =data.data.wordVertical ;
            var yWords =data.data.wordHorizontal;
            var xWord = xWords.split(",");

            //第一行
            var str='<tr>';
            str += "<td>"+" "+"</td>";
            for(var i=0;i<xWord.length;i++)
            {
                str += "<td>"+xWord[i]+"</td>";
            }
            str+='</tr>';

             //计算因子值
            var nums=data.data.boxValue;
            var mnums =[];
            for(var ii=0;ii<nums.length;ii++){
                var num=nums[ii].split(',');
                for (var jj=0;jj<num.length;jj++){
                    if(num[jj]<0){
                        num[jj]= Math.ceil(num[jj]);
                    }
                    mnums.push(num[jj]);
                }
            }
            var max=Math.max.apply(null, mnums);
            console.log(max);
            //第一行后面的行
            var yWord = yWords.split(",");
            for(var i=0;i<yWord.length;i++)
            {
                var boxs = data.data.boxValue[i];

                var box = boxs.split(",");
                str+='<tr>';
                str += "<td>"+yWord[i]+"</td>";
                for(var m=0;m<box.length;m++) {
                    var fac=Math.round(255- box[m]*Math.floor(255/max));
                    console.log(fac);
                    // str += "<td class='numdis' style='background-color: rgb(255,25,255)'>" + box[m] + "</td>";
                    str += "<td class='numdis' style='background-color:rgb("+fac+','+fac+','+fac+")'></td>"
                    // "+ box[m] +"
                }
                str+='</tr>';
            }

            $("#tableWords").append(str);
        }

        //根据最大值计算因子值
        function factors(nums) {
            var mnums =[];
            for(var ii=0;ii<nums.length;ii++){
                var num=nums[ii].split(',');
                for (var jj=0;jj<num.length;jj++){
                    mnums.push(num[jj]);
                }
            }
            var max=Math.max.apply(null, mnums);
            return max;
        }
        function change(){
            var temp = $scope.vm.sentence1;
            $scope.vm.sentence1 = $scope.vm.sentence2;
            $scope.vm.sentence2=temp;
        }
    }
]);



// Source: app/static/functionalTesting/js/controller/batchTest_controller.js
/**
 * Created by mileS on 2017/3/23
 * For  批量测试
 */
angular.module('functionalTestModule').controller('batchTestController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","knowledgeAddServer",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,knowledgeAddServer) {
        $scope.vm = {
            applicationId : $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),
            deleteQuestion : deleteQuestion,
            uploadQuestion : uploadQuestion,
            startUp : startUp,
            start : start ,
            stopTest : stopTest ,
            batchNumberId : "" ,
            jumpD:jumpD,
            pageSize : 5,
            listData :[],           //table 数据
            listDataTotal : 0 ,      //共几条
          //  listDataLength : '',
            paginationConf : '',     //分页条件
            selectAllCheck : false,
            selectAll : selectAll,
            selectSingle : selectSingle,
            deleteIds:[],
            searchFile : searchFile,
            searchType : 0,
            selectInput :'',
            upload : false,  // 上传命令
            //-----------------------------渠道   服务
            listService:[],
            serviceId : "" ,
            channel:"",
            channelList : [] ,
            getService : getService
            //------------------------------渠道   服务end


        };
        //获取渠道
        knowledgeAddServer.getChannels({ "applicationId" : APPLICATION_ID},
            function(data) {
                if(data.data){
                    $scope.vm.channelList = data.data;
                }
            }, function(error) {
                console.log(error);
                //layer.msg("获取渠道失败，请刷新页面");
            });
        //页面初始化加载已发布服务
        getService();
        function getService(){
            httpRequestPost("/api/application/service/listServiceByApplicationId",{
                applicationId:APPLICATION_ID,
            },function(data){
                if(data.status == 10000){
                    $scope.vm.listService = data.data;
                    $scope.vm.serviceId = data.data[0].serviceId ;
                    $scope.$apply();
                }else if(data.status == 10005) {
                    //layer.msg("当前应用下没有发布服务，请发布服务后进行测试");
                }
            },function(){
                console.log('请求失败');
            })
        }
        searchFile(1) ;
        //查询
        function searchFile(index){
            httpRequestPost("/api/application/batchTest/findByValue",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
                applicationId:APPLICATION_ID,
                batchStatusId :$scope.vm.searchType,
                batchName: $scope.vm.selectInput,
                channel: $scope.vm.selectInput,
                batchOperator: $scope.vm.selectInput
            },function(data){
                if(data.status == 10005){
                   layer.msg("查询到记录为空",{time:1000});
                    $scope.vm.listData = "";
                    $scope.vm.listDataTotal = 0;
                    $scope.vm.paginationConf = {
                        currentPage: index,//当前页
                        totalItems: 0, //总条数
                        pageSize: 0,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                }else{
                    $scope.vm.listData = data.data.batchTestList;
                    $scope.vm.listDataTotal = data.data.total;
                    // $scope.vm.listDataLength = data.data.total;
                    $scope.vm.paginationConf = {
                        currentPage: index,//当前页
                        totalItems: data.data.total, //总条数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                }
                $scope.$apply();
            },function(){
                console.log('请求失败');
            })  ;
        }

        function jumpD(url,id){
            $state.go(url,{batchNumberId:id});
        }

        //分页定时器
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    initBatchTest();
                    searchFile(current);
                }, 100);
            }
        },true);


        //批量上传
        function uploadQuestion(callback){

            //var timer = $timeout(function(){
            //    var dialog = ngDialog.openConfirm({
            //        template: "/static/functionalTesting/batchUploadDialog.html",
            //        scope: $scope,
            //        closeByDocument: false,
            //        closeByEscape: true,
            //        showClose: true,
            //        backdrop: 'static',
            //        preCloseCallback: function (e) {    //关闭回掉
            //            if (e === 1) {
            //                $scope.vm.upload = true
            //            } else {
            //
            //            }
            //        }
            //    });
            //},350)
        }
        //删除
        function deleteQuestion(callback){
            if($scope.vm.deleteIds.length == 0){
                layer.msg("请选择要删除的文件！",{time:1000});
                return;
            }
            var dialog = ngDialog.openConfirm({
                template: "/static/functionalTesting/batchTestDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/api/application/batchTest/batchDeleteByIds",{
                            applicationId :  APPLICATION_ID,
                            ids :  $scope.vm.deleteIds
                        },function(data){
                            if(data.status == 10013){
                                initBatchTest();
                                //$scope.vm.selectAllCheck = false;
                                $state.reload();
                                layer.msg("删除成功",{time:1000});
                            }else{
                                layer.msg("删除失败");
                            }
                        },function(){
                            console.log('请求失败');
                        });
                    }
                }
            });
        }
        //启动
        function startUp(id){
            if($scope.vm.serviceId) {
                $scope.vm.batchNumberId = id ;
                var dialog = ngDialog.openConfirm({
                    template: "/static/functionalTesting/startUpDialog.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                          $scope.vm.channel = "" ;
                          //$scope.vm.serviceId = vm.listService[0].serviceId ;
                    }
                });
            }else{
                layer.msg("当前应用下没有发布服务，请发布服务后进行测试");
            }

        }
        function start(){
            var id = $scope.vm.batchNumberId ;
            var channelId = angular.copy($scope.vm.channel) ;
            if(!$scope.vm.channel){
                layer.msg("选择渠道")
            }else{
                var name ;
                angular.forEach($scope.vm.channelList,function(item){
                    if(item.channelCode == $scope.vm.channel){
                        return name = item.channelName  ;
                    }
                }) ;
                httpRequestPost("/api/application/batchTest/getChannelAndUserName", {
                    batchNumberId:  id,
                    userId: $scope.vm.userId,
                    //channel:$scope.vm.channel,
                    channelName : name,
                    channel:channelId,
                    applicationId:APPLICATION_ID,
                    serviceId:$scope.vm.serviceId,
                }, function (data) {
                    if(data.status == 20002){
                        layer.msg(data.data,{time:1000});
                    }
                    if(data.status == 10018){
                        searchFile($scope.vm.paginationConf.currentPage);
                        startTest(id,name,channelId);
                    }
                }, function () {
                    console.log('请求失败');
                },"","",60000);
                ngDialog.closeAll() ;
            }
        }

        function stopTest(id){
            httpRequestPost("/api/application/batchTest/startTest", {
                batchNumberId: id,
                batchStatusId : 21007
            }, function (data) {
                console.log(data);
                if(data.status=10000){
                    searchFile($scope.vm.paginationConf.currentPage) ;
                }
            });
        }

        function startTest(id,name,channelId){
            httpRequestPost("/api/application/batchTest/startTest", {
                batchNumberId: id,
                userId: $scope.vm.userId,
                channelName : name ,
                channel:channelId,
                applicationId:APPLICATION_ID,
                serviceId:$scope.vm.serviceId,
                //serviceId:22
            }, function (data) {
                console.log(data);
                if(data.status=10000){
                    searchFile($scope.vm.paginationConf.currentPage) ;
                }
            }, function () {
                //layer.msg("请求失败");
            },"","",3600000);
        }

        function selectAll(){
            if(!$scope.vm.selectAllCheck){
                $scope.vm.selectAllCheck = true;
                $scope.vm.deleteIds = [];
                angular.forEach($scope.vm.listData,function(item){
                    $scope.vm.deleteIds.push(item.batchNumberId);
                });
            }else{
                $scope.vm.selectAllCheck = false;
                $scope.vm.deleteIds = [];
            }
        }
        function selectSingle(id){
            if($scope.vm.deleteIds.inArray(id)){
                $scope.vm.deleteIds.remove(id);
                $scope.vm.selectAllCheck = false;
            }else{
                $scope.vm.deleteIds.push(id);

            }
            if($scope.vm.deleteIds.length==$scope.vm.listData.length){
                $scope.vm.selectAllCheck = true;
            }
            console.log( $scope.vm.deleteIds);
        }

        //
        function initBatchTest(){
            $scope.vm.deleteIds = [] ;
            $scope.vm.selectAllCheck = false;
        }
    }
]);
// Source: app/static/functionalTesting/js/controller/functionalTest_controller.js

/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

          
angular.module('functionalTestModule').controller('functionalTestController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog) {
        //$state.go("functionalTest.questionTest",{userPermission:$stateParams.userPermission});
        $scope.vm = {

        };


    }
]);
// Source: app/static/functionalTesting/js/controller/participleResult_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('functionalTestModule').controller('participleResultController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","knowledgeAddServer",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore, knowledgeAddServer) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        //console.log($stateParams) ;
        $scope.vm = {
            pageSize : 5,            //每页条数；
            paginationConf : '',     //分页条件
            paginationConf1 : '',     //分页条件
            applicationId : $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),
            batchNumberId:$stateParams.batchNumberId,



        };
        //分页定时器
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    initBatchTest();
                }, 100);
            }
        },true);





    }
]);
// Source: app/static/functionalTesting/js/controller/participle_controller.js
/**
 * Created by mileS on 2017/3/23
 * For  批量测试
 */
angular.module('functionalTestModule').controller('participleController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","knowledgeAddServer",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,knowledgeAddServer) {
        $scope.vm = {
            applicationId : $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),

            pageSize : 5,
            listData :[],           //table 数据
            listDataTotal : 0 ,      //共几条
          //  listDataLength : '',
            paginationConf : '',     //分页条件
            selectAllCheck : false,
            selectAll : selectAll,
            selectSingle : selectSingle,
            deleteIds:[],




        };



        //分页定时器
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    initBatchTest();
                }, 100);
            }
        },true);




        function selectAll(){
            if(!$scope.vm.selectAllCheck){
                $scope.vm.selectAllCheck = true;
                $scope.vm.deleteIds = [];
                angular.forEach($scope.vm.listData,function(item){
                    $scope.vm.deleteIds.push(item.batchNumberId);
                });
            }else{
                $scope.vm.selectAllCheck = false;
                $scope.vm.deleteIds = [];
            }
        }
        function selectSingle(id){
            if($scope.vm.deleteIds.inArray(id)){
                $scope.vm.deleteIds.remove(id);
                $scope.vm.selectAllCheck = false;
            }else{
                $scope.vm.deleteIds.push(id);

            }
            if($scope.vm.deleteIds.length==$scope.vm.listData.length){
                $scope.vm.selectAllCheck = true;
            }
            console.log( $scope.vm.deleteIds);
        }

        //
        function initBatchTest(){
            $scope.vm.deleteIds = [] ;
            $scope.vm.selectAllCheck = false;
        }
    }
]);
// Source: app/static/functionalTesting/js/controller/questionTest_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
angular.module('functionalTestModule').controller('questionTestController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            testTitle : '',
            question : '',
            applicationId : $cookieStore.get('applicationId'),
            comparisonTextArray:[],
            asklength :0,
            answerRes : '',
            emptyInput : emptyInput,
            //addArr : addArr,
            test : test,
            check : check,
            show_tit:false

        };
        //比较测试回答有没有重的词；
        function check(val,matchedWordTagResults){
            var allLen = matchedWordTagResults.length ;
            angular.forEach(matchedWordTagResults,function (tag) {
                var len = tag.tagList.length ;
                angular.forEach(tag.tagList,function (value) {
                    if(value == val){
                        len-=1 ;
                    }
                }) ;
                if(len != tag.tagList.length){
                    allLen-=1 ;
                }
            }) ;

            if(allLen==matchedWordTagResults.length){
                return false ;
            }else{
                return true ;
            }
        }
        //问法测试
        function test(){

            $scope.vm.comparisonTextArray=$scope.vm.question.split("\n");         //换行;
            console.log($scope.vm.comparisonTextArray);

            if($scope.vm.testTitle==''){
                layer.msg('请输入标准问法！');
                return;
            }
            if($scope.vm.question==''){
                layer.msg('请输入测试问法！');
                return;
            }
            if($scope.vm.question==''&& $scope.vm.testTitle==''){
                layer.msg('请输入标准问法和测试问法！');
                return;
            }

            httpRequestPost("api/application/questionTest/passageway",{
                "applicationId": $scope.vm.applicationId,
                "title": $scope.vm.testTitle,
                "comparisonTextArray": $scope.vm.comparisonTextArray
            },function(data){
                $scope.vm.show_tit=true;
                //$scope.vm.botRoot = data.data;
                console.log(data);
                if(data.data.status == 500){
                    layer.msg(data.data.data,{time:1000});
                }
                $scope.vm.answerRes=data.data.data;
                $scope.$apply();

            },function(){
                //layer.msg("err or err")
            });
        }
        //清空问法；
        function emptyInput(){
            $scope.vm.testTitle='';
            $scope.vm.question='';
            $scope.vm.comparisonTextArray=[];
            $scope.vm.answerRes="";
            $scope.vm.show_tit=false;

        }
    }
]);
// Source: app/static/functionalTesting/js/controller/sessionTest_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
angular.module('functionalTestModule').controller('sessionTestController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","knowledgeAddServer",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore,knowledgeAddServer) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            userId: new Date().getTime(),
            title:"",
            testAsking : "" ,
            listService:[],
            channel:"",
            channelList : [] ,
            listDimension:[],
            listDimensionUpBack : "",
            dimensionArray : [] ,
            //==============================================方法
            getService:getService,
            serviceId : "" ,
            test : test,
            reset : reset,
            result:'',
            question : '',
            txtFocus : txtFocus
        };

        //獲取维度
        knowledgeAddServer.getDimensions({ "applicationId" : $scope.vm.applicationId},
            function(data) {
                console.log( $scope.vm.applicationId) ;
                if(data.data){
                    console.log(data.data);
                    $scope.vm.listDimension = data.data;
                    $scope.vm.listDimensionUpBack = {"id":[],"name":[]} ;
                    angular.forEach(data.data,function(item){
                        $scope.vm.listDimensionUpBack.id.push(item.dimensionId) ;
                        $scope.vm.listDimensionUpBack.name.push(item.dimensionName)
                    }) ;
                }
            }, function(error) {
                console.log(error);
                //layer.msg("获取维度失败，请刷新页面");
            });
        //获取渠道
        knowledgeAddServer.getChannels({ "applicationId" : $scope.vm.applicationId},
            function(data) {
                if(data.data){
                    $scope.vm.channelList = data.data;
                    $scope.vm.channel=data.data[0].channelCode ;        //初始化渠道为第一个选项；
                }
            }, function(error) {
                console.log(error);
                //layer.msg("获取渠道失败，请刷新页面");
            });
        //页面初始化加载已发布服务
        getService();
        function getService(){
            httpRequestPost("/api/application/service/listServiceByApplicationId",{
                applicationId:$scope.vm.applicationId,
            },function(data){
                if(data.status == 10000){
                    $scope.vm.listService = data.data;
                    $scope.vm.serviceId = data.data[0].serviceId ;
                    $scope.$apply();
                }else if(data.status == 10005) {
                    //layer.msg("当前应用下没有发布服务，请发布服务后进行测试")
                }
            },function(){
                //layer.msg("请求失败");
                console.log('请求请求失败');
            })
        }
        //
       function test(){
           if($scope.vm.serviceId){
               if($scope.vm.testAsking==''){
                   layer.msg('请输入测试问题!',{time:1000});
                   return ;
               }
               if($scope.vm.channel==''){
                   layer.msg('请选择渠道!',{time:1000});
                   return;
               }
               httpRequestPost("/api/application/chatTest/passageway",{
                   applicationId:$scope.vm.applicationId,
                   userId:$scope.vm.userId,
                   content:$scope.vm.testAsking,
                   channel:$scope.vm.channel,
                   dimensionArray:$scope.vm.dimensionArray,
                   serviceId:$scope.vm.serviceId
                   //serviceId:22
               },function(data){
                   console.log(data);
                   if(data.data.status == 500){
                       layer.msg(data.data.data,{time:1000});
                   }
                   $scope.vm.result=data.data.data;
                   $scope.vm.question= $scope.vm.testAsking;

                   $scope.$apply();

               },function(){

               })
           }else{
               layer.msg("当前应用下没有发布服务，请发布服务后进行测试",{time:1000});
           }
       }

        //重置
        function reset(){
            $scope.vm.testAsking='';
            $scope.vm.question='';
            $scope.vm.result='';

            $scope.vm.channel= $scope.vm.channelList[0].channelCode ;
            $scope.vm.listDimension =  angular.copy($scope.vm.listDimensionUpBack) ;
            $scope.vm.dimensionArray =  {"id":[],"name":[]};
            console.log($scope.vm.listDimension);
        }
        //文本域自动获取焦点；
        function txtFocus(){
            $('.chat_text_txta').focus();
        }
        txtFocus();

    }
]);
// Source: app/static/functionalTesting/js/controller/testResult_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('functionalTestModule').controller('testResultController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore","knowledgeAddServer",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore, knowledgeAddServer) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        //console.log($stateParams) ;
        $scope.vm = {
            editQuestion : editQuestion,
            pageSize : 5,            //每页条数；
            paginationConf : '',     //分页条件
            paginationConf1 : '',     //分页条件
            applicationId : $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),
            batchNumberId:$stateParams.batchNumberId,
            showData : showData,
            listData :[],           //table 数据
            listDataTotal : 0 ,      //共几条
            searchFile : searchFile,
            selectInput :'',
            matchCondition :'0',
            answerCondition :'0',
            selectAllCheck : false,   //checkbox默认你状态；
            selectAll : selectAll,
            selectSingle : selectSingle,
            batchTest : batchTest,
            deleteIds :[],
			testDialog :testDialog,
            listService:[],
            serviceId : "" ,
            getService : getService,
            exportExcel:exportExcel,
            exportEasy:exportEasy,
            allowSubmit : 1, //是否允许提交
            verifyRelease:verifyRelease, // 校验方法
        //  弹框 参数
            editTitle : "" ,
            editKnow :  "",
            editChannel : '',
            channelList : ""  //所有渠道
        };
        function exportEasy(){
            httpRequestPost("/api/application/testResult/exportEasy",{
                batchNumberId:$stateParams.batchNumberId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    window.open("/api/application/detail/downloadExcel?fileName="+ data.data);
                }
                console.log()

            },function(err){})
        }

        //获取维度
        knowledgeAddServer.getChannels({ "applicationId" : $scope.vm.applicationId},
            function(data) {
                if(data.data){
                    $scope.vm.channelList = data.data
                }
            }, function(error) {
                console.log(error);
                //layer.msg("获取渠道失败，请刷新页面")
            });
        // 389249262623391744
        showData(1);
        //加载表格
        function showData(index){
            //console.log(applicationId);
            httpRequestPost("/api/application/testResult/listBatchFileByPage",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,  
               // batchNumberId:"389249262623391744"
                 batchNumberId:$scope.vm.batchNumberId
            },function(data){
                console.log(data);
                if(data.status == 10005){
                    layer.msg("查询到记录为空",{time:1000});
                    return;
                }else{

                    $scope.vm.listData = data.data.testResultList;
                    $scope.vm.listDataTotal = data.data.total;
                    // $scope.vm.listDataLength = data.data.total;
                    $scope.vm.paginationConf = {
                        currentPage: index,//当前页
                        totalItems: data.data.total, //总条数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                    $scope.vm.paginationConf1 = "" ;
                    $scope.$apply();
                }
            },function(){
                //layer.msg("请求失败");
                console.log('请求失败');
            })  ;
        }

        //分页定时器
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    showData(current);
                    searchFile(current);
                }, 0);
            }
        },true);

        var timeout ;
        $scope.$watch('vm.paginationConf1.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    searchFile(current);
                }, 0);
            }
        },true);

        //验证
        function verifyRelease(){
            if($scope.vm.editTitle == null || $scope.vm.editTitle == ""){
                layer.msg("测试问法不能为空",{time:1000});
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.editKnow == null || $scope.vm.editKnow == ""){
                layer.msg("知识标题不能为空",{time:1000});
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.editTitle.length > 50){
                layer.msg("测试问法长度不能超过50个字符",{time:1000});
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.editKnow.length > 50){
                layer.msg("知识标题长度不能超过50个字符",{time:1000});
                $scope.vm.allowSubmit=0;
                return 0;
            }
            var b = /^[\w+\u4e00-\u9fa5]+$/;     //限制特殊字符正则表达式
            if(!b.test($scope.vm.editTitle)){
                layer.msg("测试问法不能包含特殊字符!",{time:1000});
                return 0;
            };
            if(!b.test($scope.vm.editKnow)){
                layer.msg("知识标题不能包含特殊字符!",{time:1000});
                return 0;
            }
            return 1;
        }

        //修改
        function editQuestion(params){
            console.log(params)
            $scope.vm.editTitle = params.possibleKnowledge;
            $scope.vm.editKnow = params.knowledgeTitle;
            $scope.vm.editChannel=params.channel;                 //130;
            var dialog = ngDialog.openConfirm({
                template: "/static/functionalTesting/testResultDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if($scope.vm.allowSubmit) {
                            var channelName;
                            angular.forEach($scope.vm.channelList, function (item) {
                                if (item.channelCode == $scope.vm.editChannel) {
                                    channelName = item.channelName;
                                }
                            });
                            console.log(channelName);
                            httpRequestPost("/api/application/testResult/updateKnowledge", {
                                possibleKnowledge: $scope.vm.editTitle,
                                knowledgeTitle: $scope.vm.editKnow,
                                channel: $scope.vm.editChannel,
                                testResultId: params.testResultId,
                                batchNumberId:$scope.vm.batchNumberId,
                                channelName: channelName
                            }, function (data) {
                                console.log(data);
                                if(data.status == 10002){
                                    layer.msg("该测试问法已经存在，请重新添加!",{time:1000})
                                }else if (data.status == 10000) {
                                    layer.msg("修改成功",{time:1000});
                                    showData($scope.vm.paginationConf.currentPage);
                                }else if(data.status == 10004){
                                    //layer.msg("修改失败");
                                    console.log("修改失败");
                                }
                                $scope.$apply();
                            }, function () {
                                //layer.msg("修改失败");
                                console.log("修改失败");
                            });
                        }
                        //$state.reload();
                    } else {

                    }
                }
            });
        }
        //查询
        function searchFile(index){
            $scope.vm.paginationConf.totalItems= 0
            //alert(1);
            httpRequestPost("/api/application/testResult/searchKnowledge",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
                applicationId:$scope.vm.applicationId,
                batchNumberId : $scope.vm.batchNumberId,             //当前文件id
                answerType : $scope.vm.matchCondition,
                answerCondition : $scope.vm.answerCondition,
                possibleKnowledge : $scope.vm.selectInput,
                knowledgeTitle : $scope.vm.selectInput
            },function(data){
                console.log(data);
                if(data.status == 10014){
                    $scope.vm.listData = data.data.testResultList;
                    $scope.vm.listDataTotal = data.data.total;
                    // $scope.vm.listDataLength = data.data.total;

                    $scope.vm.paginationConf1 = {
                        currentPage: index,//当前页
                        totalItems: data.data.total, //总条数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                }else if(data.status == 10005){
                    $scope.vm.listData = "";
                    $scope.vm.listDataTotal = 0;
                    layer.msg("没有查询到记录!",{time:1000})
                    $scope.vm.paginationConf1 = {
                        currentPage: index,//当前页
                        totalItems: 0, //总条数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                }
                $scope.$apply();
            },function(){
               // layer.msg("请求失败");
                console.log("修改失败");
            })  ;
        }

        //导出功能
        function exportExcel(){
            httpRequestPost("/api/application/testResult/export",{
                batchNumberId:$stateParams.batchNumberId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    window.open("/api/application/detail/downloadExcel?fileName="+ data.data);
                }
                console.log()

            },function(err){})
        }

        //全选
        function selectAll(){
            if(!$scope.vm.selectAllCheck){
                $scope.vm.selectAllCheck = true;
                $scope.vm.deleteIds = [];
                angular.forEach($scope.vm.listData,function(item){
                    $scope.vm.deleteIds.push(item.testResultId);
                });
            }else{
                $scope.vm.selectAllCheck = false;
                $scope.vm.deleteIds = [];
            }
            //console.log( $scope.vm.deleteIds);
        }
        //单选
        function selectSingle(id){
            if($scope.vm.deleteIds.inArray(id)){
                $scope.vm.deleteIds.remove(id);
                $scope.vm.selectAllCheck = false;
            }else{
                $scope.vm.deleteIds.push(id);
            }
            if($scope.vm.deleteIds.length==$scope.vm.listData.length){
                $scope.vm.selectAllCheck = true;
            }
            //console.log( $scope.vm.deleteIds);
        }
        //批量测试
        function batchTest(){
            if($scope.vm.serviceId) {
                //$scope.vm.batchNumberId = id;
                httpRequestPost("/api/application/testResult/batchTest",{
                    applicationId :  $scope.vm.applicationId,
                    userId :  $scope.vm.userId,
                    ids :  $scope.vm.deleteIds,
                    serviceId : $scope.vm.serviceId,            //服务id,每条都一样；
                    //serviceId : 22
                    batchNumberId : $scope.vm.batchNumberId
                },function(data){
                    console.log( $scope.vm.deleteIds);
                    if(data.status == 20009){
                        $scope.vm.selectAllCheck = false;
                        $state.reload();
                        layer.msg("测试成功",{time:1000});
                    }else{
                        //layer.msg("测试失败");
                        console.log("测试失败");
                    }
                },function(){
                   // layer.msg("请求失败");
                    console.log("测试失败");
                });
            }else{
                layer.msg("当前应用下没有发布服务，请发布服务后进行测试",{time:1000});
            }


        }
        //测试弹窗
        function testDialog(){
            if($scope.vm.deleteIds.length == 0){
                layer.msg("请选择要测试的知识！",{time:1000});
                return;
            }
            var dialog = ngDialog.openConfirm({
                template: "/static/functionalTesting/testDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                   if(e == 1){
                       batchTest();
                   }
                    //$scope.vm.serviceId = vm.listService[0].serviceId ;
                }
            });

        }
        //页面初始化加载已发布服务
        getService();
        function getService(){
            httpRequestPost("/api/application/service/listServiceByApplicationId",{
                applicationId:$scope.vm.applicationId,
            },function(data){
                if(data.status == 10000){
                    $scope.vm.listService = data.data;
                    $scope.vm.serviceId = data.data[0].serviceId ;
                    $scope.$apply();
                }else if(data.status == 10005) {
                    //layer.msg("当前应用下没有发布服务，请发布服务后进行测试");
                }
            },function(){
               // layer.msg("请求失败");
                console.log('请求失败');
            })
        }
    }
]);
// Source: app/static/functionalTesting/js/controller/viewDetails_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('functionalTestModule').controller('viewDetailsController', [
    '$scope',"localStorageService","$state","$timeout","$stateParams","ngDialog","$cookieStore",
    function ($scope,localStorageService,$state, $timeout,$stateParams,ngDialog,$cookieStore) {
        console.log($stateParams)
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            pageSize:5,
            batchNumberId:$stateParams.batchNumberId,
            applicationId : $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),
            listData:[],
            listDataTotal:0,
            possibleKnowledge:"",
            knowledgeTitle:"",
            value:"",
            allowSubmit:1, //是否允许提交
            //-----------------------------------------方法
            getData:getData,
            addKnow : addKnow,
            editKnow : editKnow,
            deleteKnow:deleteKnow,
            verifyRelease:verifyRelease, // 校验方法
            search:search,
            exportExcel:exportExcel
        };

        getData(1);
        function getData(index){
            httpRequestPost("/api/application/detail/getDetailList",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
                applicationId:$scope.vm.applicationId,
                batchNumberId:$stateParams.batchNumberId
            },function(data){
                console.log(data);
                $scope.vm.listData = data.data.detailList;
                $scope.vm.listDataTotal = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 8//分页框数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败",{time:1000});
            })  ;
        }

        function verifyRelease(){
            if($scope.vm.possibleKnowledge == null || $scope.vm.possibleKnowledge == ""){
                layer.msg("测试问法不能为空!",{time:1000});
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.knowledgeTitle == null || $scope.vm.knowledgeTitle == ""){
                layer.msg("知识标题不能为空!",{time:1000});
                $scope.vm.allowSubmit=0;
                return 0;
            }
            var b = /^[\w+\u4e00-\u9fa5]+$/;     //限制特殊字符正则表达式
            if(!b.test($scope.vm.possibleKnowledge)){
                layer.msg("测试问法不能包含特殊字符!",{time:1000});
                return 0;
            };
            if(!b.test($scope.vm.knowledgeTitle)){
                layer.msg("知识标题不能包含特殊字符!",{time:1000});
                return 0;
            }
            if($scope.vm.possibleKnowledge.length > 50){
                layer.msg("测试问法长度不能超过50个字符!",{time:1000});
                return 0;
            }
            if($scope.vm.knowledgeTitle.length > 50){
                layer.msg("知识标题长度不能超过50个字符!",{icon:2,time:1000});
                return 0;
            }
            return 1;
        }

        function addKnow(){
            var dialog = ngDialog.openConfirm({
                template: "/static/functionalTesting/viewDetailsDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if($scope.vm.allowSubmit){
                            httpRequestPost("/api/application/detail/addKnowledge", {
                                applicationId: $scope.vm.applicationId,
                                batchNumberId: $stateParams.batchNumberId,
                                possibleKnowledge: $scope.vm.possibleKnowledge,
                                knowledgeTitle: $scope.vm.knowledgeTitle
                            }, function (data) {
                                //刷新页面
                                $state.reload();
                                if (data.status == 10012) {
                                    layer.msg("该测试问法已经存在，请重新添加!",{time:1000})
                                } else if (data.status == 10011) {
                                    layer.msg("添加成功!",{time:1000});
                                } else {
                                    //layer.msg("添加失败!");
                                    console.log("添加失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败");
                                console.log("请求失败");
                            })
                        }
                        $scope.vm.possibleKnowledge = "";
                            $scope.vm.knowledgeTitle = ""
                    } else {
                        $scope.vm.possibleKnowledge = "";
                            $scope.vm.knowledgeTitle = ""
                    }
                }
            });
        }
        function editKnow(data){
            $scope.vm.detailId = data.detailId;
            $scope.vm.possibleKnowledge = data.possibleKnowledge;
            $scope.vm.knowledgeTitle = data.knowledgeTitle;
            var dialog = ngDialog.openConfirm({
                template: "/static/functionalTesting/viewDetailsEditDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        if($scope.vm.allowSubmit){
                            httpRequestPost("/api/application/detail/updateKnowledge", {
                                possibleKnowledge: $scope.vm.possibleKnowledge,
                                knowledgeTitle: $scope.vm.knowledgeTitle,
                                detailId:$scope.vm.detailId,
                                batchNumberId: $stateParams.batchNumberId,
                            }, function (data) {
                                //刷新页面
                                if (data.status == 10002) {
                                    layer.msg("该测试问法已经存在，请重新添加!",{time:1000})
                                } else if (data.status == 10018) {
                                    $state.reload();
                                    layer.msg("修改成功!",{time:1000});
                                } else {
                                    //layer.msg("修改失败!");
                                    console.log("修改失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败");
                                console.log("请求失败");
                            })
                        }
                    } else {
                        $scope.vm.possibleKnowledge = "";
                        $scope.vm.knowledgeTitle = "";
                    }
                }
            });
        }

        function deleteKnow(detailId){
            var dialog = ngDialog.openConfirm({
                template: "/static/functionalTesting/batchTestDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                            httpRequestPost("/api/application/detail/deleteById", {
                                detailId:detailId
                            }, function (data) {
                                //刷新页面
                                $state.reload();
                                if (data.status == 10013) {
                                    layer.msg("删除成功!",{time:1000})
                                } else if (data.status == 10014) {
                                    //layer.msg("删除失败!");
                                    console.log("删除失败!");
                                }
                            }, function () {
                                //layer.msg("请求失败")
                                console.log("请求失败");
                            })
                    }
                }
            });
        }

        function search(index){
            httpRequestPost("/api/application/detail/findKnowledge",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
                applicationId:$scope.vm.applicationId,
                batchNumberId:$stateParams.batchNumberId,
                possibleKnowledge:$scope.vm.value,
                knowledgeTitle:$scope.vm.value
            },function(data){
                console.log(data);
                if(data.status == 10005){
                    layer.msg("查询到记录为空",{time:1000});
                    $scope.vm.listData = "";
                    $scope.vm.listDataTotal = 0;
                    $scope.vm.paginationConf = {
                        currentPage: 0,//当前页
                        totalItems: 0, //总条数
                        pageSize: $scope.vm.pageSize,//第页条目数
                        pagesLength: 8//分页框数量
                    };
                    $scope.$apply();
                }
                $scope.vm.listData = data.data.detailList;
                $scope.vm.listDataTotal = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 8//分页框数量
                };
                $scope.$apply();
            },function(){
                //layer.msg("请求失败");
                console.log("请求失败");
            })  ;
        }

        /**
         * 知识导出
         */
        function exportExcel(){
            httpRequestPost("/api/application/detail/export",{
                batchNumberId:$stateParams.batchNumberId
            },function(data){
                console.log(data)
                if(data.status==500){
                    //layer.msg("导出失败")
                    console.log("导出失败");
                }else{
                    window.open("/api/application/detail/downloadExcel?fileName="+ data.data);
                }
                console.log();

            },function(err){})

        }

        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    getData(current);
                }, 0);
            }
        },true);
        
    }
]);
// Source: app/static/functionalTesting/js/directive/batchTest.js
/**
 * Created by miles on 2017/5/27.
 *
 * webuploader  ====》》  指令
 */
knowledge_static_web.directive("batchTestOnly", ["$parse", "ngDialog", "$cookieStore", "$state", "$timeout",
    function ($parse, ngDialog, $cookieStore, $state, $timeout) {
        return {
            //restrict: 'EA',
            scope: {
                accept: '=',
                server: '=', //url
                type: "=",   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
                isAuto: "=",
                isUpload: "=",
                factor : "=",

            },
            template: '<div class="$container">' +
            '<span  id="picker" style="">请添加文件</span>' +
            '</div>'
            ,
            link: function (scope, element, attrs) {
                // console.log(1) ;
                $timeout(function () {
                    var uploader = WebUploader.create({
                        auto: true, // 选完文件后，是否自动上传
                        // swf文件路径
                        //sendAsBinary:true, //指明使用二进制的方式上传文件
                        swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                        formData: {
                            "userId": $cookieStore.get("userId"),
                            "applicationId": $cookieStore.get("applicationId")
                        },   // 上传参数
                        // 文件接收服务端。
                        server: scope.server,
                        accept: {
                            title: 'file',
                            extensions: 'xls,xlsx',
                            mimeTypes: 'file/xls,file/xlsx'
                        },
                        // 选择文件的按钮。可选。
                        // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                        pick: {
                            id: '#picker',
                            multiple: false
                        },
                        //不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                        resize: false,
                        chunked: true,  // 分片上传大文件
                        chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                        //thread: 100,// 最大上传并发数
                        // 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                        disableGlobalDnd: true,
                        fileNumLimit: 10,
                        fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                        fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
                    });
                    console.log(angular.element(".webuploader-pick")) ;
                    angular.element(".webuploader-pick").addClass("btn1").css({"background":"#3e91e7","lineHeight":"20px"}) ;
                    uploader.on( 'fileQueued', function( file ) {

                        console.log(file + "file  add success");

                    });
                    //当validate不通过时，会以派送错误事件的形式通知
                    uploader.on('error', function (type) {
                        switch (type) {
                            case 'Q_EXCEED_NUM_LIMIT':
                                alert("错误：上传文件数量过多！");
                                break;
                            case 'Q_EXCEED_SIZE_LIMIT':
                                alert("错误：文件总大小超出限制！");
                                break;
                            case 'F_EXCEED_SIZE':
                                alert("错误：文件大小超出限制！");
                                break;
                            case 'Q_TYPE_DENIED':
                                alert("错误：禁止上传该类型文件！");
                                break;
                            case 'F_DUPLICATE':
                                alert("错误：请勿重复上传该文件！");
                                break;
                            default:
                                alert('错误代码：' + type);
                                break;
                        }
                    });
                    uploader.on('uploadProgress', function (file, percentage) {
                        var $li = $('#' + file.id),
                            $percent = $li.find('.progress .progress-bar');
                        // 避免重复创建
                        if (!$percent.length) {
                            $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                                '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                                '</div> ' +
                                '</div>').appendTo($li).find('.progress-bar');
                        }
                        $li.find('p.state').text('上传中');
                        $percent.css('width', percentage * 100 + '%');
                        console.log(percentage);
                    });
                    uploader.on('uploadError', function (file) {
                        console.log("上传失败")
                    });
                    //        单个文件上传成功 之后 刷新数据列表
                    uploader.on('uploadSuccess', function (file, response) {
                        if (response.status == 500) {
                            scope.isUpload = false;
                            layer.msg("模板错误")
                        }else if(response.status == 60000){
                            scope.isUpload = false;
                            layer.msg("文件内容错误!")
                        }  else {
                            scope.isUpload = false;
                            scope.factor = 1 ;
                            $state.reload();
                        }
                        console.log(response)
                    });
                    //        所有文件上传成功 之后 刷新数据列表
                    //uploader.on('uploadFinished', function (file) {
                    //        scope.isUpload = false;
                    //        $state.reload();
                    //});
                    //删除某个文件
                    $(".framework").delegate(".removeItem","click",function(){
                        var self = $(this) ;
                        uploader.removeFile(uploader.getFile(self.attr("data-id")),true);//队列中移除其中某个文件
                        self.parent().remove() ;
                    }) ;
                }, 0)
            }
        }
    }])
.directive("batchTest", ["$parse", "ngDialog", "$cookieStore", "$state", "$timeout",
        function ($parse, ngDialog, $cookieStore, $state, $timeout) {
            return {
                //restrict: 'EA',
                scope: {
                    accept: '=',
                    server: '=', //url
                    type: "=",   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
                    isAuto: "=",
                    isUpload: "=",
                    factor : "="
                },
                template: '<div class="$container">' +
                '<ul class="pick-list">' +
                      //    li  列表
                '</ul>' +
                '<div  id="picker" style="">请添加文件</div><span class=""></span>' +
                '</div>'
                ,
                link: function (scope, element, attrs) {
                    // console.log(1) ;
                    $timeout(function () {
                        var uploader = WebUploader.create({
                            auto: false, // 选完文件后，是否自动上传
                            // swf文件路径
                            //sendAsBinary:true, //指明使用二进制的方式上传文件
                            swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                            formData: {
                                "userId": $cookieStore.get("userId"),
                                "applicationId": $cookieStore.get("applicationId")
                            },   // 上传参数
                            // 文件接收服务端。
                            server: scope.server,
                            accept: {
                                title: 'file',
                                extensions: 'xls,xlsx',
                                mimeTypes: 'file/xls,file/xlsx'
                            },
                            // 选择文件的按钮。可选。
                            // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                            pick: {
                                id: '#picker',
                                multiple: true
                            },
                            //不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                            resize: false,
                            chunked: true,  // 分片上传大文件
                            chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                            //thread: 100,// 最大上传并发数
                            // 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                            disableGlobalDnd: true,

                            fileNumLimit: 10,
                            fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                            fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
                });
                scope.$watch("isUpload",function(isUpload){
                    if(isUpload){
                        uploader.upload() ;
                        ngDialog.closeAll();
			            scope.isUpload = false
                    }
                }) ;
                //
                uploader.on( 'fileQueued', function( file ) {
                    var item = $('<li class="pick-item mb-5 pl-5 pr-5"  style="line-height: 25px;background:#e8ebec;">'+file.name+'<a href="javascript:;" data-id="'+file.id+'" class="R removeItem">X</a></li>') ;
                    $(".pick-list").append(item) ;
                    console.log(file + "file  add success");
                });
                //当validate不通过时，会以派送错误事件的形式通知
                uploader.on('error', function (type) {
                    switch (type) {
                        case 'Q_EXCEED_NUM_LIMIT':
                            alert("错误：上传文件数量过多！");
                            break;
                        case 'Q_EXCEED_SIZE_LIMIT':
                            alert("错误：文件总大小超出限制！");
                            break;
                        case 'F_EXCEED_SIZE':
                            alert("错误：文件大小超出限制！");
                            break;
                        case 'Q_TYPE_DENIED':
                            alert("错误：禁止上传该类型文件！");
                            break;
                        case 'F_DUPLICATE':
                            alert("错误：请勿重复上传该文件！");
                            break;
                        default:
                            alert('错误代码：' + type);
                            break;
                    }
                });
                uploader.on('uploadProgress', function (file, percentage) {
                    var $li = $('#' + file.id),
                        $percent = $li.find('.progress .progress-bar');
                    // 避免重复创建
                    if (!$percent.length) {
                        $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                            '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                            '</div> ' +
                            '</div>').appendTo($li).find('.progress-bar');
                    }
                    $li.find('p.state').text('上传中');
                    $percent.css('width', percentage * 100 + '%');
                    console.log(percentage);
                });
                uploader.on('uploadError', function (file) {
                    console.log("上传失败")
                });
                //        单个文件上传成功 之后 刷新数据列表
                uploader.on('uploadSuccess', function (file, response) {
                    console.log(response)
                    if (response.status == 500) {
                        scope.isUpload = false;
                        layer.msg("模板错误")
                    }else {
                        scope.isUpload = false;
                        scope.factor = 1 ;
                        $state.reload();
                    }
                    console.log(response)
                });
                //        所有文件上传成功 之后 刷新数据列表
                //uploader.on('uploadFinished', function (file) {
                //        scope.isUpload = false;
                //        $state.reload();
                //});
                //删除某个文件
                $(".framework").delegate(".removeItem","click",function(){
                    var self = $(this) ;
                    uploader.removeFile(uploader.getFile(self.attr("data-id")),true);//队列中移除其中某个文件
                    self.parent().remove() ;
                }) ;
             }, 0)
        }
    }
}])
.directive("batchTestThree", ["$parse", "ngDialog", "$cookieStore", "$state", "$timeout",
    function ($parse, ngDialog, $cookieStore, $state, $timeout) {
        return {
            //restrict: 'EA',
            scope: {
                accept: '=',
                server: '=', //url
                type: "=",   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
                isAuto: "=",
                isUpload: "=",
                factor : "=",
                fileName:"=",
            },
            template: '<div class="$container">' +
            '<span  id="picker" style="">请添加文件</span>' +
            '</div>'
            ,
            link: function (scope, element, attrs) {
                // console.log(1) ;
                $timeout(function () {
                    var uploader = WebUploader.create({
                        auto: true, // 选完文件后，是否自动上传
                        // swf文件路径
                        //sendAsBinary:true, //指明使用二进制的方式上传文件
                        swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                        formData: {
                            "userId": $cookieStore.get("userId"),
                            "applicationId": $cookieStore.get("applicationId")
                        },   // 上传参数
                        // 文件接收服务端。
                        server: scope.server,
                        accept: {
                            title: 'file',
                            extensions: 'xls,xlsx',
                            mimeTypes: 'file/xls,file/xlsx'
                        },
                        // 选择文件的按钮。可选。
                        // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                        pick: {
                            id: '#picker',
                            multiple: false
                        },
                        //不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                        resize: false,
                        chunked: true,  // 分片上传大文件
                        chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                        //thread: 100,// 最大上传并发数
                        // 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                        disableGlobalDnd: true,
                        fileNumLimit: 10,
                        fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                        fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
                    });
                    console.log(angular.element(".webuploader-pick")) ;
                    angular.element(".webuploader-pick").addClass("btn1").css({"background":"#3e91e7","lineHeight":"20px"}) ;
                    uploader.on( 'fileQueued', function( file ) {

                        console.log(file + "file  add success");
                        scope.fileName=file.name;

                    });
                    //当validate不通过时，会以派送错误事件的形式通知
                    uploader.on('error', function (type) {
                        switch (type) {
                            case 'Q_EXCEED_NUM_LIMIT':
                                alert("错误：上传文件数量过多！");
                                break;
                            case 'Q_EXCEED_SIZE_LIMIT':
                                alert("错误：文件总大小超出限制！");
                                break;
                            case 'F_EXCEED_SIZE':
                                alert("错误：文件大小超出限制！");
                                break;
                            case 'Q_TYPE_DENIED':
                                alert("错误：禁止上传该类型文件！");
                                break;
                            case 'F_DUPLICATE':
                                alert("错误：请勿重复上传该文件！");
                                break;
                            default:
                                alert('错误代码：' + type);
                                break;
                        }
                    });
                    uploader.on('uploadProgress', function (file, percentage) {
                        var $li = $('#' + file.id),
                            $percent = $li.find('.progress .progress-bar');
                        // 避免重复创建
                        if (!$percent.length) {
                            $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                                '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                                '</div> ' +
                                '</div>').appendTo($li).find('.progress-bar');
                        }
                        $li.find('p.state').text('上传中');
                        $percent.css('width', percentage * 100 + '%');
                        console.log(percentage);
                    });
                    uploader.on('uploadError', function (file) {
                        console.log("上传失败")
                    });
                    //        单个文件上传成功 之后 刷新数据列表
                    uploader.on('uploadSuccess', function (file, response) {
                        if (response.status == 500) {
                            //scope.isUpload = false;
                            layer.msg("模板错误")
                        } else {
                            //scope.isUpload = false;
                            scope.factor = 1 ;
                            //$state.reload();
                        }
                        console.log(response)
                    });
                    //        所有文件上传成功 之后 刷新数据列表
                    //uploader.on('uploadFinished', function (file) {
                    //        scope.isUpload = false;
                    //        $state.reload();
                    //});
                    //删除某个文件
                    $(".framework").delegate(".removeItem","click",function(){
                        var self = $(this) ;
                        uploader.removeFile(uploader.getFile(self.attr("data-id")),true);//队列中移除其中某个文件
                        self.parent().remove() ;
                    }) ;
                }, 0)
            }
        }
    }])
// Source: app/static/functionalTesting/js/filter/floatFilter.js
/**
 * Created by Administrator on 2017/7/4.
 * For  浮点数保留
 */
angular.module('knowledge_static_web').filter('floatFilter',function () {
    return function(val , length){
         var length = length?length+1:3 ;
         var val = new String(val) ;
         var index = val.indexOf(".") ;
        var result ;
        if(index!=-1){
            result = Number(val.substring(0,index+length))
        }else{
            result = Number(val)
        }
        return result ;
    }
}) ;
// Source: app/static/functionalTesting/js/filter/replaceCode.js
/**
 * Created by miles on 2017/5/27.
 *
 * webuploader  ====》》  指令
 */
angular.module('knowledge_static_web').filter('replaceCode',function () {
    return function(val){
        val =val.replace(/[\[\]]/g,"");
        return val;
    }
}).filter('replaceCodeCut',function () {
    return function(val){
        val = val.replace(/[\[\]]/g,"");
        if(val.length>20){
            val = (val.substring(0,20)+"......")
        }
        return val;
    }
});



// Source: app/static/home/js/controller/homePageContent_controller.js
/**
 * Created by 41212 on 2017/5/2.
 */
//homePageContentController
angular.module('homePage').controller('homePageContentController', [
    '$scope', '$location', 'localStorageService', 'AuthService',"$state","$cookieStore",
    function ($scope, $location, localStorageService, AuthService,$state,$cookieStore) {
        $scope.vm = {
            sceneId : $cookieStore.get("sceneId")
        };
    }
]) ;
// Source: app/static/home/js/controller/homePageNav_controller.js
/**
 * Created by 41212 on 2017/3/21.
 */
angular.module('homePage').controller('homePageNavController', [
    '$scope', '$location', 'localStorageService', 'ngDialog','AuthService',"$timeout", "$cookieStore","$state",
    function ($scope, $location, localStorageService,ngDialog,AuthService,$timeout,$cookieStore,$state) {
        $scope.url = $location.url();
        $scope.urls=$state.current.name;

        $scope.vm = {
                applicationId : $cookieStore.get('applicationId'),
                sceneId : $cookieStore.get('sceneId'),
                loginout : loginout,
                userName : $cookieStore.get('userName'),
                logApplication : logApplication,
                jump: jump,
                openServiceConfirm : openServiceConfirm,
                queryServiceList: queryServiceList,
                serviceUrl: "",
                serviceUrlList: "",
                permissionId: $cookieStore.get("permissionId")  //权限的控制
            };
        if($scope.url == "/homePage/define"){
            document.getElementsByTagName("body")[0].style.cssText = "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='../../images/images/index-bg.jpg',sizingMethod='scale');background: url(../../images/images/index-bg.jpg) no-repeat;background-size:100%";
            //document.getElementsByClassName("bodyBg")[0].src = "../../images/images/index-bg.jpg";
        }else if($scope.url == "/login"){
            document.getElementsByTagName("body")[0].style.cssText = "background: url(../../images/images/log-bg.jpg) no-repeat;background-size:100%;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='../../images/images/log-bg.jpg',sizingMethod='scale');";
        }else{
            document.getElementsByTagName("body")[0].style.cssText = "background: #f8f8f8";
        }
        if(!$cookieStore.get('userId')){
            $state.go("login")
        }
        function logApplication(){
            if($scope.vm.sceneId){
                $state.go("setting.Infor")
            }else{
                return false
            }
        }
        function loginout(){
            $cookieStore.remove('applicationId');
            $cookieStore.remove('sceneId');
            $cookieStore.remove('userId');
            $cookieStore.remove('userName');
            localStorage.removeItem('history');
            httpRequestPost("/api/user/userOut",{
                "userId" : USER_ID ,
                "userLoginName" : USER_LOGIN_NAME
            },function(){});
            $state.go("login");
        }
        //初始化分页配置
        self.initSearch = function (column) {
            if (!$scope.SearchPOJO) {
                $scope.SearchPOJO = $scope.initSearchPOJO();
            }
            /**
             * 加载分页条
             * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
             */
            $scope.paginationConf = {
                currentPage: $scope.SearchPOJO.currentPage,//当前页
                totalItems: 0, //总条数
                pageSize: $scope.SearchPOJO.pageSize,//第页条目数
                pagesLength: 6,//分页框数量

            };
        }
        self.initSearch();

        function queryServiceList(){
            //服务列表请求
            httpRequestPost("/api/application/service/listServiceByPage",{
                "applicationId" :  $scope.vm.applicationId,
                "index": ($scope.SearchPOJO.currentPage-1)*$scope.SearchPOJO.pageSize,
                "pageSize": $scope.SearchPOJO.pageSize
            },function(resource){
                if(resource.status == 200 && resource.data != null && resource.data.length >0){
                    $scope.paginationConf.totalItems = resource.total;
                    $scope.vm.serviceArray = resource.data;
                    $scope.vm.serviceUrl = resource.data[0].nodeAccessIp;//设置默认选择
                    $scope.vm.openServiceConfirm();
                }else{
                    layer.msg("无应用服务",{time:1000});
                }
            },function(){
                layer.msg("无法加载服务列表",{time:1000});
            });
        }
        //引擎跳转方法
        function openServiceConfirm(){
            //对话框打开方法
            var dialog = ngDialog.openConfirm({
                template: "/static/home/homePageDialog.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        $scope.vm.jump($scope.vm.serviceUrl);
                    }
                }
            });
        }
        //打开引擎访问界面
        function jump(url) {
            window.open('http://'+url+'/index.html');
        }
        $scope.checkShowCrumbs=function(){
            if(!$scope.url.toString().indexOf("/homePage/define") > 0 || !$scope.url.toString().indexOf("/admin/manage") > 0 || !$scope.url.toString().indexOf("/admin/userManage") > 0){
                return false;
            }
            else{
                return true;
            }
        } ;
        $scope.checkShowClose=function(url){
            if(url == 'homePage.define'){
                return true;
            }
        }

        function  ObjStory(url,name){
            this.url = url;
            this.name = name;
        }
        $scope.getParamList = function(){
            if (localStorage.history){
                var aa = JSON.parse(window.localStorage.history);
                if(aa.use.length>=8){
                    aa.use.splice(1,1);
                }
                for(var i=0;i<aa.use.length;i++){
                    if(aa.use[i].name == $scope.getUrlName($scope.urls)){
                        aa.use.splice(i, 1);
                    }
                }
                if($scope.getUrlName($scope.urls)!='0'){
                    aa.use.push(new ObjStory($scope.urls,$scope.getUrlName($scope.urls)));
                }
                window.localStorage.history=JSON.stringify(aa);
                // $scope.crumbs=aa.use.slice(0,-1);
                $scope.crumbs=aa.use;
            }
            else {
                var obj={
                    use:[{"url":"homePage.define","name":"首页"}]
                }
                window.localStorage.history=JSON.stringify(obj);
            }
        }
        $scope.getUrlName = function(url){
            switch (url)
            {
                /*case 'homePage.define':
                    return 0;*/
                case 'relationalCatalog.manage':
                    return 'BOT';
                case 'frameworkLibrary.manage':
                    return '框架库';
                case (url.match(/^conceptManage/) || {}).input:
                    return '概念管理';
                case (url.match(/^setting/) || {}).input:
                    return '我的应用';
                case (url.match(/^custServScenaOverview/) || {}).input:
                    return '知识管理';
                case 'functionalTest.questionTest':
                    return '问法测试';
                case 'functionalTest.sessionTest':
                    return '会话测试';
                case 'functionalTest.batchTest':
                    return '批量测试';
                case 'functionalTest.participle':
                    return '分词应用';
                case 'functionalTest.participleResult':
                    return '分词测试结果';
                case 'knowledgeManagement.custOverview':
                    return '知识总览';
                case 'knowledgeManagement.markOverview':
                    return '知识总览';
                case 'knowledgeManagement.conceptAdd':
                    return '营销知识新增';
                case 'knowledgeManagement.faqAdd':
                    return 'FAQ知识新增';
                case 'knowledgeManagement.singleAddConcept':
                    return '概念知识新增';
                case 'knowledgeManagement.listAdd':
                    return '列表知识新增';
                case 'knowledgeManagement.factorAdd':
                    return '要素知识新增';
                case 'knowledgeManagement.markKnow':
                    return '富文本知识';
                case 'knowledgeManagement.recommendKnow':
                    return '推荐知识新增';
                case 'knowledgeManagement.knowBatchAdditions':
                    return '知识批量新增';
                case 'knowledgeManagement.processKnow':
                    return '流程知识新增';    
                case (url.match(/^gateway/) || {}).input:
                    return '文档加工新增';
                case 'knowledgeManagement.knowledgeAudit':
                    return '知识审核'; 
                case 'knowledgeManagement.knowledgeAuditFailed':
                    return '知识审核未通过';     
                case 'applAnalysis.accessStatistics':
                    return '访问统计';
                case 'applAnalysis.knowledgeRanking':
                    return '知识点排名统计';
                case 'applAnalysis.sessionDetails':
                    return '会话明细统计';
                case 'applAnalysis.satisfactionDegree':
                    return '满意率统计';
                case 'applAnalysis.resolutionStatistics':
                    return '解决率统计';
                case 'applAnalysis.vioceStatistics':
                    return '语音统计';
                case 'applAnalysis.serviceMonitoring':
                    return '服务监控';
                case 'applAnalysis.reinforcementLearn':
                    return '智能学习';
                case 'applAnalysis.newKnowledgeDiscoveryLearn':
                    return '未匹配问题聚类';
                case 'applAnalysis.operationLog':
                    return '操作日志';
                case 'applAnalysis.sessionLog':
                    return '会话日志';
                case 'materialManagement.chatKnowledgeBase':
                    return '聊天知识库';
                case 'materialManagement.pictureLibrary':
                    return '图片库';
                case 'materialManagement.addtemes':
                    return '图文消息库';
                case 'materialManagement.speechLibrary':
                    return '语音库';
                case 'materialManagement.videoLibrary':
                    return '视频库';
                case 'deepLearning.deeplearnConfig':
                    return '模型构建';
                case 'deepLearning.deepLearningCon':
                    return '模型训练';
                case 'deepLearning.similarityCalculation':
                    return '模型测试';
                case 'deepLearning.dataAcquisition':
                    return '自动导入更新';
                case 'admin.manage':
                    return '应用切换';
                case 'admin.roleManage':
                    return '角色管理';    
                default:
                    return 0;
            }
        }
        $scope.getParamList();
        $scope.closeCrumb = function(index){
            $scope.crumbs.splice(index, 1);
            if($scope.crumbs.length!=0){
                var obj={
                    use:$scope.crumbs
                }
                window.localStorage.history=JSON.stringify(obj);
            }
            else{
                localStorage.removeItem('history');
            }
        }
        window.onbeforeunload = function () {
            localStorage.removeItem('history');
        }

    }
]);
// Source: app/static/home/js/controller/honePage_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('homePage').controller('homePageController', [
    '$scope', '$location', 'localStorageService', 'AuthService',"$state", function ($scope, $location, localStorageService, AuthService,$state) {
        //默认跳转到
        $state.go("homePage.define")
    }
])

// Source: app/static/knowledgeManagement/js/controller/batchAdditions.controller.js
/**
 * Created by dinfo on 2017/3/28.
 */

angular.module('knowledgeManagementModule').controller('knowBatchAdditionsController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","$stateParams","knowledgeAddServer","$window","$rootScope","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,$stateParams,knowledgeAddServer,$window,$rootScope,$filter) {
        //console.log($stateParams);
        $scope.vm = {
            downTemplate: downTemplate,  //新增点击事件
            upload : upload,
            fileName :'',
            templateType : SCENE_ID==1?"190":"192", //添加默认值
            sceneId : SCENE_ID
        };
        //$.getScript('/js/common/config.js',function(e){
        //console.log(e)
        //    //newFun('"Checking new script"');//这个函数是在new.js里面的，当点击click后运行这个函数
        //});
        //上传
        function upload(callback){
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/batchAdditions/uploadDialog.html",
                width:"450px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {

                    } else {

                    }
                }
            });
        }
        //打开下载模板
        function downTemplate(callback){
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/batchAdditions/downTemplateDialog.html",
                width:"450px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {

                    } else {

                    }
                }
            });
        }


    }
]);
// Source: app/static/knowledgeManagement/js/controller/custConcept.controller.js
/**
 * Created by dinfo on 2017/3/28
 */

angular.module('knowledgeManagementModule').controller('conceptController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","knowledgeAddServer","$window","$stateParams","$interval","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,knowledgeAddServer,$window,$stateParams,$interval,$filter) {
      //console.log($stateParams)
        $scope.vm = {
            knowledgeId : "",
            knowledgeOrigin : 120 , //知识来源
            frames: [],      //业务框架
            frameId: "",
            knowledgeAdd: knowledgeAdd,  //新增点击事件
            botRoot : "",      //根节点
            knowledgeClassifyCall: knowledgeClassifyCall, //知识分类的回调方法
            openContentConfirm: openContentConfirm, //打开内容对话框
            knowledgeBotVal : "",  //bot 内容
            botSelectAdd : botSelectAdd,
            frameCategoryId : "",
            title : "",   //标题
            titleTip :  "",
            timeStart : "",      //起始时间
            timeEnd : "",
            isTimeTable : false,  //时间表隐藏

            //生成  知识标题 打标生成 BOT 扩展问
            getBotAndExtensionByTitle : getBotAndExtensionByTitle,
            //creatBot : [],

            botClassfy : [],   //类目
            creatSelectBot : [], //手选生成 bot

            //扩展问
            extensionTitle : "",
            extensionWeight :60,
            getExtension : getExtension,  //獲取擴展問
            extensions : [],      //手動生成
            extensionsByFrame : [],  //業務框架生成
            extensionByTitleTag : [] , //标题打标生成扩展问
            extensionEdit : extensionEdit,

            //展示内容
            scanContent : [],
            save : save ,   //保存
            scan :scan ,   //预览
            //弹框相关
            newTitle: "",    //标题
            channel : [],     //新添加的 channel
            channels : [],     //所有渠道
            channelArr : [] ,
            selectChannel : selectChannel , //獲取渠道
            dimension  : "",
            dimensions : []
            ,  //所有维度
            dimensionArr : [],  //選擇的維度
            dimensionsCopy :[]
            ,
            checkChannelDimension : checkChannelDimension ,
            //高级选项内容
            slideDown : slideDown,
            slideFlag : false,

            question : 1,
            tip : 1,
            tail : 1 ,
            knowledgeTitleTag : [],
            appointRelative : "",
            appointRelativeList :[],
            appointRelativeGroup : [],
            replaceType : 0 ,
            enterEvent : enterEvent,
            dialogExtension : [],

            limitSave : false ,
            isEditIndex : -1,   // 知识内容 弹框
                        // -1 为内容新增
                        // index 为知识的编辑索引
//*******************2017/8/3  BEGIN   删除扩展问本地备份 *******************//
            rmExtensionBackup : [] ,
//*******************2017/8/3  END   删除扩展问本地备份   *******************//
                        //引到页
            showTip : showTip,
            hideTip : hideTip,
            prevDiv : prevDiv,
            nextDiv : nextDiv,
            //引到页end
            increaseCheck  : increaseCheck , //知识新增弹框保存按钮
            backupsOfExtension : "" , //扩展问 编辑备份
            sourceTitle : ""  ,//备份标题 打标是验证
            backUpExt: backUpExt , // 扩展问 假删除
            extensionDeleted : []
        };
        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions","dimensionsCopy"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //、、、、、、、、、、、、、、、、、、、、、、、   通过预览 编辑 判断   、、、、、、、、、、、、、、、、、、、、、、、、、
        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        if($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase){
            var data = angular.fromJson($stateParams.data) ;
            //console.log($stateParams.data);
            //标题
            $scope.vm.title =  data.knowledgeBase.knowledgeTitle ;
            $scope.vm.sourceTitle =  data.knowledgeBase.knowledgeTitle ;
            // 标题打标结果
            $scope.vm.knowledgeTitleTag = data.knowledgeBase.knowledgeTitleTag ;
            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId ;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin ;
            // 时间
            if(data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd){
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart  =  $filter("date")(data.knowledgeBase.knowledgeExpDateStart,"yyyy-MM-dd") ;
            $scope.vm.timeEnd  = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd,"yyyy-MM-dd") ;
            //bot路径
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList ;
            //扩展问
            $scope.vm.extensionsByFrame = data.extensionQuestions;
            angular.forEach(data.extensionQuestions,function(item){
            });
            //内容
            angular.forEach(data.knowledgeContents,function(item){
                var obj = {} ;
                obj.knowledgeContent = item.knowledgeContent;
                //維度，添加預覽效果   以name id 的 形式显示
                obj.channelIdList =  item.channelIdList ;
                obj.dimensionIdList =  item.dimensionIdList ;
                obj.knowledgeRelatedQuestionOn =item.knowledgeRelatedQuestionOn ;   //显示相关问
                obj.knowledgeBeRelatedOn  =  item.knowledgeBeRelatedOn ; //在提示
                obj.knowledgeCommonOn = item.knowledgeCommonOn ;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = item.knowledgeRelevantContentList ;  //业务扩展问
                $scope.vm.scanContent.push(obj);
            });
        //    文檔加工添加知識
        } else if ($stateParams.data  && angular.fromJson($stateParams.data).docmentation) {
            $scope.vm.docmentation = angular.fromJson($stateParams.data).docmentation;
            $scope.vm.title = $scope.vm.docmentation.documentationTitle;
            $scope.vm.newTitle = $scope.vm.docmentation.documentationContext; //填充新的知识内容
            $scope.vm.knowledgeOrigin = 122 ;
            $timeout(function(){$scope.vm.openContentConfirm(saveAddNew);},0)
        }

        if($stateParams.knowledgeTitle){
            console.log("======"+$stateParams.knowledgeTitle);
            $scope.vm.title=$stateParams.knowledgeTitle;
        }
// 通过类目id 获取框架
        function getFrame(id){
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId":10012,
                "index": 0,
                "pageSize":999999
            },function(data){
                //console.log(data);
                if(data.status!=10005){
                    if(data.data.length){
                        $scope.vm.frames = $scope.vm.frames.concat(data.data) ;
                        $scope.$apply();
                    }
                }
            },function(){
                // layer.msg("err or err")
            });
        }
        $scope.$watch("vm.frameCategoryId",function(val,old){
            if(val&&val!=old){
                getFrame( val )
            }
        });
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId",function(val,old){
            if(val&&val!=old){
                //if($scope.vm.extensionsByFrame.length){
                //    //  替換條件
                //    replace(val);
                //}else{
                    // 在未生成扩展问情況
                    getExtensionByFrame(val);
                //}

            }
        });

        // 通过frame 获取扩展问
        function getExtensionByFrame(id,type){
            console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameTypeId": 10012,
                "frameId": id,
                "index": 0,
                "pageSize":999999
            },function(data){
                if(data.status==10000){
                    //var extensionQuestionList = [],
                    //    frameQuestionTagList = [];
                    var obj = {};
                    if (data.data[0].elements) {
                        angular.forEach(data.data[0].elements, function (item, index) {
                            var  extensionQuestionList = [] ,
                                 frameQuestionTagList = [];
                                obj={
                                    "extensionQuestionType": 60 ,  //61
                                    "extensionQuestionTitle": data.data[0].frameTitle
                                } ;
                                extensionQuestionList.push((item.elementContent.substring(0,item.elementContent.indexOf('#'))));
                                frameQuestionTagList.push(item.elementContent.substring(item.elementContent.indexOf('#')+1).split('；'));
                            checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                        });
                        //checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                    }
                    $scope.$apply();
                }
            }, function (error) {console.log(error)});
        }

        // 获取Bot全路径
        function getBotFullPath(id){
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                categoryId: id
            },function(data){
                if(data.status = 10000){
                    var allBot = angular.copy($scope.vm.creatSelectBot.concat($scope.vm.botClassfy)) ,
                        botResult = $scope.master.isBotRepeat(id,data.categoryFullName.split("/"),"",allBot) ;
                    $scope.$apply(function(){
                        console.log(data) ;
                        $scope.vm.knowledgeBotVal = data.categoryFullName;
                        if(botResult != false){
                            //$scope.vm.knowledgeBotVal = data.categoryFullName.split("/");
                            $scope.vm.botFullPath= botResult;
                        }
                    });
                }
            },function(error){console.log(error)});
        }
        // 知识文档分类回调
        function knowledgeClassifyCall() {
            httpRequestPost("/api/ms/knowledgeDocumentation/documentationKnowledgeClassify",
                {
                    knowledgeId: $scope.vm.docmentation.knowledgeId,
                    knowledgeStatus: 3
                },
                function (data) {
                    if (data && data.status == 200) {
                        $state.go("back.doc_results_view",
                            {
                                knowDocId: $scope.vm.docmentation.documentationId,
                                knowDocCreateTime: $scope.vm.docmentation.knowDocCreateTime,
                                knowDocUserName: $scope.vm.docmentation.knowDocUserName
                            }
                        );
                    }
                }
            );
        }
        //打开知识内容对话框
        function openContentConfirm(callback) {
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/public-html/knowledge_increase.html",
                width:"650px",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        callback();
                    } else {
                        setDialog();//清空内容对话框
                    }
                }
            });
        }
        //y业务框架生成扩展问校验
        function checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,oldWord){
            //var title = oldWord.extensionQuestionTitle ;
            var title = extensionQuestionList[0] ;
            var weight = oldWord.extensionQuestionType ;
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                $scope.vm.extensionsByFrame.push(isLocalHasExt);
                return ;
            }
            console.log(oldWord,title);
            httpRequestPost("/api/ms/conceptKnowledge/checkFrameTag",{
                "applicationId": APPLICATION_ID,
                "extensionQuestionList" : extensionQuestionList,
                "frameQuestionTagList" : frameQuestionTagList
            },function(data){
                if(data.status==200){
                    $scope.$apply(function(){
                        var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                        var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                        if(result != false){
                            $scope.vm.extensionTitle = "";
                            $scope.vm.extensionsByFrame.push(result);
                        }
                    })
                }
            }, function () {
            });
        }

        function scanCotentByTitle(title,index){
            var answerContentList = new Array(title);
            httpRequestPost("/api/ms/conceptKnowledge/productExtensionQuestion", {
                "applicationId": APPLICATION_ID,
                "title": $scope.vm.title,
                "answerContentList": answerContentList
            }, function (data) {
                console.log(data) ;
                if (data.status == 200) {
                    //console.log(data.data);
                    //console.log(index) ;
                    $scope.vm.scanContent[index].extensionByContentByTitle = data.data;
                    $scope.$apply()
                } else if (data.status == 500) {
                    layer.msg(data.info);
                }
            }, function (error) {
                console.log(error)
            });
        }
        //手动添加扩展问
        function getExtension(title,weight,source){
            //source  0 默认  1 标题
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                if(!source){
                    $scope.vm.extensions.push(isLocalHasExt);
                }else{
                    $scope.vm.extensionByTitleTag = new Array(isLocalHasExt)
                }
                return ;
            }
            var question = new Array(title);
            var obj = {
                "extensionQuestionTitle" : $scope.vm.extensionTitle,
                "extensionQuestionType" : $scope.vm.extensionWeight
            } ;
            if(!title){
                layer.msg("扩展问不能为空")
            }else if(!checkExtensionByTitle(obj)){
                layer.msg("生成扩展问重复,已阻止添加");
                return false
            } else {
                httpRequestPost("/api/ms/conceptKnowledge/checkExtensionQuestion", {
                    "applicationId": APPLICATION_ID,
                    "extendQuestionList": question
                }, function (data) {
                    if (data.status == 500) {
                        layer.msg(data.data);
                    }else if(data.status == 10026 ){
                        layer.msg("扩展问添加重复，请重新添加")
                    } else if (data.status == 200) {
                        $scope.$apply(function(){
                            var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                            var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                            if(result != false){
                                console.log(result) ;
                                $scope.vm.extensionTitle = "";
                                if(!source){
                                    $scope.vm.extensions.push(result);
                                }else{
                                    $scope.vm.extensionByTitleTag = new Array(result)
                                }
                            }
                        });
                    }
                }, function (error) {
                    //status == 500
                    //layer.msg("概念扩展打标失败，请检查服务，重新打标");
                    console.log(error)
                });
            }
        }

////////////////////////////////////// ///          Bot     /////////////////////////////////////////////////////
        $scope.master.botTreeOperate($scope,"/api/ms/modeling/category/listbycategorypid","/api/ms/modeling/category/listbycategorypid",getBotFullPath
            //"/api/ms/modeling/category/searchbycategoryname"
        ) ;
        //BOT搜索自动补全
        $scope.master.searchBotAutoTag(".botTagAuto","/api/ms/modeling/category/searchbycategoryname",function(suggestion){
            $scope.$apply(function(){
                var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
                    botResult = $scope.master.isBotRepeat(suggestion.data,suggestion.value.split("/"),suggestion.type,allBot) ;
                $scope.vm.knowledgeBotVal = suggestion.value;
                if(botResult != false){
                    $scope.vm.botFullPath= botResult;
                }
            })
        });


        //点击bot分类的 加号
        function botSelectAdd(){
            if($scope.vm.botFullPath){
                console.log($scope.vm.botFullPath)
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = "";
                $scope.vm.knowledgeBotVal = "";
            }
        };
////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
//        function replace(id){
//                var replace = ngDialog.openConfirm({
//                    template:"/static/knowledgeManagement/faq/replace.html",
//                    scope: $scope,
//                    closeByDocument:false,
//                    closeByEscape: true,
//                    showClose : true,
//                    backdrop : 'static',
//                    preCloseCallback:function(e){     //关闭回掉
//                        if(e === 1){    //替换
//                            getExtensionByFrame( id ,1 )
//                        }else if(e === 0){
//                            // 添加不替换
//                            getExtensionByFrame( id ,0 )
//                        }
//                    }
//                });
//        }
        function knowledgeAdd(data, index) {
            if(!$scope.vm.title){
                layer.msg("请先输入知识标题") ;
                return false ;
            }else{
                if(data){    //增加
                    $scope.vm.isEditIndex = index ;
                    $scope.vm.newTitle = data.knowledgeContent;
                    $scope.vm.channel = data.channelIdList;
                    //$scope.vm.dimensionArr.id = data.dimensionIdList;
                    angular.forEach($scope.vm.dimensions,function(item){
                        if(data.dimensionIdList.inArray(item.dimensionId)){
                            var obj = {} ;
                            obj.dimensionId = item.dimensionId ;
                            obj.dimensionName = item.dimensionName ;
                            $scope.vm.dimensionArr.push(obj) ;
                        }
                    }) ;
                    $scope.vm.tip  = data.knowledgeBeRelatedOn; //在提示
                    $scope.vm.question = data.knowledgeRelatedQuestionOn;
                    $scope.vm.tail = data.knowledgeCommonOn;
                    $scope.vm.appointRelativeGroup = data.knowledgeRelevantContentList!=null?data.knowledgeRelevantContentList:[];
                    var callback = function(){
                        var obj = {};
                        obj.knowledgeContent = $scope.vm.newTitle;
                        obj.knowledgeContentType = 0;  // 答案类型
                        obj.channelIdList =  $scope.vm.channel;
                        obj.dimensionIdList =  $scope.vm.dimensionArr.id;
                        obj.knowledgeRelatedQuestionOn = $scope.vm.question;    //显示相关问
                        obj.knowledgeBeRelatedOn  =  $scope.vm.tip ; //在提示
                        obj.knowledgeCommonOn = $scope.vm.tail ;   //弹出评价小尾巴
                        obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup ; //业务扩展问
                        $scope.vm.scanContent[index] = obj;
                        $scope.vm.isEditIndex = -1 ;
                        scanCotentByTitle(obj.knowledgeContent,index) ;
                        setDialog() ;
                    }
                } else {
                    var callback = saveAddNew;
                }
                $scope.master.openNgDialog($scope,"/static/knowledgeManagement/public-html/knowledge_increase.html","650px",callback,function(){
                    $scope.vm.isEditIndex = -1  ;
                    setDialog()
                }) ;
                $timeout(function(){
                    $scope.master.searchAppointAutoTag($scope,".appoint","/api/ms/knowledgeManage/getKnowledgeTitle","appointRelativeList",function(suggestion){
                        console.log(suggestion) ;
                           //$scope.$apply(function(){
                           //    if($scope.vm.appointRelativeGroup.indexOf(suggestion)==-1){
                           //        $scope.vm.appointRelativeGroup.push(suggestion)
                           //    }else{
                           //        layer.msg("重复添加相关问")
                           //    }
                           //    $scope.vm.appointRelative = "";  //清楚title
                           //})
                       }).listener()
                },2000) ;
            }
        }
        function extensionEdit(type,item,index){
            //type  1 框架生成  0 手动添加
            $scope.vm.backupsOfExtension = angular.copy(item) ;
            console.log($scope.vm.backupsOfExtension) ;
            var dia = angular.element(".ngdialog ");
            if(dia.length==0){
            var extensionEdit = ngDialog.openConfirm({
                template:"/static/knowledgeManagement/public-html/extension_edit.html",
                width:"500px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){     //关闭回掉
                    if(e === 1){
                        //console.log( $scope.vm.backupsOfExtension ) ;
                        if(type == 1){
                            $scope.vm.extensionsByFrame[index] = $scope.vm.backupsOfExtension ;
                        }else if(type == 0){
                            $scope.vm.extensions[index] = $scope.vm.backupsOfExtension ;
                        }else if(type == 2){
                            $scope.vm.extensionByTitleTag[index] = $scope.vm.backupsOfExtension ;
                        }
                    }else{$scope.vm.backupsOfExtension = ""; }
                }
            });
            }
        }

        function slideDown(){
            $scope.vm.slideFlag = ! $scope.vm.slideFlag;
            $(".senior_div").slideToggle();
        }
        //根據 標題 生成 bot 跟 扩展问
        function getBotAndExtensionByTitle(){
            getExtension($scope.vm.title,"60",1) ; //生成扩展问
            if($scope.vm.title && $scope.vm.sourceTitle!=$scope.vm.title){
                //getExtension($scope.vm.title,"60",1) ; //生成扩展问
                httpRequestPost("/api/ms/conceptKnowledge/checkKnowledgeTitleAndGetAutoClassify",{
                    "title" :  $scope.vm.title,
                    "applicationId" : APPLICATION_ID,
                    "knowledgeId" : $scope.vm.knowledgeId
                },function(data){
                    console.log(data) ;
                    if(data.status == 500){    //标题打标失败
                        $scope.vm.titleTip = "知识标题重复";
                        $scope.$apply()
                    }else if(data.status == 200){
                        $scope.$apply(function(){
                            //標題打标结果
                            $scope.vm.knowledgeTitleTag = data.data.knowledgeTitleTagList ;
                            $scope.vm.botClassfy = [];   //reset 标题生成bot
                            //添加校验是否添加校验  获取所有bot 验证是否重复
                            var allBot = angular.copy($scope.vm.creatSelectBot) ;
                            //生成bot
                            angular.forEach(data.data.classifyList, function (item) {
                                var botResult = $scope.master.isBotRepeat(item.id,item.fullPath,item.type,allBot) ;
                                if(botResult != false){
                                    $scope.vm.botClassfy.push(botResult);
                                }
                                $scope.vm.frameCategoryId = item.id;
                            });
                        });
                    }
                },function(error){
                    console.log(error)
                });
            }else if($scope.vm.sourceTitle==$scope.vm.title) {

            }else
           {
                $scope.vm.titleTip = "知识标题不能为空"
            }
        }

        //  主页保存 获取参数
        function getParams(){
           var params =  {
                "applicationId": APPLICATION_ID,
                "userId" : USER_ID ,
                "sceneId" :SCENE_ID ,
                "knowledgeTitle": $scope.vm.title,//
                "knowledgeType": 101,
                "knowledgeExpDateStart" : $scope.vm.isTimeTable?$scope.vm.timeStart:"",  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable?$scope.vm.timeEnd:"",     //结束时间
                "knowledgeTitleTag" : $scope.vm.knowledgeTitleTag,    //标题打标生成的name
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME , //操作人
                "knowledgeOrigin"  : $scope.vm.knowledgeOrigin , //知识来源
            };
            params.knowledgeContents =  $scope.vm.scanContent;
            params.extensionQuestions =  $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
            params.classificationAndKnowledgeList = $scope.vm.botClassfy.concat($scope.vm.creatSelectBot);
            return params
        }
        //限制一个知识多次保存
        var limitTimer ;
        function save() {
            if (!checkSave()) {
                return false
            } else {
                if(!$scope.vm.limitSave) {
                    $timeout.cancel(limitTimer) ;
                    $scope.vm.limitSave = true ;
                    limitTimer = $timeout(function(){
                        $scope.vm.limitSave = false ;
                    },180000) ;
                    var params = getParams();   // 保存參數
                    var api;                    // 返回編輯的 url
                    if ($scope.vm.knowledgeId) {
                        //编辑
                        api = "/api/ms/conceptKnowledge/editKnowledge";
                        params.knowledgeId = $scope.vm.knowledgeId;
                    } else {
                        //新增
                        api = "/api/ms/conceptKnowledge/addConceptKnowledge"
                    }
                    httpRequestPost(api, params, function (data) {
                        console.log(getParams());
                        if (data.status == 200) {
                            if ($scope.vm.docmentation) {
                                $scope.vm.knowledgeClassifyCall();
                            }else{
                               if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                            }
                        } else if (data.status == 500) {
                            layer.msg("知识保存失败") ;
                            $timeout.cancel(limitTimer) ;
                            $scope.$apply(function(){
                                $scope.vm.limitSave = false ;
                            });
                        }
                    }, function (err) {
                        $timeout.cancel(limitTimer) ;
                        $scope.$apply(function(){
                            $scope.vm.limitSave = false ;
                        });
                        console.log(err)
                    });
                }
            }
        }
        function scan(){
            if(!checkSave()){
                return false
            }else{
                var obj = {};
                var params = getParams();
                console.log(params);
                obj.params = params;
                obj.editUrl = "knowledgeManagement.singleAddConcept";
                if($scope.vm.knowledgeId){
                    //编辑
                    obj.api = "/api/ms/conceptKnowledge/editKnowledge" ;
                    params.knowledgeId = $scope.vm.knowledgeId ;
                }else{
                    //新增
                    obj.api = "/api/ms/conceptKnowledge/addConceptKnowledge"
                }
                obj.params = params;
                obj.knowledgeType = 101;
                $window.knowledgeScan = obj;
                //    var url = $state.href('knowledgeManagement.knowledgeScan',{knowledgeScan: 111});
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url,'_blank');
            }
        };

 /* *********************              弹框相关           **************************/ //
//重置参数
        function setDialog() {
            $scope.vm.newTitle = "";
            $scope.vm.slideFlag = false ;
            $scope.vm.channel = [];
            $scope.vm.dimension = [];
            $scope.vm.question = 1;    //显示相关问
            $scope.vm.tip = 1;   //在提示
            $scope.vm.tail =1;   //弹出评价小尾巴
            $scope.vm.appointRelativeGroup = [] ;//业务扩展问
            $scope.vm.appointRelative = "";
            $scope.vm.dimensionsCopy = angular.copy($scope.vm.dimensions);
            $scope.vm.dimensionArr = [];
        }

        function saveAddNew(){
            if($scope.vm.newTitle){
                var index = $scope.vm.scanContent.length ;
                var title = angular.copy($scope.vm.newTitle);
                scanCotentByTitle(title,index) ;
                var obj = {};
                obj.knowledgeContent = $scope.vm.newTitle;
                //obj.knowledgeContentType = 0,  // 答案类型
                obj.channelIdList =  $scope.vm.channel;
                obj.dimensionIdList =  $scope.vm.dimensionArr.id.length?$scope.vm.dimensionArr.id:$scope.vm.dimensionsCopy.id;
                obj.knowledgeRelatedQuestionOn = $scope.vm.question;    //显示相关问
                obj.knowledgeBeRelatedOn = $scope.vm.tip; //在提示
                obj.knowledgeCommonOn = $scope.vm.tail;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup;  //业务扩展问
                // 生成扩展问题
                //高級 選項
                $scope.vm.scanContent.push(obj);
                setDialog()
            } else {
                setDialog()
            }
        }
        // 检验标题是否符合
        function checkTitle(title,type){
            if(!title){
                layer.msg("标题不能为空");
                return false
            }else{
                httpRequestPost("/api/ms/conceptKnowledge/checkDistribute",{
                    "title" : title
                },function(data){
                    console.log(data);
                    return true;
                },function(error){
                    console.log(error) ;
                    return false
                });
            }
        }
        //检验扩展问是否重复
        function checkExtensionByTitle(item){
            var result ;
            //所有标题以及手动打标生成的扩展问
            var arr = $scope.vm.extensionByTitleTag.concat($scope.vm.extensions);
            if(!arr.length){
               result = true ;
            }else{
                var len = arr.length;
                angular.forEach(arr,function(val){
                    if(val.extensionQuestionTitle == item.extensionQuestionTitle && val.extensionQuestionType == item.extensionQuestionType){
                        len-=1 ;
                        //console.log(val.extensionQuestionTitle == item.extensionQuestionTitle);
                        result = false ;
                    }
                    if(len==arr.length){
                        result = true ;
                    }
                })
            }
            return  result ;
        }

//        提交 检验参数
        function checkSave(){
            var params = getParams();
            console.log(params) ;
            if(!params.knowledgeTitle){
                layer.msg("知识标题不能为空，请填写");
                return false ;
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("知识类目不能为空，请选择分类");
                return false
            }else if(!$scope.$parent.master.isTitleHasTag($scope.vm.title,$scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag))){
                layer.msg("知识意图未打标");
                return false ;
            }
            else if(!params.knowledgeContents.length){
                layer.msg("知识内容不能为空，请点击新增填写");
                return false ;
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("分类知识Bot不能为空")
            }else{
                return true
            }
        }
//***************************    save check channel dimension  **********************************************
        function increaseCheck(){
            //判斷维度是否为空 0 不变 1 全维度
            if(!$scope.vm.dimensionArr.id.length){
                $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
            };
            if(!$scope.vm.newTitle && !$scope.vm.channel.length){
                layer.msg("请填写知识内容,并选择渠道后保存")
            }else if(!$scope.vm.newTitle){
                layer.msg("请填写知识内容后保存")
            }else if(!$scope.vm.channel.length){
                layer.msg("请选择渠道后保存")
            }else if(checkChannelDimension($scope.vm.channel,$scope.vm.dimensionArr.id)){
                //存在重复条件
            }else{
                ngDialog.closeAll(1) ;
            }
        }
        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channel.inArray(channelId)){
                $scope.vm.channel.remove(channelId);
            }else{
                $scope.vm.channel.push(channelId);
            }
        }
        function checkChannelDimension(channel,dimension){
            var isRepeat  = false;
            //    新增的 channel = []  dimension = [] ,
            //   页面以添加 scanContent.dimensions   scanContent.channels
            angular.forEach($scope.vm.scanContent,function(item,contentIndex){
                if($scope.vm.isEditIndex != contentIndex){
                    angular.forEach(item.channelIdList,function(v){
                        angular.forEach(channel,function(val,indexChannel) {
                            if(val == v){
                                angular.forEach(item.dimensionIdList,function(value){
                                    angular.forEach(dimension,function(key,indexDimension){
                                        if(key==value){
                                            var channelTip;
                                            angular.forEach($scope.vm.channels,function(all){
                                                if(all.channelCode==v){
                                                    channelTip = all.channelName
                                                }
                                            });
                                            layer.msg("重复添加"+"渠道 "+channelTip+" 维度 "+$scope.vm.dimensionArr.name[indexDimension]);
                                            isRepeat = true
                                        }
                                    })
                                })
                            }
                        });
                    });
                }
            });
            return isRepeat
        }
//********************************  2017/9/5 扩展问删除备份  BEGIN ***********************************************
        // 假删除本地备份
        function backUpExt(item){
            if(!$scope.vm.extensionDeleted.inArray(item)){
                $scope.vm.extensionDeleted.push(item)
            }
        }
        function addLocalExtension(title){
            var result = false ;
            if($scope.vm.extensionDeleted){
                angular.forEach($scope.vm.extensionDeleted,function(item,index){
                    if(title == item.extensionQuestionTitle){
                        result = item ;
                        $scope.vm.extensionDeleted.splice(index,1)
                    }
                })
            }
            return result ;
        }
//********************************  2017/9/5 扩展问删除备份  EDN ***********************************************
//*************************************************************************

        //function addAppoint(item,arr){
        //    if(arr.indexOf(item)==-1){
        //        arr.push(item)
        //    }
        //    $scope.vm.appointRelative = "";  //清楚title
        //    $scope.vm.appointRelativeList = [];  //清除 列表
        //}
        // 動態加載 title
        //$scope.$watch("vm.appointRelative",function(title){
        //    //console.log(title);
        //    if(title){
        //        $timeout(getAppointRelative(title),300)
        //    }
        //});

        //function getAppointRelative(title){
        //    httpRequestPost("/api/ms/conceptKnowledge/getKnowledgeTitle",{
        //        "title" : title
        //    },function(data){
        //        if(data.status == 200){
        //            $scope.vm.appointRelativeList = data.data;
        //            $scope.$apply()
        //        }else{
        //        }
        //        console.log(data);
        //    },function(error){
        //        console.log(error)
        //    });
        //}
        //引导页方法
        function showTip(){
            $('.shadow_div').show();
            $('.step_div').show();
            $('#step_one').show().siblings().hide();

        }
        function hideTip(){
            $('.shadow_div').hide();
            $('.step_div').hide();
        }

        //上一个
        function prevDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().prev()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().prev().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().prev().offset().top-20
                }, 500);
            }else{
                // $(obj).attr('disabled',true);
                return;
            }
        }
        //下一个
        function nextDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().next()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().next().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().next().offset().top-20
                }, 500);
            }else{
                //$(obj).attr('disabled',true);
                return;
            }
        }
        //引导页方法end

    }
]);
// Source: app/static/knowledgeManagement/js/controller/document_know_process/analyseTask.controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('analyseTaskController', [
    '$scope', '$location', "$routeParams", "$interval", "$timeout", "ngDialog",
    "KnowDocService","TemplateService","TipService","$state",
    function ($scope, $location, $routeParams, $interval, $timeout, ngDialog,
              KnowDocService,TemplateService,TipService,$state) {
        $scope.vm = {
            searchName  : "" , //搜索条件 templateName
            templates : "" ,  //模板列表
            knowDocs : "", //文档列表
            queryKnowDocList : queryKnowDocList , //獲取列表
            queryTemplate  : queryTemplate , // 获取所有模板
            deleteKnowDoc : deleteKnowDoc , //删除文档
            templateId : "" ,  //模板id
        } ;
        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        //任务模板
        $scope.paginationConf = {
            currentPage: 1,//当前页
            totalItems: 0, //总条数
            pageSize: 10,//第页条目数
            pagesLength: 6 ,//分页框数量
            searchName : "" ,   //搜索文档名称
            startTime : "",   //开始时间
            endTime : "" , //结束时间
            userName : ""  //创建人
        };
        //模板分页
        $scope.temPaginationConf = {
            currentPage: 1,//当前页
            totalItems: 0, //总条数
            pageSize: 5,//第页条目数
            pagesLength: 6,//分页框数量
        };
        //获取模板
       function queryTemplate(){
            TemplateService.queryTemplate.save({
                "index": ($scope.temPaginationConf.currentPage-1)*$scope.temPaginationConf.pageSize,
                "pageSize": $scope.temPaginationConf.pageSize,
                "requestId": "string",
            },function(resource){
                if(resource.status == 200){
                    $scope.vm.templates = resource.data.objs;
                    $scope.temPaginationConf.totalItems = resource.data.total;
                }
            })
        }
         //获取文档列表
         function queryKnowDocList(){
            KnowDocService.queryKnowDocList.save({
                "index": ($scope.paginationConf.currentPage-1)*$scope.paginationConf.pageSize,
                "pageSize": $scope.paginationConf.pageSize,
                "documentationName": $scope.paginationConf.searchName,
                "documentationCreateTime":$scope.paginationConf.startTime,
                "documentationModifyTime": $scope.paginationConf.endTime,
                "documentationCreater": $scope.paginationConf.userName,
                "requestId": "string"
            },function(resource){
                if(resource.status == 200){
                    $scope.vm.knowDocs = resource.data.objs ;
                    $scope.paginationConf.totalItems = resource.data.total;
                    console.log( $scope.paginationConf.totalItems )
                }
            })
        } ;
        //刪除
        function deleteKnowDoc(knowDocId){
            KnowDocService.deleteKnowDoc.save({
                    "documentationId": knowDocId,
            },function(resource){
                if(resource.status == 200){
                    TipService.setMessage('删除成功!',"success");
                    $state.reload();
                }
            })
        } ;

        var timeout;
        $scope.$watch('paginationConf', function () {
            if (timeout) {
                $timeout.cancel(timeout)
            }

            timeout = $timeout(function () {
                //$scope.storeParams(paginationConf);
                queryKnowDocList();
            }, 350)
        }, true) ;

        var timeout3;
        $scope.$watch('temPaginationConf', function (SearchPOJO) {
            if (timeout3) {
                $timeout.cancel(timeout3)
            }
            timeout = $timeout(function () {
                queryTemplate();
            }, 350)
        }, true) ;
    }
])
// Source: app/static/knowledgeManagement/js/controller/document_know_process/back.controller.js
/**
 * Created by miles on 2017/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('backController', [
    '$scope', '$location', "$interval", "$timeout", "$state",
    function ($scope, $location, $interval, $timeout, $state) {
        $state.go("back.gateway");
    }
]);
// Source: app/static/knowledgeManagement/js/controller/document_know_process/createTem.controller.js
/**
 * Created by miles on 2017/7/1.
 * For   模板配置 && 创建模板  公用
 */
angular.module('knowledgeManagementModule').controller('createTemController', [
    '$scope', '$location', "$stateParams", "$interval", "$timeout", "ngDialog",
    "TemplateService","localStorageService","$state","TipService",
    function ($scope, $location, $stateParams, $interval, $timeout, ngDialog,
              TemplateService,localStorageService,$state,TipService) {
        $scope.vm = {
            "temName" :  "" ,    //模板名称
            "temType" : "WORD"  , //模板类型
            "temNameChecked" : false , //模板名称校验
            "fileName" : "未选择文件" ,  //上传文件名称
            "isTempUpToolsShow" : $stateParams.temId ? false : true  , //上传 按钮显示
            "progress" : 0 ,        // 上传进度
            "templateId" : $stateParams.temId ?$stateParams.temId : "" , //模板id
            "rules" : "" , //所有规则
            "addRule" : addRule , //添加规则
            "deleteRule" : deleteRule , //删除已添加规则
            "resetRule" : resetRule ,//取消添加的规则

        } ;
        //通过id 获取模板
        function queryTemplateById(){
            TemplateService.queryTemplateById.save({
                "index":0,
                "pageSize":1,
                "templateId":$scope.vm.templateId
            },function(resource){
                if(resource.status == 200 && resource.data){
                    $scope.vm.temName = resource.data.objs[0].templateName;
                    //$scope.rules = resource.data.rules;
                    var filePath = resource.data.objs[0].templateUrl;
                    var filename=filePath.substring(filePath.lastIndexOf("//")+2,filePath.length);
                    $scope.vm.fileName = filename;
                }
            })
        }
        //获取规则
        function queryRules(){
            TemplateService.queryRules.save({
                "templateId":$scope.vm.templateId
            },function(resource){
                if(resource.status == 200 && resource.data){
                    $scope.vm.rules = resource.data.objs;
                }
            })
        } ;
        //添加规则
        function addRule(){
            if($scope.vm.rules){
                if($scope.vm.rules.length == 0)//判断是否存在模板规则
                {
                    $scope.vm.rules.push({
                        level:0
                    });
                }
                else{
                    $scope.vm.rules.push({
                        level:$scope.vm.rules[$scope.vm.rules.length-1].level+1
                    });
                }
                $('.proce_result ').trigger('click');
            }else{
                 layer.msg("请先上传模板或选定模板");
            }
        } ;
        //删除已添加规则
        function deleteRule(ruleId){
            if(!ruleId){
                return;
            }
            TemplateService.deleteRule.save({
                "ruleId":ruleId
            },function(resource){
                if(resource.status == 200){
                    TipService.setMessage('删除成功!',"success");
                    queryRules();//重新查询规则
                }else{
                    TipService.setMessage('删除失败!',"err");
                }
            })
        };
        // 取消添加的规则
        function resetRule(index){
            var rule = $scope.vm.rules[index];
            if(rule && !rule.id){
                $scope.vm.rules.splice(index,1)
            }
        }
        // 监听templateId
        //For  创建模板 OR  模板添加规则
        var timeout;
        $scope.$watch('vm.templateId', function (temId) {
            if(temId){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    $scope.vm.isTempUpToolsShow = false;//隐藏保持相关按钮
                    queryTemplateById();
                    queryRules();
                }, 350)
            }
        }, true) ;
        // templateName
        //For  监测模板名字 是否 符合
        var timeout2;
        $scope.$watch('vm.temName', function (temName) {
            if(temName && temName != ""){
                if (timeout2) {
                    $timeout.cancel(timeout2)
                }
                timeout2 = $timeout(function () {
                    TemplateService.checkTemName.save({
                        templateName: $scope.vm.temName
                    },function(resource){
                        if(resource.status == 200 && resource.data.objs.length == 0){
                            $scope.vm.temNameChecked = true;
                        }else{
                            $scope.vm.temNameChecked = false;
                        }
                    })
                }, 350)
            }
        }, true) ;
        //修改保存
        $scope.backT = function(){
            history.back();
        };
    }
])
// Source: app/static/knowledgeManagement/js/controller/document_know_process/docResultsView.controller.js
/**
 * @author shaomingjin
 *  知识文档分析结果控制器
 */
angular.module('knowledgeManagementModule').controller('doc_results_viewController', [
    '$scope', 'DetailService','localStorageService','$state','$stateParams',"$timeout",'ngDialog','$cookieStore',
    function ($scope,DetailService,localStorageService,$state,$stateParams,$timeout,ngDialog,$cookieStore) {
        var self = this;
        if($stateParams.knowDocId != null)
            $state.go("back.doc_results_view");
        $scope.knowDocId = $stateParams.knowDocId;
        $scope.knowDocCreateTime = $stateParams.knowDocCreateTime;
        $scope.knowDocUserName = $stateParams.knowDocUserName;

        $scope.vm={
            knowIgnoreAllConfirm : knowIgnoreAllConfirm, //忽略全部
            knowIgnoreConfirm :knowIgnoreConfirm, //忽略单条知识
            addKnowClass : addKnowClass, //添加知识点分类
            refreshFn : refreshFn,
            stateUrlVal: "knowledgeManagement.faqAdd",
            stateUrl : [
                        {value:"knowledgeManagement.faqAdd", name:"FAQ知识"},
                        {value:"knowledgeManagement.singleAddConcept", name:"概念型知识"}
                       ]

        }

        /**
         * 刷新列表
         */
        function refreshFn(){
            $scope.queryDocKnowItems();
        }
        function knowIgnoreAllConfirm(){
            var dialog = ngDialog.openConfirm({
                template:"/static/knowledgeManagement/document_know_process/doc_results_viewDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        $scope.ignoreDocKnowAll();
                    }
                }
            });
        }
        function knowIgnoreConfirm(knowledgeId){
            var dialog = ngDialog.openConfirm({
                template:"/static/knowledgeManagement/document_know_process/doc_results_viewDialog2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        console.info(knowledgeId);
                        $scope.ignoreDocKnow(knowledgeId);
                    }
                }
            });
        }
        function addKnowClass(knowledgeId, knowledgeTitle, knowledgeContent){
            if($cookieStore.get("sceneId") == 2){ //营销场景直接跳转到营销知识新增
                $state.go("knowledgeManagement.conceptAdd",{
                    data:angular.toJson({
                        'docmentation': {
                            'documentationId': $scope.knowDocId,
                            'knowDocCreateTime': $scope.knowDocCreateTime,
                            'knowDocUserName': $scope.knowDocUserName,
                            'knowledgeId': knowledgeId,
                            'documentationTitle': knowledgeTitle,
                            'documentationContext': knowledgeContent
                        }
                    })
                });
            }else{
                var dialog = ngDialog.openConfirm({
                    template:"/static/knowledgeManagement/document_know_process/doc_results_viewDialog_add.html",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){    //关闭回掉
                        if(e === 1){
                            $state.go($scope.vm.stateUrlVal,{
                                data:angular.toJson({
                                    'docmentation': {
                                        'documentationId': $scope.knowDocId,
                                        'knowDocCreateTime': $scope.knowDocCreateTime,
                                        'knowDocUserName': $scope.knowDocUserName,
                                        'knowledgeId': knowledgeId,
                                        'documentationTitle': knowledgeTitle,
                                        'documentationContext': knowledgeContent
                                    }
                                })
                            });
                        }
                    }
                });
            }
        }
        /**
         *  忽略知识点
         * @param knowledgeId
         */
        $scope.ignoreDocKnow = function (knowledgeId) {
            DetailService.ignoreDocKnow.save(
                {
                    "knowledgeId": knowledgeId,
                    "requestId": "string"
                },function(resource){
                    if(resource.status == 200){
                        $scope.vm.refreshFn();
                    }
                },function(){
                    console.info("文档详情查询失败");
                })
        }

        /**
         *  忽略全部知识点
         * @param knowledgeId
         */
        $scope.ignoreDocKnowAll = function () {
            DetailService.ignoreDocKnowAll.save(
                {
                    "documentationId": $scope.knowDocId,
                    "requestId": "string"
                },function(resource){
                    if(resource.status == 200){
                        $scope.vm.refreshFn();
                    }
                },function(){
                    console.info("文档详情查询失败");
                })
        }
        self.initSearch = function (column) {
            if (!$scope.SearchPOJO) {
                $scope.SearchPOJO = $scope.initSearchPOJO();
            }
            /**
             * 加载分页条
             * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
             */
            console.log()
            $scope.paginationConf = {
                currentPage: $scope.SearchPOJO.currentPage,//当前页
                totalItems: 0, //总条数
                pageSize: $scope.SearchPOJO.pageSize,//第页条目数
                pagesLength: 6,//分页框数量

            };
        }
        self.initSearch();

        //根据知识文档id查询相关知识条目
        $scope.queryDocKnowItems = function(){
            if(!$scope.knowDocId)
                return ;
            DetailService.queryDocKnowItems.save(
                {
                    "documentationId": $scope.knowDocId,
                    "knowledgeStatus" : 0, //未分类
                    "index": ($scope.SearchPOJO.currentPage-1)*$scope.SearchPOJO.pageSize,
                    "pageSize": $scope.SearchPOJO.pageSize,
                    "requestId": "string",
                },function(resource){
                    //分页数据没有状态
                    if(resource.status == 200){
                        $scope.paginationConf.totalItems = resource.data.total;
                        $scope.knowItems = resource.data.objs;
                    }
                },function(){
                    console.info("文档详情查询失败");
                })
        }

        //监听分页菜单的变化
        var timeout3;
        $scope.$watch('SearchPOJO', function (SearchPOJO) {
            if (timeout3) {
                $timeout.cancel(timeout3);
            }
            timeout3 = $timeout(function () {
                $scope.queryDocKnowItems();
            }, 350)
        }, true)
    }
])
// Source: app/static/knowledgeManagement/js/controller/document_know_process/docSelect.controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('docSelectController', [
    '$scope', '$location', "$stateParams", "$interval", "$timeout", "ngDialog",
    "TemplateService","localStorageService","$state","$sce","$cookieStore",
    function ($scope, $location, $stateParams, $interval, $timeout, ngDialog,
              TemplateService,localStorageService,$state,$sce,$cookieStore) {
        $scope.vm = {
            "roleId" :  $stateParams.roleId ,    //规则ID
            "temId" : $stateParams.temId  , //模板ID
            "level" : $stateParams.level , //目录等级

            "checkModel" : 1 ,  //

            "checkedRule" : {} ,        //

            "queryRole" : queryRole , //获取规则
            "queryTemplateContent" : queryTemplateContent , //获取模板样例
            "queryTemContent" : "",  // 模板样例

            "titleText" : "" ,
            "returnRole" : "" ,
            "extractRegTxt" : "",   //*remove*正则描述
            "checkedRuleIndex" : 0 ,

            "getSimilarText" : getSimilarText  ,// 根据标题获取相关规则
            "strs" : "" , //获取的相关内容
            "saveWordRule" : saveWordRule , // 保存规则
            "rules" : "" ,
            "generateRule" : generateRule //标题测试
        } ;
        //获取规则
        function queryRole(){
            TemplateService.queryRuleById.save({
                ruleId: $scope.vm.roleId
            },function(re){
                if(re.status == 200){
                    var data = re.data;
                    $scope.vm.titleText = data.inputText ;
                    $scope.vm.extractRegTxt = data.extractReg ;
                    $scope.vm.checkModel = data.model ;
                    $scope.vm.returnRole = data;
                    generateRule();
                }
            })
        }
        //获取模板样例
         function queryTemplateContent() {
            TemplateService.queryTemplateContent.save({
                "index": 0,
                "pageSize": 1,
                "templateId": $scope.vm.temId
            },function(re){
                if(re.status == 200){
                    if($scope.notEmpty(re.data) && re.data.length > 0){
                        $scope.vm.queryTemContent = $sce.trustAsHtml(re.data);
                    }
                }
            })
        }

       function generateRule(){
           console.log($scope.vm.titleText)
            if(!$scope.vm.titleText || $scope.vm.titleText == ''){
                 layer.msg("请填写匹配标题");
                return;
            }
            TemplateService.generateRule.save({
                "templateId":$scope.vm.temId,
                "level":$scope.vm.level,
                "text":$scope.vm.titleText
            },function(re){
                if(re.status == 200){
                    if(re.data.objs.length > 0){
                        $scope.vm.rules = re.data.objs;
                        for(var i=0;i<$scope.vm.rules.length;i++){
                            var rule = $scope.vm.rules[i] ;
                            if($scope.vm.returnRole && $scope.vm.returnRole.firstLineIndent==rule.firstLineIndent && $scope.vm.returnRole.fontAlignment == rule.fontAlignment && $scope.vm.returnRole.selectText == rule.lineWord){
                                $scope.vm.checkedRuleIndex = i;
                            }
                        }
                        getSimilarText();
                    }
                }
            })
        }
        //根据标题获取相关规则
       function getSimilarText(){
           console.log()
            if($scope.vm.rules != undefined && $scope.vm.checkedRuleIndex != undefined && $scope.vm.rules[$scope.vm.checkedRuleIndex] != undefined){
                $scope.vm.checkedRule = $scope.vm.rules[$scope.vm.checkedRuleIndex];
            }else{
                $scope.vm.checkedRule = undefined;
            }

            if(!$scope.vm.checkedRule || $scope.vm.checkedRule == ''){
                 layer.msg("请选择匹配标题");
                return;
            }
            TemplateService.getSimilarText.save({
                "lineWord":$scope.vm.checkedRule.lineWord,
                "firstLineIndent":$scope.vm.checkedRule.firstLineIndent,
                "fontAlignment":$scope.vm.checkedRule.fontAlignment,
                "level":$scope.vm.checkedRule.level,
                "model":$scope.vm.checkedRule.model,
                "numFmt":$scope.vm.checkedRule.numFmt,
                "numLevelText":$scope.vm.checkedRule.numLevelText,
                "style":$scope.vm.checkedRule.style,
                "templateId":$scope.vm.checkedRule.templateId
            },function(re){
                if(re.status == 200){
                    if(re.data.objs.length > 0){
                        $scope.vm.strs = re.data.objs;
                        //if($scope.vm.extractRegTxt != null && $scope.vm.extractRegTxt != '')
                        //    $scope.optimizeText();
                    }else{
                         layer.msg("未能抽取到匹配内容");
                    }
                }
            })
        } ;
       function saveWordRule(){
            if($scope.vm.rules != undefined && $scope.vm.checkedRuleIndex != undefined && $scope.vm.rules[$scope.vm.checkedRuleIndex] != undefined){
                $scope.vm.checkedRule = $scope.vm.rules[$scope.vm.checkedRuleIndex];
            }else{
                $scope.vm.checkedRule = undefined;
            }

            if(!$scope.vm.checkedRule){
                 layer.msg("请选择要保存的规则");
                return;
            }
            var params = {
                "lineWord":$scope.vm.checkedRule.lineWord,
                "firstLineIndent":$scope.vm.checkedRule.firstLineIndent,
                "fontAlignment":$scope.vm.checkedRule.fontAlignment,
                "level":$scope.vm.checkedRule.level,
                "model":$scope.vm.checkModel,
                "numFmt":$scope.vm.checkedRule.numFmt,
                "numLevelText":$scope.vm.checkedRule.numLevelText,
                "style":$scope.vm.checkedRule.style,
                "templateId":$scope.vm.checkedRule.templateId,
                "extractReg":$scope.vm.extractRegTxt,
                "inputText":$scope.vm.titleText,
                "selectText":$scope.vm.checkedRule.lineWord,
                "ruleId":$scope.vm.roleId,
                "templateCreater": USER_NAME,
                "templateUpdater": USER_NAME,
                "requestId":"String"
            };
            if($scope.vm.roleId && $scope.vm.roleId != null && $scope.vm.roleId != "")
                TemplateService.updateWordRule.save(params, function(re){
                    if(re.status == 200){
                        $state.go("back.createTemplate",{"isGo":true ,"temId":$scope.vm.temId});
                    }
                });
            else
            {
                TemplateService.addWordRule.save(params, function(re){
                    if(re.status == 200){
                        $state.go("back.createTemplate",{"isGo":true ,"temId":$scope.vm.temId});
                        //history.back();
                    }
                });
            }

        }

        // var timeout;
        // $scope.$watch('checkedRule', function (rule) {
        //     if(rule != {}){
        //         if (timeout) {
        //             $timeout.cancel(timeout)
        //         }
        //         timeout = $timeout(function () {
        //             $scope.extractRegTxt = '';
        //         }, 350)
        //     }
        // }, true)

        // $scope.showExtractReg = function(){
        //     $scope.showExtract = !$scope.showExtract;
        //     if(!$scope.showExtract){
        //         $scope.extractReg = '';
        //     }
        // }
        queryTemplateContent();
        if($scope.vm.roleId != null && $scope.vm.roleId != ""){
            queryRole();
        }


        /*
        *  文档加工正则相关
        *
        *  功能删除
        * */
        //$scope.optimizeText = function(){
        //    if(!$scope.vm.strs || $scope.vm.strs.length <= 0){
        //        layer.msg("没有匹配的标题");
        //        return;
        //    }
        //    if(!$scope.vm.extractRegTxt || $scope.vm.extractRegTxt == ''){
        //        layer.msg("请输入正则表达式");
        //        return;
        //    }
        //    TemplateService.optimizeText.save({
        //        "regexRule":$scope.vm.extractRegTxt,
        //        "texts":$scope.vm.strs
        //    },function(re){
        //        if(re.status == 200){
        //            if(re.data.objs.length > 0){
        //                $scope.extractStrs = re.data;
        //            }else{
        //                layer.msg("未能匹配到相应正则结果");
        //            }
        //        }
        //    })
        //} ;
        
    }
])
// Source: app/static/knowledgeManagement/js/controller/document_know_process/tem.controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('temController', [
    '$scope', '$location', "$routeParams", "$interval", "$timeout", "ngDialog",
    "TemplateService","TipService","$state",
    function ($scope, $location, $routeParams, $interval, $timeout, ngDialog,
              TemplateService,TipService,$state) {
        $scope.vm = {
            searchName  : "" , //搜索条件 templateName
            deleteTemplate : deleteTemplate , //删除模板
            queryTemplate  : queryTemplate , // 获取所有模板
        } ;
        //(function initSearch(column) {
        //    if (!$scope.SearchPOJO) {
        //        $scope.SearchPOJO = $scope.initSearchPOJO();
        //    }
            /**
             * 加载分页条
             * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
             */
            $scope.paginationConf = {
                currentPage: 1,//当前页
                totalItems: 0, //总条数
                pageSize: 10,//第页条目数
                pagesLength: 6 ,//分页框数量
                searchName : ""
            };
        //})() ;
        //获取模板
        function queryTemplate(){
            TemplateService.queryTemplate.save(
                {
                    "index": ($scope.paginationConf.currentPage-1)*$scope.paginationConf.pageSize,
                    "pageSize": $scope.paginationConf.pageSize,
                    "requestId": "string",
                    "templateName": $scope.paginationConf.searchName
                }
               ,function(resource){
                if(resource.status == 200){
                    $scope.templates = resource.data.objs ;
                    $scope.paginationConf.totalItems = resource.data.total;
                }
            })
        };
        //删除模板
     function deleteTemplate(temId){
            TemplateService.deleteTemplate.save({
                "templateId":temId
            },function(resource){
                if(resource.status == 200){
                    TipService.setMessage('删除成功!',"success");
                    queryTemplate();
                }
            })
        }
        ////获取文档类型
        //$scope.temType = function(typeNum){
        //    if(typeNum == 1){
        //        return "WORD"
        //    }
        //} ;
        var timeout;
        $scope.$watch('paginationConf', function () {
            if (timeout) {
                $timeout.cancel(timeout)
            }
            timeout = $timeout(function () {
                queryTemplate();
            }, 350)
        }, true) ;
    }]) ;
// Source: app/static/knowledgeManagement/js/controller/factor.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('knowledgeEssentialController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","knowledgeAddServer","$window","$stateParams","$interval","$rootScope","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,knowledgeAddServer,$window,$stateParams,$interval,$rootScope,$filter) {
        $scope.vm = {
            knowledgeId : "" ,
            knowledgeOrigin : 120 ,
            frames : [],      //业务框架
            frameId : "",
            botRoot : "",      //根节点
            knowledgeBotVal : "",  //bot 内容
            botSelectAdd : botSelectAdd,
            frameCategoryId : "",
            title : "",   //标题
            titleTip :  "",
            timeStart : "",      //起始时间
            timeEnd : "",
            isTimeTable : false,  //时间表隐藏
            //生成  知识标题 打标生成 BOT 扩展问
            getBotAndExtensionByTitle : getBotAndExtensionByTitle,
            //creatBot : [],

            botClassfy : [],   //类目
            creatSelectBot : [], //手选生成 bot

            //扩展问
            extensionTitle : "",
            extensionWeight :60,
            getExtension : getExtension,  //獲取擴展問
            extensions : [],      //手動生成
            extensionByTitleTag : [] , //标题打标生成扩展问
            extensionEdit : extensionEdit,
            botFullPath : "",

            //展示内容
            scanContent : [],
            save : save ,   //保存
            scan :scan ,   //预览
            //高级选项
            newTitle: "",    //标题
            channel : [],     //新添加的 channel
            channels : [],     //所有渠道
            channelArr : [] ,
            selectChannel : selectChannel , //獲取渠道
            dimension  : "",
            dimensions : []
            ,  //所有维度
            dimensionArr : [],  //選擇的維度
            dimensionsCopy :[]
            ,

            //高级选项内容
            slideDown : slideDown,
            slideFlag : false,

            question : 1,
            tip : 1,
            tail : 1 ,

            knowledgeTitleTag : [],

            appointRelative : "",
            appointRelativeList :[],
            // addAppoint  : addAppoint,

            appointRelativeGroup : [],
            replaceType : 0 ,
            enterEvent : enterEvent,  //鍵盤事件
            //表格
            addList : addList,  //table 添加列
            editList : editList , //编辑表格
            tableRow : null,   //行
            tableColumn : null,  //刪除用
            tableChange : tableChange  ,//編輯
            tableRemove : tableRemove, //删除行或列
            addRow : addRow,   //添加行
            gorithm : ['NLP'], //语义挖掘
            tableType : "字符串",   //类型
            factorName : null,   //要素名称
            reQuestion : null, //反问

            tableList: "",
            listTableType: "",
            data : "",
            column:"" ,
            tableSaveCheck : tableSaveCheck ,  // 添加的行列是否符合要求

            limitSave : false ,//限制多次打标
//*******************2017/8/3  BEGIN   删除扩展问本地备份 *******************//
            rmExtensionBackup : [] ,
//*******************2017/8/3  END   删除扩展问本地备份   *******************//
            //引到页
            showTip : showTip,
            hideTip : hideTip,
            prevDiv : prevDiv,
            nextDiv : nextDiv,
            //引到页end
            isDecorateSimple : false  ,// true 单独修饰  false  整体修饰
            backupsOfExtension : "" ,//扩展问 编辑备份
            sourceTitle : "" ,
            backUpExt: backUpExt , // 扩展问 假删除
            extensionDeleted : []
        };
        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions","dimensionsCopy"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        if($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase){
            var data = angular.fromJson($stateParams.data) ;
            //标题
            $scope.vm.title =  data.knowledgeBase.knowledgeTitle ;
            $scope.vm.sourceTitle =  data.knowledgeBase.knowledgeTitle ;
            // 标题打标结果
            $scope.vm.knowledgeTitleTag = data.knowledgeBase.knowledgeTitleTag ;
            // 时间
            if(data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd){
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart  =  $filter("date")(data.knowledgeBase.knowledgeExpDateStart,"yyyy-MM-dd") ;
            $scope.vm.timeEnd  = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd,"yyyy-MM-dd") ;
            //bot路径
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList ;
            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId ;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin ;
            //扩展问
            $scope.vm.extensions = data.extensionQuestions;
            //内容
            angular.forEach(data.knowledgeContents,function(item){
                var obj = {} ;
                //obj.knowledgeContent = item.knowledgeContent;
                $scope.vm.tableList = {} ;
                $scope.vm.tableList.data = item.knowledgeContent ;
                //維度，添加預覽效果   以name id 的 形式显示
                obj.channelIdList =  item.channelIdList ;
                obj.dimensionIdList =  item.dimensionIdList ;

                $scope.vm.channel = item.channelIdList ;
                $scope.vm.dimensionArr = [] ;
                    //异步原因
                var getDimension = $interval(function(){
                        if($scope.vm.dimensions){
                            $interval.cancel(getDimension);
                            angular.forEach($scope.vm.dimensions,function(val){
                                if(item.dimensionIdList.inArray(val.dimensionId)){
                                    var obj = {};
                                    obj.dimensionName = val.dimensionName;
                                    obj.dimensionId = val.dimensionId;
                                    $scope.vm.dimensionArr.push(obj);
                                    console.log( $scope.vm.dimensionArr )
                                }
                            });
                        }
                    },100) ;
                $scope.vm.question =item.knowledgeRelatedQuestionOn ;   //显示相关问
                $scope.vm.tip  =  item.knowledgeBeRelatedOn ; //在提示
                $scope.vm.tail = item.knowledgeCommonOn ;   //弹出评价小尾巴
                $scope.vm.appointRelativeGroup = item.knowledgeRelevantContentList!=null?item.knowledgeRelevantContentList : [];  //业务扩展问
            });
        }else{
            init();
        }
        if($stateParams.knowledgeTitle){
            console.log("======"+$stateParams.knowledgeTitle);
            $scope.vm.title=$stateParams.knowledgeTitle;
        }
        function init(){
            $scope.vm.tableList = {
                "data": {"listTable" : new Array(new Array("答案"))}
            };
            //var column = [];
            //var innerColumn = [];
            //innerColumn.push("产品名称");
            //column.push(innerColumn);
            //var listTable = {
            //    "listTable":column
            //} ;
            //$scope.vm.tableList.data =  listTable;
            $scope.vm.listTableType = [];
            var newType = {};
            newType.elementName = "答案";
            newType.elementType = "字符串";
            newType.technology = null;
            newType.elementAsk = "";
            newType.relatedQuestions = null;
            $scope.vm.listTableType.push(newType);
            $scope.vm.tableList.data.listTableType=$scope.vm.listTableType;
            //$scope.$apply();
        }

        function tableChange(row, col ,val){
            $scope.vm.tableList.data.listTable[row][col] = val;
        }
        function tableRemove(type){
            switch (type){
                case 1:
                    if($scope.vm.tableRow==0){
                        layer.msg("不可删除第一行")
                    }else if($scope.vm.tableRow==null){
                        layer.msg("请先选择要删除的行")
                    }else{
                        $scope.vm.tableList.data.listTable.splice($scope.vm.tableRow,1);
                        $scope.vm.tableRow = null
                    }
                    break;
                case 2:
                    if($scope.vm.tableColumn==0){
                        layer.msg("不可删除第一列")
                    }else if($scope.vm.tableRow==null){
                        layer.msg("请先选择要删除的列")
                    }else{
                        angular.forEach($scope.vm.tableList.data.listTable,function(item,tableRow){
                            angular.forEach(item,function(val,index){
                                if(index == $scope.vm.tableColumn){
                                    $scope.vm.tableList.data.listTable[tableRow].splice(index,1)
                                }
                            })
                        });
                        $scope.vm.tableList.data.listTableType.splice($scope.vm.tableColumn,1)
                        $scope.vm.tableColumn = null
                    }
                    break;
            }
        }
        function addRow(){
            var len = $scope.vm.tableList.data.listTable[0].length;
            var arr = new Array(len);
            for(var i = 0 ; i < len ; i ++){
                arr[i] = null
            }
            $scope.vm.tableList.data.listTable.push(arr);
        }
        //检验是否合理保存 ==> 检查要素名称以及反问
        function tableSaveCheck(){
            if(!$scope.vm.factorName){
                layer.msg("请填写要素名称后保存")
            }else if(!$scope.vm.elementAsk){
                layer.msg("请填写反问后保存")
            }else{
                ngDialog.closeAll(1)
            }
        }
        function addList(row,column){
            var dia = angular.element(".ngdialog ");
            if(dia.length==0) {
                var dialog = ngDialog.openConfirm({
                    template: "/static/knowledgeManagement/factor/factorDialog.html",
                    width:"695px",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                        if (e === 1) {
                            angular.forEach($scope.vm.tableList.data.listTable, function (item, index) {
                                if (index == 0) {
                                    $scope.vm.tableList.data.listTable[index].push($scope.vm.factorName)
                                } else {
                                    $scope.vm.tableList.data.listTable[index].push(null)
                                }
                            });
                            var newType = {
                                "elementName" : $scope.vm.factorName ,
                                "elementType" : $scope.vm.tableType ,
                                "technology" : $scope.vm.gorithm ,
                                "elementAsk" : $scope.vm.elementAsk ,
                                "relatedQuestions" :null
                            };
                            $scope.vm.tableList.data.listTableType.push(newType);
                            setDialogNew();
                        }else{
                            setDialogNew();
                        }
                    }
                });
            }
        }

        function editList(row,column){
            $scope.vm.factorName = $scope.vm.tableList.data.listTableType[column].elementName;
            $scope.vm.tableType = $scope.vm.tableList.data.listTableType[column].elementType;
            $scope.vm.gorithm=$scope.vm.tableList.data.listTableType[column].technology;
            $scope.vm.elementAsk = $scope.vm.tableList.data.listTableType[column].elementAsk;
            var dialog = ngDialog.openConfirm({
                template:"/static/knowledgeManagement/factor/factorDialog.html",
                width:'695px',
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        $scope.vm.tableList.data.listTableType[column].elementName =  $scope.vm.factorName;
                        $scope.vm.tableList.data.listTableType[column].elementType = $scope.vm.tableType;
                        $scope.vm.tableList.data.listTableType[column].technology =  $scope.vm.gorithm;
                        $scope.vm.tableList.data.listTableType[column].elementAsk = $scope.vm.elementAsk;
                        $scope.vm.tableList.data.listTable[0][column] = $scope.vm.factorName;
                        setDialogNew();
                    }else{
                        setDialogNew();
                    }
                }
            });
        }
        function getTableParams(){
            console.log($scope.vm.tableList.data)
            if(!$scope.vm.tableList.data){
                console.log("请上传表格知识") ;
                return false ;
            }else{
                //console.log()
                var tabelData = angular.copy($scope.vm.tableList.data);
                //console.log(tabelData) ;
                var params = {} ;
                var ask = [] ;
                var items = [];
                // 反问
                angular.forEach(tabelData.listTableType, function (item,index) {
                    if(index>0){
                        var obj = {};
                        obj.name = item.elementName;
                        obj.value = item.elementAsk ;
                        ask.push(obj) ;
                        //console.log(ask);
                    }
                });
                angular.forEach(tabelData.listTable,function(item,icon){
                    if(icon>0){
                        var row = {} ;
                        row.name = item[0] ;
                        row.slots =[];
                        angular.forEach(tabelData.listTableType, function (val,cur) {
                            if(cur>0){
                                var slot = {} ;
                                slot.name = val.elementName;
                                slot.value = tabelData.listTable[icon][cur];
                                slot.type = val.elementType ;
                                slot.algorithm = val.technology;
                                row.slots.push(slot)
                            }
                        });
                        items.push(row)
                    }
                });
                params.asks = ask;
                params.items = items;
                return JSON.stringify(params)
            }
         }
        function setDialogNew(){
            $scope.vm.factorName = null ;
            $scope.vm.tableType = "字符串";
            $scope.vm.gorithm = ['NLP'];
            $scope.vm.elementAsk = null;
        }
// 通过类目id 获取框架
        function getFrame(id){
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId":10013,
                "index": 0,
                "pageSize":32767
            },function(data){
                //console.log(data);
                if(data.status!=10005){
                    if(data.data.length){
                        $scope.vm.frames = $scope.vm.frames.concat(data.data) ;
                        $scope.$apply();
                    }
                }
            },function(){
                console.log("err or err")
            });
        }
        $scope.$watch("vm.frameCategoryId",function(val,old){
            if(val&&val!=old){
                getFrame( val )
            }
        });

        //replace()
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId",function(val,old){
            if(val&&val!=old){
                //if($scope.vm.extensions.length){
                //    //  替換條件
                //    replace(val);
                //}else{
                    // 在未生成扩展问情況
                    getTableListByFrame(val);
                //}
            }
        });

        // 通过frame 获取扩展问
        function getTableListByFrame(id,type){
            //console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameTypeId": 10013,
                "frameId": id,
                "index": 0,
                "pageSize":32767
            },function(data){
                if(data.status==10000){
                    if(data.data[0].elements){
                        $.each(data.data[0].elements,function(index,value){
                            console.log("===="+value.elementContent);
                            var addFlag = true;
                            for(var i=0;i<$scope.vm.tableList.data.listTable[0].length;i++){
                                console.log("==="+$scope.vm.tableList.data.listTable[0][i]);
                                if($scope.vm.tableList.data.listTable[0][i]!=value.elementContent){
                                    for(var i = 0 ; i < $scope.vm.tableList.data.listTable.length-1 ; i ++ ){
                                        $scope.vm.tableList.data.listTable[i+1].push("")
                                    }
                                    $scope.vm.tableList.data.listTable[0].push(value.elementContent);
                                    var newType = {};
                                    newType.elementName = value.elementContent;
                                    newType.elementType = switchContentType(value.elementTypeId);
                                    var miningTypeArr = [];
                                    miningTypeArr.push(switchMiningType(value.elementMiningTypeId));
                                    newType.technology = miningTypeArr;
                                    newType.elementAsk = value.elementAskContent;
                                    newType.relatedQuestions = value.elementRelateConcept;
                                    $scope.vm.tableList.data.listTableType.push(newType);
                                    $scope.$apply();
                                }
                            }
                        });
                    }
                }
            },function(){
                 console.log("获取表格失败") ;
            });
        }

        function switchMiningType(type){
            var returnStr = "NLP";
            //var returnStr = "OEC";                   //nnf-6.21修改
            // switch(type){
            //     case 10017:
            //         returnStr = "OEC";
            //         break;
            //     case 10018:
            //         returnStr = "GATE";
            //         break;
            // }
            return returnStr;
        }

        function switchContentType(type){
            var returnStr = "字符串";
            switch(type){
                case 10014:
                    returnStr = "字符串";
                    break;
                case 10015:
                    returnStr = "日期";
                    break;
                case 10016:
                    returnStr = "范围";
                    break;
            }
            return returnStr;
        }

        // 获取Bot全路径
        function getBotFullPath(id){
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                categoryId: id
            },function(data){
                console.log(data) ;
                if(data.status = 10000){
                    var allBot = angular.copy($scope.vm.creatSelectBot.concat($scope.vm.botClassfy)) ,
                        botResult = $scope.master.isBotRepeat(id,data.categoryFullName.split("/"),"",allBot) ;
                    $scope.$apply(function(){
                        console.log(data) ;
                        $scope.vm.knowledgeBotVal = data.categoryFullName;
                        if(botResult != false){
                            //$scope.vm.knowledgeBotVal = data.categoryFullName.split("/");
                            $scope.vm.botFullPath= botResult;
                        }
                    });
                    //var len = $scope.vm.creatSelectBot.length;
                    //var obj = {};
                    //if(len){
                    //    angular.forEach($scope.vm.creatSelectBot,function(item){
                    //        if(item.classificationId!=id){
                    //            len-=1
                    //        }
                    //    });
                    //    if(len==0){
                    //        obj.className = data.categoryFullName.split("/");
                    //        obj.classificationId = id ;
                    //        obj.classificationType = 1;
                    //    }else{
                    //        layer.msg("添加分类重复");
                    //        return false
                    //    }
                    //}else{
                    //    obj.className = data.categoryFullName.split("/");
                    //    obj.classificationId = id ;
                    //    //obj.classificationType = 1;
                    //}
                    //$scope.vm.knowledgeBotVal = obj.className;
                    //$scope.vm.botFullPath=obj;
                    //$scope.$apply();
                }
            },function(){
                //console.log("添加扩展问失败")
            });
        }

        //手动添加扩展问
        function getExtension(title,weight,source){
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                if(!source){
                    $scope.vm.extensions.push(isLocalHasExt);
                }else{
                    $scope.vm.extensionByTitleTag = new Array(isLocalHasExt)
                }
                return ;
            }
            //source  0 默认  1 标题;
            var question = new Array(title);
            var obj = {
                "extensionQuestionTitle" :title,
                "extensionQuestionType" : weight
            } ;
            if(!$scope.vm.extensionTitle && !source){
                layer.msg("扩展问不能为空")
            }else if(!chackTitleAndextEnsionQuestion($scope.vm.title,$scope.vm.extensionTitle)){
                layer.msg("扩展问和标题重复请重新输入扩展问") ;
                return ;
            }else if(!checkExtensionByTitle(obj)){
                layer.msg("扩展问重复,,已阻止添加");
                return false
            }else{
                httpRequestPost("/api/ms/elementKnowledgeAdd/checkDistribute",{
                    "applicationId": APPLICATION_ID,
                    "extendQuestionList" : question
                },function(data){
                    if(data.status == 500){
                        layer.msg(data.data);
                    }else if(data.status == 10026 ){
                        layer.msg("扩展问添加重复，请重新添加")
                    }else if(data.status==200){
                        $scope.$apply(function(){
                            var allExtension = $scope.vm.extensions ;
                            var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                            if(result != false){
                                $scope.vm.extensionTitle = "";
                                if(!source){
                                    $scope.vm.extensions.push(result);
                                }else{
                                    $scope.vm.extensionByTitleTag = new Array(result)
                                }
                            }
                        })
                    }
                },function(error){
                    console.log(error)
                });
            }
        }
////////////////////////////////////// ///         Bot     /////////////////////////////////////////////////////
        $scope.master.botTreeOperate($scope,"/api/ms/modeling/category/listbycategorypid","/api/ms/modeling/category/listbycategorypid",getBotFullPath
            //"/api/ms/modeling/category/searchbycategoryname"
        ) ;
        //BOT搜索自动补全
        $scope.master.searchBotAutoTag(".botTagAuto","/api/ms/modeling/category/searchbycategoryname",function(suggestion){
            $scope.$apply(function(){
                var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
                    botResult = $scope.master.isBotRepeat(suggestion.data,suggestion.value.split("/"),suggestion.type,allBot) ;
                $scope.vm.knowledgeBotVal = suggestion.value;
                if(botResult != false){
                    $scope.vm.botFullPath= botResult;
                }
            })
        });

        //添加BOT 分类  ==== 点击bot分类的 加号
        function botSelectAdd(){
            console.log($scope.vm.botFullPath);
            if($scope.vm.botFullPath){
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = null;
                $scope.vm.knowledgeBotVal = "";
                $(".icon-jj").eq(0).css("backgroundPosition","0% 0%");
            }
        }

////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
        function replace(id){
                var replace = ngDialog.openConfirm({
                    template:"/static/knowledgeManagement/faq/replace.html",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){     //关闭回掉
                        if(e === 1){    //替换
                            getTableListByFrame( id ,1 )
                        }else if(e === 0){
                            // 添加不替换
                            getTableListByFrame( id ,0 )
                        }
                    }
                });
        }

        function extensionEdit(type,item,index){
            //type  1 框架生成  0 手动添加
            $scope.vm.backupsOfExtension = angular.copy(item) ;
            console.log($scope.vm.backupsOfExtension) ;
            var dia = angular.element(".ngdialog ");
            if(dia.length==0){
                var extensionEdit = ngDialog.openConfirm({
                    template:"/static/knowledgeManagement/public-html/extension_edit.html",
                    width:"500px",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){     //关闭回掉
                        if(e === 1){
                           if(type == 0){
                                $scope.vm.extensions[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 2){
                                $scope.vm.extensionByTitleTag[index] = $scope.vm.backupsOfExtension ;
                            }
                        }else{$scope.vm.backupsOfExtension = ""; }
                    }
                });
            }
        }

        function slideDown(){
            $scope.vm.slideFlag = ! $scope.vm.slideFlag;
            $(".senior_div").slideToggle();
            if($scope.vm.slideFlag){
                $(".senior_div").css('overflow','visible');
            }
        }

/**
 * 校验标题和扩展问重复
 */
        function  chackTitleAndextEnsionQuestion(title,ensionQuestionTitle){
            console.log(title);
            console.log(ensionQuestionTitle);
            if(title!=""){
                if(title==ensionQuestionTitle){
                    return false;
                }else{
                    return true;
                }
            }
            if(ensionQuestionTitle!=""){
                if(ensionQuestionTitle==title){
                    return false;
                }else{
                    return true;
                }
                return false;
            }
        }

        //根據 標題 生成 bot 跟 扩展问
        function getBotAndExtensionByTitle(){
            if($scope.vm.title && $scope.vm.sourceTitle!=$scope.vm.title){
                getExtension($scope.vm.title,"60",1) ; //生成扩展问
                httpRequestPost("/api/ms/elementKnowledgeAdd/byTitleGetClassify",{
                    "title" :  $scope.vm.title,
                    "applicationId": APPLICATION_ID ,
                    "knowledgeId" : $scope.vm.knowledgeId
                },function(data){
                    console.log(data);
                    if(data.status == 500){    //标题打标失败
                        $scope.vm.titleTip = "知识标题重复";
                        $scope.$apply()
                    }else if(data.status == 10002){
                        $scope.vm.titleTip = data.info;
                        $scope.$apply()
                    } else if(data.status == 200){

                        $scope.$apply(function(){
                            //標題打标结果
                            $scope.vm.knowledgeTitleTag = data.data.knowledgeTitleTagList ;
                            $scope.vm.botClassfy = [];   //reset 标题生成bot
                            //添加校验是否添加校验  获取所有bot 验证是否重复
                            var allBot = angular.copy($scope.vm.creatSelectBot) ;
                            angular.forEach(data.data.classifyList, function (item) {
                                var botResult = $scope.master.isBotRepeat(item.id,item.fullPath,item.type,allBot) ;
                                if(botResult != false){
                                    $scope.vm.botClassfy.push(botResult);
                                }
                                $scope.vm.frameCategoryId = item.id;
                            });
                        });
                    }
                },function(error){
                    console.log(error)
                });
            }else if($scope.vm.sourceTitle==$scope.vm.title) {
                getExtension($scope.vm.title,"60",1) ; //生成扩展问
            }else{
                $scope.vm.titleTip = "知识标题不能为空"
            }
        }
        //  主页保存 获取参数
        function getParams(){
            console.log(getTableParams()) ;
           var  params =  {
                "applicationId": APPLICATION_ID,
                "knowledgeId": $scope.vm.knowledgeId ,
                "userId" : USER_ID ,
                "sceneId" : SCENE_ID ,
                "knowledgeType": 103,
                "knowledgeTitle": $scope.vm.title,      //知识标题
                "knowledgeExpDateStart" : $scope.vm.isTimeTable?$scope.vm.timeStart:null,  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable?$scope.vm.timeEnd:null,     //结束时间
                "knowledgeTitleTag" : $scope.vm.knowledgeTitleTag,    //标题打标生成的name
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME ,  //操作人
                "knowledgeOrigin" : $scope.vm.knowledgeOrigin
            };
                var title = angular.copy($scope.vm.newTitle);
                var obj = {};
                obj.knowledgeContent = getTableParams();
                obj.channelIdList =  $scope.vm.channel;
                if($scope.vm.dimensionArr != null && $scope.vm.dimensionArr.length != 0 && !$scope.vm.dimensionArr.id.length){
                    $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
                    obj.dimensionIdList =  $scope.vm.dimensionArr.id.length?$scope.vm.dimensionArr.id:$scope.vm.dimensionsCopy.id;
                }else {
                    $scope.vm.dimensionArr = [];
                    obj.dimensionIdList = [];
                }
                obj.knowledgeRelatedQuestionOn = $scope.vm.question ;   //显示相关问
                obj.knowledgeBeRelatedOn  =  $scope.vm.tip ; //在提示
                obj.knowledgeCommonOn = $scope.vm.tail ;   //弹出评价小尾巴
            obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup;  //业务扩展问
            $scope.vm.scanContent=new Array(obj);
            params.knowledgeContents =  angular.copy($scope.vm.scanContent) ;
            params.extensionQuestions =  $scope.vm.extensions.concat($scope.vm.extensionByTitleTag) ;
            params.classificationAndKnowledgeList = $scope.vm.botClassfy.concat($scope.vm.creatSelectBot);
            return params
        }
        //限制一个知识多次保存
        var limitTimer ;
        function save() {
                if (!checkSave()) {
                    return false
                } else {
                    if(!$scope.vm.limitSave){
                        $timeout.cancel(limitTimer) ;
                        $scope.vm.limitSave = true ;
                        limitTimer = $timeout(function(){
                            $scope.vm.limitSave = false ;
                        },180000) ;
                        $scope.vm.data = getParams();
                        var api = $scope.vm.knowledgeId?"/api/ms/elementKnowledgeAdd/editElementKnowledge":"/api/ms/elementKnowledgeAdd/addElementKnowledge";
                        httpRequestPost(api, getParams(), function (data) {
                            //console.log(data);
                            if (data.status == 200) {
                                 if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                            } else if (data.status == 500) {
                                layer.msg("知识保存失败") ;
                                $timeout.cancel(limitTimer) ;
                                $scope.$apply(function(){
                                    $scope.vm.limitSave = false ;
                                });
                                console.log($scope.vm.limitSave)
                            }
                        }, function (err) {
                            $timeout.cancel(limitTimer) ;
                            $scope.$apply(function(){
                                $scope.vm.limitSave = false ;
                            });
                        });
                }
            }
        }
        function scan(){
            if(!checkSave()){
                return false
            }else{
                var obj = {};
                var params = getParams();
                //console.log(params);
                obj.params = params;
                obj.editUrl = "knowledgeManagement.factorAdd";
                obj.knowledgeType = 103 ;
                obj.knowledgeId = $scope.vm.knowledgeId ;
                if($scope.vm.knowledgeId){
                    //编辑
                    obj.api = "/api/ms/elementKnowledgeAdd/editElementKnowledge" ;
                    params.knowledgeId = $scope.vm.knowledgeId ;
                }else{
                    //新增
                    obj.api =  "/api/ms/elementKnowledgeAdd/addElementKnowledge"
                }
                $window.knowledgeScan = obj;
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url,'_blank');
            }
        };

        /* *********************              高级选项           **************************/ //

        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channel.inArray(channelId)){
                $scope.vm.channel.remove(channelId);
            }else{
                $scope.vm.channel.push(channelId);
            }
        }
        //检验扩展问 (标题 类型)是否重复
        function checkExtensionByTitle(item){
            var result ;
            //所有标题以及手动打标生成的扩展问
            var arr = $scope.vm.extensionByTitleTag.concat($scope.vm.extensions);
            if(!arr.length){
                result = true ;
            }else{
                var len = arr.length;
                angular.forEach(arr,function(val){
                    if(val.extensionQuestionTitle == item.extensionQuestionTitle && val.extensionQuestionType == item.extensionQuestionType){
                        len-=1 ;
                        //console.log(val.extensionQuestionTitle == item.extensionQuestionTitle);
                        result = false ;
                    }
                    if(len==arr.length){
                        result = true ;
                    }
                })
            }
            return  result ;
        }
//        提交 检验参数
        function checkSave(){
            var params = getParams();
            var isTableHasNull = false ;
            if($scope.vm.tableList.data.listTable[0].length<=1 || $scope.vm.tableList.data.listTable.length<=1){
                isTableHasNull = true ;
            }else{
                angular.forEach($scope.vm.tableList.data.listTable,function(item,index){

                    angular.forEach(item,function(val){
                        if(val == null || val==""){
                            isTableHasNull = true ;
                        }
                    })
                }) ;
            }
            if(!params.knowledgeTitle){
                layer.msg("知识标题不能为空，请填写");
                return false;
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("知识类目不能为空，请选择分类");
                return false;
            }else if(!$scope.$parent.master.isTitleHasTag($scope.vm.title,$scope.vm.extensions.concat($scope.vm.extensionByTitleTag))){
                layer.msg("知识意图未打标");
                return false ;
            }
            else if(!params.knowledgeContents[0].channelIdList.length){
                layer.msg("渠道不能为空") ;
                return false ;
            }else if(isTableHasNull ){
                layer.msg("请完善表格知识");
                return false;
            }else{
                return true
            }
        }

//********************************  2017/9/5 扩展问删除备份  BEGIN ***********************************************
        // 假删除本地备份
        function backUpExt(item){
            if(!$scope.vm.extensionDeleted.inArray(item)){
                $scope.vm.extensionDeleted.push(item)
            }
        }
        function addLocalExtension(title){
            var result = false ;
            if($scope.vm.extensionDeleted){
                angular.forEach($scope.vm.extensionDeleted,function(item,index){
                    if(title == item.extensionQuestionTitle){
                        result = item ;
                        $scope.vm.extensionDeleted.splice(index,1)
                    }
                })
            }
            return result ;
        }
//********************************  2017/9/1 扩展问删除备份  EDN ***********************************************
        // 添加时候 存储对象
        //function saveScan(){
        //    var url = $state.go('custServScenaOverview.manage',{scanData:getParams()});
        //    window.open(url, '_blank');
        //}
//*************************************************************************
//         function addAppoint(item,arr){
//            if(arr.indexOf(item)==-1){
//                 arr.push(item)
//             }
//             $scope.vm.appointRelative = null;  //清楚title
//             $scope.vm.appointRelativeList = [];  //清除 列表
//         }
//         // 動態加載 title
//         $scope.$watch("vm.appointRelative",function(title){
//             //console.log(title);
//             if(title){
//                 $timeout(getAppointRelative(title),300)
//             }
//         });
//
//         function getAppointRelative(title){
//             httpRequestPost("/api/ms/knowledgeManage/getKnowledgeTitle",{
//                 "title" : title,
//                 "applicationId" : APPLICATION_ID
//             },function(data){
//                 if(data.status == 200){
//                     $scope.vm.appointRelativeList = data.data;
//                     $scope.$apply()
//                 }else{
//                 }
//                 //console.log(data);
//             },function(err){
//                 console.log("获取指定相关知识失败")
//             });
//         }
        $timeout(function(){
            $scope.master.searchAppointAutoTag($scope,".appoint","/api/ms/knowledgeManage/getKnowledgeTitle","appointRelativeList",function(suggestion){
                console.log(suggestion) ;
                //$scope.$apply(function(){
                //    if($scope.vm.appointRelativeGroup.indexOf(suggestion)==-1){
                //        $scope.vm.appointRelativeGroup.push(suggestion)
                //    }else{
                //        layer.msg("重复添加相关问")
                //    }
                //    $scope.vm.appointRelative = "";  //清楚title
                //})
            }).listener()
        },1000) ;
        //引导页方法
        function showTip(){
            $('.shadow_div').show();
            $('.step_div').show();
            $('#step_one').show().siblings().hide();

        }
        function hideTip(){
            $('.shadow_div').hide();
            $('.step_div').hide();
        }

        //上一个
        function prevDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().prev()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().prev().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().prev().offset().top-20
                }, 500);
            }else{
                // $(obj).attr('disabled',true);
                return;
            }
        }
        //下一个
        function nextDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().next()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().next().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().next().offset().top-20
                }, 500);
            }else{
                //$(obj).attr('disabled',true);
                return;
            }
        }
        //引导页方法end

    }
    //重置参数
//        function setDialog(){
//            $scope.vm.newTitle = "";
//            $scope.vm.knowledgeContentNegative = "";
//            $scope.vm.channel = [];
//            $scope.vm.dimension = [];
//            $scope.vm.question = 1,    //显示相关问
//            $scope.vm.tip = 1,    //在提示
//            $scope.vm.tail =1,    //弹出评价小尾巴
//            $scope.vm.appointRelativeGroup = [] ;//业务扩展问
//            $scope.vm.appointRelative = ""
//            $scope.vm.dimensionsCopy = angular.copy($scope.vm.dimensions);
//            $scope.vm.dimensionArr = []
//        }

]);
// Source: app/static/knowledgeManagement/js/controller/faq.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('knowManaFaqController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","$stateParams",
    "knowledgeAddServer","$window","$rootScope","$filter","myService","$location",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,$stateParams,
              knowledgeAddServer,$window,$rootScope,$filter,myService,$location) {
        console.log($stateParams);
        $scope.vm = {
            knowledgeId : "" ,
            knowledgeOrigin : 120 , //知识来源
            frames : [],      //业务框架
            frameId : "",
            knowledgeAdd: knowledgeAdd,  //新增点击事件
            knowledgeClassifyCall: knowledgeClassifyCall, //知识分类的回调方法
            openContentConfirm: openContentConfirm, //打开内容对话框
            botRoot : "",      //根节点
            knowledgeBotVal : "",  //bot 内容
            botFullPath: null ,
            botSelectAdd : botSelectAdd,
            frameCategoryId : "",
            title : "",   //标题
            titleTip :  "",
            isTitleRepeat : true ,
            timeStart : "",      //起始时间
            timeEnd : "",
            isTimeTable : false,  //时间表隐藏
            //生成  BOT
            getCreatBot : getCreatBot,
            //creatBot : [],
            //失去焦点
            //blur:blur,
            botClassfy : [],   //标题生成bot
            creatSelectBot : [] ,//点击bot类目数生成
            //扩展问
            getExtension : getExtension , //获取扩展问
            extensionTitle : "",
            extensionWeight :60,
            extensions : [],      //手動生成
            extensionsByFrame : [],  //業務框架生成


            //展示内容
            scanContent : [],
            save : save ,   //保存
            scan :scan ,    //预览
            //弹框相关
            newTitle: "",    //标题
            channel : [],     //新添加的 channel
            channels : [],     //所有渠道
            selectChannel : selectChannel , //獲取渠道
            dimension  : "",
            dimensions : []
            ,  //所有维度
            dimensionArr : [],  //選擇的維度
            dimensionsCopy :[],
            //extensionsArr:[],//校验页面扩展是否重复集合A


            checkChannelDimension : checkChannelDimension ,
            //高级选项内容
            slideDown : slideDown ,
            slideFlag : false,

            question : 1,
            tip : 1,
            tail : 1 ,
            appointRelative : "",
            appointRelativeList :[],
            appointRelativeGroup : [],
            addAppoint  : addAppoint,
            removeAppointRelative : removeAppointRelative,
            replaceType : 0,

            enterEvent : enterEvent ,
            //selectEvent : selectEvent
            limitSave : false , //限制多次打标
            isEditIndex : -1,   // 知识内容 弹框
                                // -1 为内容新增
                                // index 为知识的编辑索引
//*******************2017/8/3  BEGIN   删除扩展问本地备份 *******************//
            rmExtensionBackup : [] ,
//*******************2017/8/3  END   删除扩展问本地备份   *******************//
            //引到页
            showTip : showTip,
            hideTip : hideTip,
            prevDiv : prevDiv,
            nextDiv : nextDiv,
            //引到页end
            increaseCheck  : increaseCheck , //知识新增弹框保存按钮
            isChannelSelect : true   ,    // 渠道维度添加是 的 判断 删除哪个
            sourceTitle :"" ,
            backUpExt: backUpExt , // 扩展问 假删除
            extensionDeleted : []
        };
        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions","dimensionsCopy"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        // 相关问题 键盘选择
        //function selectEvent(e){
        //        var  srcObj = e.srcElement ? e.srcElement : e.target;
        //        var keycode = window.event?e.keyCode:e.which;
        //    switch(keycode){
        //        case 13 :
        //            if(arr.indexOf(item)==-1){
        //                arr.push(item)
        //            }
        //            $scope.vm.appointRelative = null;  //清楚title
        //            $scope.vm.appointRelativeList = [];  //清除 列表
        //            break ;
        //        case 40 :
        //            if(arr.indexOf(item)==-1){
        //                arr.push(item)
        //            }
        //            $scope.vm.appointRelative = null;  //清楚title
        //            $scope.vm.appointRelativeList = [];  //清除 列表
        //            break ;
        //    }
        //}
        //、、、、、、、、、、、、、、、、、、、、、、、   通过预览 编辑 判断   、、、、、、、、、、、、、、、、、、、、、、、、、
        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        if($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase){
            var data = angular.fromJson($stateParams.data);
            //标题
            $scope.vm.title =  data.knowledgeBase.knowledgeTitle ;
            $scope.vm.sourceTitle =  data.knowledgeBase.knowledgeTitle ;
            // 时间
            if(data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd){
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart  =  $filter("date")(data.knowledgeBase.knowledgeExpDateStart,"yyyy-MM-dd") ;
            $scope.vm.timeEnd  = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd,"yyyy-MM-dd") ;
            // bot 路径 s
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList ;

            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId ;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin ;
            //扩展问
            $scope.vm.extensionsByFrame = data.extensionQuestions;
            //内容
            //$scope.vm.scanContent = data.knowledgeContents ;
            angular.forEach(data.knowledgeContents,function(item){
                var obj = {} ;
                obj.knowledgeContent = item.knowledgeContent;
                //維度，添加預覽效果   以name id 的 形式显示
                obj.channelIdList =  item.channelIdList ;
                obj.dimensionIdList =  item.dimensionIdList ;

                obj.knowledgeRelatedQuestionOn =item.knowledgeRelatedQuestionOn ;   //显示相关问
                obj.knowledgeBeRelatedOn  =  item.knowledgeBeRelatedOn ; //在提示
                obj.knowledgeCommonOn = item.knowledgeCommonOn ;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = item.knowledgeRelevantContentList ;  //业务扩展问
                $scope.vm.scanContent.push(obj) ;
                console.log(obj)
            });
            //
        }else if($stateParams.data && angular.fromJson($stateParams.data).docmentation){
            $scope.vm.docmentation = angular.fromJson($stateParams.data).docmentation;
            $scope.vm.title = $scope.vm.docmentation.documentationTitle;
            $scope.vm.newTitle = $scope.vm.docmentation.documentationContext; //填充新的知识内容
            $scope.vm.knowledgeOrigin = 122 ;
            $timeout(function(){$scope.vm.openContentConfirm(saveAddNew);},0) ;
             //知识内容弹出框
        }

        if($stateParams.knowledgeTitle){
            console.log("======"+$stateParams.knowledgeTitle);
            $scope.vm.title=$stateParams.knowledgeTitle;
        }
        //、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

// 通过类目id 获取框架
        function getFrame(id){
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId":10011,
                "index": 0,
                "pageSize":999999
            },function(data){
                //console.log(data);
                if(data.status!=10005){
                    if(data.data.length){
                        $scope.vm.frames = $scope.vm.frames.concat(data.data);
                        $scope.$apply();
                    }
                }
            },function(){
                //layer.msg("err or err")
            });
        }
        $scope.$watch("vm.frameCategoryId",function(val,old){
            if(val&&val!=old){
                getFrame( val )
            }
        });
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId",function(val,old){
            if(val&&val!=old){
                if($scope.vm.extensionsByFrame.length){
                   var frame ;
                    angular.forEach($scope.vm.frames,function(item){
                        if(item.frameId == val ){
                            frame = item.frameTitle ;
                            return true ;
                        }
                    }) ;
                    //console.log(frame)  ;
                    if(frame == $scope.vm.extensionsByFrame[0].source){
                        return false
                    }else{
                        replace(val);//  替換條件
                    }
                }else{
                    // 在未生成扩展问情況
                    getExtensionByFrame(val);
                }

            }
        });

        // 通过frame 获取扩展问
        function getExtensionByFrame(id,type){
            //console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameTypeId": 10011,
                "frameId": id,
                "index": 0,
                "pageSize":999999
            },function(data){
                if(data.status==10000){
                    //console.log(data);
                    if(data.data[0].elements){
                        angular.forEach(data.data[0].elements,function(item){
                            var isLocalHasExt = addLocalExtension(item.elementContent)  ;
                            if(isLocalHasExt){
                                if(type){
                                    $scope.vm.extensionsByFrame.pop();
                                    $scope.vm.extensionsByFrame.push(isLocalHasExt)
                                }else{
                                    $scope.vm.extensionsByFrame.push(isLocalHasExt)
                                }
                                return ;
                            }
                            var obj = {} ;
                            obj.extensionQuestionTitle  = item.elementContent;
                            obj.extensionQuestionType = 60;
                            obj.source = data.data[0].frameTitle;
                            if(type){
                                $scope.vm.extensionsByFrame.pop();
                                $scope.vm.extensionsByFrame.push(obj)
                            }else{
                                //if(){
                                //    angular.forEach($scope.vm.extensionsByFrame,function(item){
                                //
                                //    })
                                //}
                                $scope.vm.extensionsByFrame.push(obj)
                            }
                        });
                        //console.log($scope.vm.extensionsByFrame)
                    }
                    $scope.$apply();
                }
            },function(){
                //layer.msg("err or err")
            });
        }
        // 获取Bot全路径
        function getBotFullPath(id){
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                categoryId: id
            },function(data){
                //console.log(data)
                if(data.status = 10000){
                    var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
                        botResult = $scope.master.isBotRepeat(id,data.categoryFullName.split("/"),"",allBot) ;
                    $scope.$apply(function(){
                        $scope.vm.knowledgeBotVal = data.categoryFullName;
                        if(botResult != false){
                            //$scope.vm.knowledgeBotVal = data.categoryFullName.split("/");
                            $scope.vm.botFullPath= botResult;
                        }
                    });
                }
            },function(error){console.log(error)});
        }
        //添加扩展问
        function getExtension(title,weight){
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                $scope.vm.extensions.push(isLocalHasExt);
                return ;
            }
            var obj = {
                "extensionQuestionTitle" : title ,
                "extensionQuestionType" : weight ,
             } ;
            if(!title){
                layer.msg("扩展问不能为空")
            }else if(!checkExtension(obj ,  $scope.vm.extensions)){
                layer.msg('根据"'+title+'"生成扩展问重复,已阻止添加');
                return false
            }else{
                httpRequestPost("/api/ms/faqKnowledge/checkExtensionQuestion",{
                    "applicationId": APPLICATION_ID,
                    "title" : title
                },function(data){
                    if(data.status == 500){
                        layer.msg('根据"'+title+'"生成扩展问重复') ;
                        $scope.vm.extensionTitle = "" ;
                    }else if(data.status==200){
                        $scope.vm.extensionTitle = "" ;
                        $scope.vm.extensions.push(obj);
                        $scope.$apply()
                    }
                    //console.log(data);
                },function(error){console.log(error)});
            }
        }
////////////////////////////////////// ///          Bot     /////////////////////////////////////////////////////
        $scope.master.botTreeOperate($scope,"/api/ms/modeling/category/listbycategorypid","/api/ms/modeling/category/listbycategorypid",getBotFullPath
            //"/api/ms/modeling/category/searchbycategoryname"
        ) ;
        //BOT搜索自动补全
        $scope.master.searchBotAutoTag(".botTagAuto","/api/ms/modeling/category/searchbycategoryname",function(suggestion){
            $scope.$apply(function(){
                var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
                    botResult = $scope.master.isBotRepeat(suggestion.data,suggestion.value.split("/"),suggestion.type,allBot) ;
                    $scope.vm.knowledgeBotVal = suggestion.value;
                    if(botResult != false){
                        $scope.vm.botFullPath= botResult;
                    }
            })
        });
        //添加bot分类的
        function botSelectAdd(){
            if($scope.vm.botFullPath){
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = null;
                $scope.vm.knowledgeBotVal = ""
            }
        }
////////////////////////////////////////         Bot     //////////////////////////////////////////////////////
        function replace(id){
            var dia = angular.element(".ngdialog");
            if(dia.length==0) {
                var replace = ngDialog.openConfirm({
                    template: "/static/knowledgeManagement/faq/replace.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {     //关闭回掉
                        if (e === 1) {    //替换
                            getExtensionByFrame(id, 1)
                        } else if (e === 0) {
                            // 添加不替换
                            getExtensionByFrame(id, 0)
                        }
                    }
                });
            }
        }
        function knowledgeAdd(data,index){
            var dia = angular.element(".ngdialog ");
            if(data){    //编辑知识内容
                $scope.vm.isEditIndex = index ;
                $scope.vm.newTitle = data.knowledgeContent;
                $scope.vm.channel = data.channelIdList;
                angular.forEach($scope.vm.dimensions,function(item){
                    if(data.dimensionIdList.inArray(item.dimensionId)){
                        var obj = {
                            "dimensionId" : item.dimensionId ,
                            "dimensionName" : item.dimensionName
                        } ;
                        $scope.vm.dimensionArr.push(obj) ;
                    }
                }) ;
                $scope.vm.tip  = data.knowledgeBeRelatedOn; //在提示
                $scope.vm.question = data.knowledgeRelatedQuestionOn;
                $scope.vm.tail = data.knowledgeCommonOn;
                $scope.vm.appointRelativeGroup = data.knowledgeRelevantContentList == null ? [] : data.knowledgeRelevantContentList;
                var callback = function(){
                    var obj = {};
                    obj.knowledgeContent = $scope.vm.newTitle;
                    obj.knowledgeContentType = 0;  // 答案类型
                    obj.channelIdList =  $scope.vm.channel;
                    obj.dimensionIdList =  $scope.vm.dimensionArr.id;
                    obj.knowledgeRelatedQuestionOn = $scope.vm.question;   //显示相关问
                    obj.knowledgeBeRelatedOn  =  $scope.vm.tip ; //在提示
                    obj.knowledgeCommonOn = $scope.vm.tail ;   //弹出评价小尾巴
                    obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup ; //业务扩展问
                    $scope.vm.scanContent[index] = obj;
                    $scope.vm.isEditIndex = -1  ;
                    setDialog();
                }
            }else{
                //新增知识内容
                var  callback = saveAddNew ;
            }
            if(dia.length==0) {
                $timeout(function(){
                    $scope.master.searchAppointAutoTag($scope,".appoint","/api/ms/knowledgeManage/getKnowledgeTitle","appointRelativeList",function(suggestion){
                        
                        console.log(suggestion) ;
                        //$scope.$apply(function(){
                        //    if($scope.vm.appointRelativeGroup.indexOf(suggestion)==-1){
                        //        $scope.vm.appointRelativeGroup.push(suggestion)
                        //    }else{
                        //        layer.msg("重复添加相关问")
                        //    }
                        //    $scope.vm.appointRelative = "";  //清楚title
                        //})
                    }).listener()
                },2000) ;
                $scope.vm.openContentConfirm(callback);
            }
        }
        //打开知识内容对话框
        function openContentConfirm(callback){
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/public-html/knowledge_increase.html",
                width:"650px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        callback();
                    } else {
                        $scope.vm.isEditIndex = -1  ;
                        setDialog();//清空内容对话框
                    }
                }
            });
        }
        function slideDown(){
            $scope.vm.slideFlag = ! $scope.vm.slideFlag;
            $(".senior_div").slideToggle();
        }

        //生成 bot
        function getCreatBot(){
            if($scope.vm.title){
                httpRequestPost("/api/ms/faqKnowledge/findClasssByKnowledgeTitle",{
                    "title" :  $scope.vm.title,
                    "applicationId" : APPLICATION_ID,
                    "knowledgeId" : $scope.vm.knowledgeId
                },function(data){
                    if(data.status == 500){
                        if($scope.vm.sourceTitle!=$scope.vm.title) {
                            $scope.vm.titleTip = "知识标题重复";
                            $scope.title = ""  ;
                            $scope.$apply()
                        }
                    }else{
                        $scope.$apply(function(){
                            $scope.vm.botClassfy = [];   //reset 标题生成bot
                            //添加校验是否添加校验  获取所有bot 验证是否重复
                            var allBot = angular.copy($scope.vm.creatSelectBot) ;
                            angular.forEach(data.data, function (item) {
                                var botResult = $scope.master.isBotRepeat(item.id,item.fullPath,item.type,allBot) ;
                                if(botResult != false){
                                    $scope.vm.botClassfy.push(botResult);
                                }
                                $scope.vm.frameCategoryId = item.id;
                            });
                        });
                    }
                },function(err){
                   console.log(err)
                });
            }else{
                $scope.vm.titleTip = "知识标题不能为空"
            }
        }
        //  主页保存 获取参数
        function getParams(){
          var  params =  {
                "applicationId": APPLICATION_ID,
                "knowledgeId" : $scope.vm.knowledgeId ,
                "knowledgeTitle": $scope.vm.title,      //知识标题
                "knowledgeExpDateStart" : $scope.vm.isTimeTable?$scope.vm.timeStart:null,  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable?$scope.vm.timeEnd:null,     //结束时间
                //"knowledgeCreator": $scope.vm.userId, //创建人
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME, //操作人
                "knowledgeType": 100  ,//知识类型
                "knowledgeOrigin" : $scope.vm.knowledgeOrigin
            };
            params.knowledgeContents =  $scope.vm.scanContent;
            params.extensionQuestions =  $scope.vm.extensions.concat($scope.vm.extensionsByFrame) ;
            params.classificationAndKnowledgeList = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot));
            return params
        }
        var limitTimer ;
        function save(){
                if (!checkSave()) {
                    return false
                } else {
                    if(!$scope.vm.limitSave) {
                        $timeout.cancel(limitTimer) ;
                        $scope.vm.limitSave = true ;
                        limitTimer = $timeout(function(){
                            $scope.vm.limitSave = false ;
                        },180000) ;
                        $scope.vm.data = getParams();
                        var api = $scope.vm.knowledgeId?"/api/ms/faqKnowledge/editFAQKnowledge":"/api/ms/faqKnowledge/addFAQKnowledge";
                        httpRequestPost(api, getParams(), function (data) {
                            if (data.status == 200) {
                                if ($scope.vm.docmentation) {
                                    //文档知识分类状态回掉
                                    $scope.vm.knowledgeClassifyCall()
                                } else {
                                      console.log($stateParams)
                                    if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                                }

                            }else if (data.status == 500) {
                                layer.msg("知识保存失败") ;
                                $timeout.cancel(limitTimer) ;
                                $scope.$apply(function(){
                                    $scope.vm.limitSave = false ;
                                });
                            }
                        }, function (err) {
                            $timeout.cancel(limitTimer) ;
                            $scope.$apply(function(){
                                $scope.vm.limitSave = false ;
                            });
                        });
                }
            }
        }
        // 知识文档分类回调
        function knowledgeClassifyCall(){
            httpRequestPost("/api/ms/knowledgeDocumentation/documentationKnowledgeClassify",
                {
                    knowledgeId: $scope.vm.docmentation.knowledgeId,
                    knowledgeStatus: 2
                },
                function(data){
                    if(data && data.status == 200) {
                        $state.go("back.doc_results_view",
                            {
                                knowDocId: $scope.vm.docmentation.documentationId,
                                knowDocCreateTime: $scope.vm.docmentation.knowDocCreateTime,
                                knowDocUserName: $scope.vm.docmentation.knowDocUserName
                            }
                        );
                    }
                }
            );
        };
        function scan(){
            if(!checkSave()){
                return false
            }else{
                var obj = {};
                var params = getParams();
                console.log(params);
                obj.params = params;
                obj.editUrl = "knowledgeManagement.faqAdd";
                obj.api = "/api/ms/faqKnowledge/addFAQKnowledge" ;
                if($scope.vm.knowledgeId){
                    //编辑
                    obj.api = "/api/ms/faqKnowledge/editFAQKnowledge" ;
                    params.knowledgeId = $scope.vm.knowledgeId ;
                }else{
                    //新增
                    obj.api = "/api/ms/faqKnowledge/addFAQKnowledge"
                }
                obj.knowledgeType = 101 ;
                obj.knowledgeId = $scope.vm.knowledgeId ;
                $window.knowledgeScan = obj;
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url,'_blank');
            }
        };
        /* ****************************************** //
         *
         *               弹框相关
         *
         */ // ****************************************** //

        function removeAppointRelative(item){
            $scope.vm.appointRelativeGroup.remove(item);
        }
//重置参数
        function setDialog(){
             $scope.vm.newTitle = "";
             $scope.vm.channel = [];
             $scope.vm.dimension = [];
             $scope.vm.question = 1,    //显示相关问
             $scope.vm.tip = 1,    //在提示
             $scope.vm.tail =1,    //弹出评价小尾巴
             $scope.vm.appointRelativeGroup = [] ;//业务扩展问
             $scope.vm.appointRelative = ""
             $scope.vm.dimensionsCopy = angular.copy($scope.vm.dimensions);
             $scope.vm.dimensionArr = []
        }

        function saveAddNew(){
            if($scope.vm.newTitle){
                var obj = {};
                obj.knowledgeContent = $scope.vm.newTitle;
                obj.knowledgeContentType = 0;  // 答案类型
                obj.channelIdList =  $scope.vm.channel;
                obj.dimensionIdList =  $scope.vm.dimensionArr.id;
                obj.knowledgeRelatedQuestionOn = $scope.vm.question;    //显示相关问
                obj.knowledgeBeRelatedOn  =  $scope.vm.tip ; //在提示
                obj.knowledgeCommonOn = $scope.vm.tail ;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup  ;//业务扩展问
                //高級 選項
                $scope.vm.scanContent.push(obj);
                setDialog()
            }else{
                setDialog()
            }
        }
        // 检验标题是否符合
        //function checkTitle(title,type){
        //    if(!title){
        //        layer.msg("标题不能为空");
        //        return false
        //    }else{
        //        httpRequestPost("/api/conceptKnowledge/checkDistribute",{
        //            "title" : title
        //        },function(data){
        //            console.log(data);
        //            return true;
        //        },function(err){
        //            layer.msg("打标失败，请重新打标");
        //            return false
        //        });
        //    }
        //}
        //检验扩展问是否重复
        function checkExtension(item,arr){
            if(arr.length==0){
                return true ;
            }else{
                var len = arr.length ;
                angular.forEach(arr,function(val){
                    if((val.extensionQuestionTitle == item.extensionQuestionTitle)&&(val.extensionQuestionType == item.extensionQuestionType)){
                        len-=1 ;
                    }
                }) ;
                if(len<arr.length){
                    return false
                }else{
                    return true
                }
            }
        }
//        提交 检验参数
        function checkSave(){
            var params = getParams();
            if($scope.vm.titleTip!=""){
                layer.msg($scope.vm.titleTip);
                return false;
            }
            if(!params.knowledgeTitle){
                layer.msg("知识标题不能为空，请填写");
                return false
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("知识类目不能为空，请选择分类");
                return false
            }else if(!params.knowledgeContents.length){
                layer.msg("知识内容不能为空，请点击新增填写");
                return false
            }else{
                return true
            }
        }
//***************************    save check channel dimension  **********************************************
        function increaseCheck(){
            //判斷维度是否为空 0 不变 1 全维度
            if(!$scope.vm.dimensionArr.id.length){
                $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
            };
            if(!$scope.vm.newTitle && !$scope.vm.channel.length){
                layer.msg("请填写知识内容,并选择渠道后保存")
            }else if(!$scope.vm.newTitle){
                layer.msg("请填写知识内容后保存")
            }else if(!$scope.vm.channel.length){
                layer.msg("请选择渠道后保存")
            }else if(checkChannelDimension($scope.vm.channel,$scope.vm.dimensionArr.id)){
                //存在重复条件
            }else{
                ngDialog.closeAll(1) ;
            }
        }
        //选择渠道
        function selectChannel(channelId,e){
            var  srcObj = e.srcElement ? e.srcElement : e.target;
            //$scope.vm.isChannelSelect = false ;
            //checkChannelDimension($scope.vm.channel,val.id) ;
            //if(checkChannelDimension($scope.vm.channel,$scope.vm.dimensionArr.id,type)){
            //    $(srcObj).attr("checked","false")
            //}
            if($scope.vm.channel.inArray(channelId)){
                $scope.vm.channel.remove(channelId);
            }else{
                $scope.vm.channel.push(channelId);
            }
        }
        //$scope.$watch("vm.dimensionArr",function(val,old){
        //    if(val.id && $scope.vm.channel && (!$scope.vm.isEditIndex)){
        //        $scope.vm.isChannelSelect = false ;
        //        checkChannelDimension($scope.vm.channel,val.id)
        //    }
        //},true);
        //$scope.$watch("vm.channel",function(val,old){
        //    if(val.length && $scope.vm.dimensionArr.id && (!$scope.vm.isEdit)){
        //        $scope.vm.isChannelSelect = true  ;
        //        $scope.vm.dimensionsCopy = {id:[],name:[]} ;
        //        angular.forEach($scope.vm.dimensions,function(item){
        //            if(!$scope.vm.dimensionArr.id.inArray(item.dimensionId)){
        //                $scope.vm.dimensionsCopy.name.push(item.dimensionName);
        //                $scope.vm.dimensionsCopy.id.push(item.dimensionId);
        //            }
        //        }) ;
        //        checkChannelDimension(val,$scope.vm.dimensionArr.id) ;
        //    }
        //},true);
        // true  重复  false 不重复通过可以保存
        function checkChannelDimension(channel,dimension){
            var isRepeat  = false;
            //    新增的 channel = []  dimension = [] ,
            //   页面以添加 scanContent.dimensions   scanContent.channels
            //if(!channel.length){     //渠道不能为空
                //layer.msg("请填写渠道");
                //return false
            //}else{               //渠道非空 channel   == code dimenssion   == id
                angular.forEach($scope.vm.scanContent,function(item,contentIndex){
                    if($scope.vm.isEditIndex != contentIndex){
                        angular.forEach(item.channelIdList,function(v){
                        angular.forEach(channel,function(val,indexChannel) {
                            if(val == v){
                                angular.forEach(item.dimensionIdList,function(value){
                                    angular.forEach(dimension,function(key,indexDimension){
                                        if(key==value){
                                            var channelTip;
                                            angular.forEach($scope.vm.channels,function(all){
                                                if(all.channelCode==v){
                                                    channelTip = all.channelName
                                                }
                                            });
                                            layer.msg("重复添加"+"渠道 "+channelTip+" 维度 "+$scope.vm.dimensionArr.name[indexDimension]);
                                            //if( $scope.vm.isChannelSelect ){
                                            //    $scope.vm.channel.splice(indexChannel,1) ;
                                            //}else{
                                            //    $scope.vm.dimensionArr.id.remove(key);
                                            //    $scope.vm.dimensionArr.name.splice(indexDimension,1);
                                            //}
                                            isRepeat = true
                                        }
                                    })
                                })
                            }
                        });
                    });
                    }
                });
            //}
            return isRepeat
        }




//********************************  2017/9/5 扩展问删除备份  BEGIN ***********************************************
        // 假删除本地备份
        function backUpExt(item){
            if(!$scope.vm.extensionDeleted.inArray(item)){
                $scope.vm.extensionDeleted.push(item)
            }
        }
        function addLocalExtension(title){
            var result = false ;
            if($scope.vm.extensionDeleted){
                angular.forEach($scope.vm.extensionDeleted,function(item,index){
                    if(title == item.extensionQuestionTitle){
                        result = item ;
                        $scope.vm.extensionDeleted.splice(index,1)
                    }
                })
            }
            return result ;
        }
//********************************  2017/9/5 扩展问删除备份  EDN ***********************************************

//*************************************************************************

        function addAppoint(item,arr){
            if(arr.indexOf(item)==-1){
                arr.push(item)
            }
            $scope.vm.appointRelative = null;  //清楚title
            $scope.vm.appointRelativeList = [];  //清除 列表
        }
        // 動態加載 title
        //$scope.$watch("vm.appointRelative",function(title){
        //    //console.log(title);
        //    if(title){
        //        $timeout(getAppointRelative(title),300)
        //    }
        //});

        function getAppointRelative(title){
            httpRequestPost("/api/ms/conceptKnowledge/getKnowledgeTitle",{
                "title" : title
            },function(data){
                if(data.status == 200){
                    $scope.vm.appointRelativeList = data.data;
                    $scope.$apply()
                }else{
                }
            },function(error){
                console.log(error)
            });
        }

        //引导页方法
        function showTip(){
            $('.shadow_div').show();
            $('.step_div').show();
            $('#step_one').show().siblings().hide();

        }
        function hideTip(){
            $('.shadow_div').hide();
            $('.step_div').hide();
        }

        //上一个
        function prevDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().prev()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().prev().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().prev().offset().top-20
                }, 500);
            }else{
                // $(obj).attr('disabled',true);
                return;
            }
        }
        //下一个
        function nextDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().next()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().next().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().next().offset().top-20
                }, 500);
            }else{
                //$(obj).attr('disabled',true);
                return;
            }
        }
        //引导页方法end
    }
]);
// Source: app/static/knowledgeManagement/js/controller/historyView.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('historyViewController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader",
    "knowledgeAddServer","$window","$stateParams","$interval","$filter","$animate",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,
              knowledgeAddServer,$window,$stateParams,$interval,$filter,$animate) {
        $scope.vm = {
            findUploadRecord: '/api/ms/uploadRecord/findUploadRecordList',
            downRecord: '/api/ms/uploadRecord/downFile',
            deleteRecord: '/api/ms/uploadRecord/deleteRecord',
            uploadRecordList: null,
            uploadName: null,
            uploadType: null,
            uploadTimeMin: null,
            uploadTimeMax: null,
            finishTimeMin: null,
            finishTimeMax: null

        };
        self.initSearch = function (column) {
            if (!$scope.SearchPOJO) {
                $scope.SearchPOJO = $scope.initSearchPOJO();
            }
            /**
             * 加载分页条
             * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
             */
            $scope.paginationConf = {
                currentPage: $scope.SearchPOJO.currentPage,//当前页
                totalItems: 0, //总条数
                pageSize: $scope.SearchPOJO.pageSize,//第页条目数
                pagesLength: 5 //分页框数量

            };
        }
        self.initSearch();
        //分页定时器
        var timeout ;
        $scope.$watch('SearchPOJO', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function () {
                    $scope.findUploadRecord();
                }, 350);
            }
        },true);

        //查询上传历史记录
        $scope.findUploadRecord = function() {
            httpRequestPost($scope.vm.findUploadRecord,{
                "requestId": "string",
                "applicationId" : APPLICATION_ID,
                "index": ($scope.SearchPOJO.currentPage-1)*$scope.SearchPOJO.pageSize,
                "pageSize": $scope.SearchPOJO.pageSize
            },function(data){
                if(data.status == 200){
                    $scope.vm.uploadRecordList = data.data;
                    $scope.$apply();
                }else{
                }
                console.log(data);
            },function(err){

            });
        }

        /**
         * 下载记录文件
         * @param uploadId 历史ID
         */
        $scope.downRecordFile = function(uploadId){
            var urlParams = "?applicationId="+APPLICATION_ID+"&uploadId="+uploadId;
            var url = $scope.vm.downRecord+urlParams  ;//请求的url
            $window.open(url,"_blank") ;
        }

        $scope.deleteRecord = function (uploadId) {
            httpRequestPostParam($scope.vm.deleteRecord,{
                "requestId": "string",
                "uploadId" : uploadId
            },function(data){
                if(data.status == 200){
                    $scope.findUploadRecord();
                }else{
                }
                console.log(data);
            },function(err){

            });
        }

    }
]);
// Source: app/static/knowledgeManagement/js/controller/knowOverview/custKnowledgePreview_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('custPreviewController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$cookieStore","knowledgeAddServer","$window","$http","myService",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$cookieStore,knowledgeAddServer,$window,$http,myService) {
        //$state.go("custKnowledgePreview.manage",{userPermission:$stateParams.userPermission});
        //var viewData =  $window.opener.knowledgeScan ;
        if(!$stateParams.knowledgeId || !$stateParams.knowledgeType){
            //$state.go("knowledgeManagement.custOverview")
        }else{
            $scope.vm = {
                knowledgeId : $stateParams.knowledgeId,        //del
                knowledgeType : parseInt($stateParams.knowledgeType),
                listData : null,
                edit :  edit,
                goBack:goBack
            };
             function goBack(){
                window.history.back();  
            }
            // 展示渠道维度使用
            //獲取渠道
            knowledgeAddServer.getDimensions({ "applicationId" : APPLICATION_ID},
                function(data) {
                    if(data.data){
                        $scope.vm.dimensions = data.data;
                    }
                }, function(error) {
                });
            //获取维度
            knowledgeAddServer.getChannels({ "applicationId" : APPLICATION_ID},
                function(data) {
                    if(data.data){
                        $scope.vm.channels = data.data
                    }
                }, function(error) {
                });
            //修改
            var editUrl,api;
            switch($scope.vm.knowledgeType){
                case 100 :
                    editUrl = "knowledgeManagement.faqAdd";
                    api = "/api/ms/faqKnowledge/getKnowledge";
                    break;
                case 101 :
                    editUrl = "knowledgeManagement.singleAddConcept" ;
                    api = "/api/ms/conceptKnowledge/getKnowledge";
                    break;
                case 102 :
                    editUrl = "knowledgeManagement.listAdd";
                    api = "/api/ms/conceptKnowledge/getKnowledge";
                    break;
                case 103 :
                    editUrl = "knowledgeManagement.factorAdd";
                    api = "/api/ms/elementKnowledgeAdd/findElementKnowledgeByKnowledgeId";
                    break;
                case 106 :
                    editUrl = "knowledgeManagement.markKnow";
                    api = "api/ms/richtextKnowledge/getKnowledge";
                    break;
                case 107 :
                    editUrl = "knowledgeManagement.recommendKnow";
                    api = "/api/ms/recommendMarketingKnowledge/getKnowledge";
                    break;
            }
            function edit(){
                $state.go(editUrl,{data:angular.toJson($scope.vm.listData)})
            }
           void function(){
                knowledgeAddServer.getDataServer(api,{
                    "knowledgeId" : $scope.vm.knowledgeId,
                    "applicationId" : APPLICATION_ID
                },function(data){
                    if($scope.vm.knowledgeType == 103){
                        //console.log(data.knowledgeContents[0])
                        var data = data.data ;
                        var table = data.knowledgeContents[0].knowledgeTable ;
                        data.knowledgeContents[0].knowledgeContent = table;
                        delete data.knowledgeContents[0].knowledgeTable;
                        $scope.vm.listData = data;
                    }else if($scope.vm.knowledgeType == 107){
                        var data = data.data ;
                        var tableCon=data.knowledgeContents[0].knowledgeContent ;
                        var table = data.knowledgeContents[0].knowledgeTable ;
                        data.knowledgeContents[0].knowledgeContent = table;
                        data.knowledgeContents[0].knowledgeContentTrue = tableCon ;
                        delete data.knowledgeContents[0].knowledgeTable;
                        $scope.vm.listData = data;
                        httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                            categoryId: data.extensionQuestions[0].extensionQuestionTitle
                        },function(response) {
                            console.log(response) ;
                            if (response.status = 10000) {
                                $scope.$apply(function () {
                                $scope.vm.listData.extensionQuestions[0].extensionQuestionName =  response.categoryFullName ;
                                });
                            }
                        }) ;

                    }else{
                        $scope.vm.listData = data.data;
                    }
                },function(){
                    console.log("获取失败")
                }) ;
            }()
        }
    }
]);
// Source: app/static/knowledgeManagement/js/controller/knowOverview/custKnowledgeRecycle_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('custPreviewRecycle', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$cookieStore","knowledgeAddServer","$window","$http","myService","$timeout",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$cookieStore,knowledgeAddServer,$window,$http,myService,$timeout) {

    	    $scope.vm = {
    	    	    searchKnowledgeList:searchKnowledgeList,  //知识搜索 
		            deleteOne:deleteOne,        //单独删除    
		            deleteAll:deleteAll,       //批量删除
		            reductionOne:reductionOne,  //单条还原
		            reductionAll:reductionAll, //批量还原
    	    	    isSelectAll : false,
		            selectAll : selectAll,      //全选
		            selectSingle:selectSingle,  //单选
		             paginationConf : {
		                pageSize: 5,//第页条目数
		                pagesLength: 10,//分页框数量
		            } ,
		            knowledgeTitle:"",
		            recycleKnowledgeList:"",
		            knowledgeIds:[],
		            list:""	,
		            total:""
		     };

        searchKnowledgeList(1)
        function searchKnowledgeList(index){
        	  httpRequestPost("/api/ms/knowledgeManage/overView/recycleKnowledgeList",{
                "applicationId" : APPLICATION_ID,
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "knowledgeTitle": $scope.vm.knowledgeTitle,  
            },function(data){
                    $scope.$apply(function(){
                        $scope.vm.recycleKnowledgeList = data.data ;
                        $scope.vm.total=data.data.total;
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = data.data.total/$scope.vm.paginationConf.pageSize;
                    })
            })
        	}

        //删除知识 
        function deleteOne(knowledgeId){
            layer.confirm('确认删除该条知识？', {
                btn: ['确定','取消'] //按钮
            }, function(){
                httpRequestPost("/api/ms/knowledgeManage/deleteKnowledge",{
                    "knowledgeIds":knowledgeId
                },function(data){
                    if(data.status == 200){
                        layer.msg("删除成功") ;
                        searchKnowledgeList(1) ;
                    }else if(data.status == 500){
                        layer.msg("删除失败") ;
                    }
                },function(err){
                    console.log(err)
                }) ;
            }, function(){
            });
        }
 

        //知识批量删除
         function deleteAll(){
            if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0)
            {
                layer.msg("请选择删除知识",{time:800});
                return;
            }else{
                layer.confirm('是否删除当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/knowledgeManage/deleteKnowledge",{
                        "knowledgeIds":$scope.vm.knowledgeIds
                    },function(data){
                        $state.reload();
                        layer.msg("刪除成功",{time:1000});
                    },function(){
                        layer.msg("刪除失败",{time:1000});
                    });
                }, function(){
                });
            }
        }


       //单条知识还原
        function reductionOne(knowledgeId){
            layer.confirm('确认还原该知识？', {
                btn: ['确定','取消'] //按钮
            }, function(){
                httpRequestPost("/api/ms/knowledgeManage/restoreKnowledge",{
                    "knowledgeIds":knowledgeId
                },function(data){
                    if(data.status == 200){
                        layer.msg("还原成功") ;
                        searchKnowledgeList(1) ;
                    }else if(data.status == 500){
                        layer.msg("还原失败") ;
                    }
                },function(err){
                    console.log(err)
                }) ;
            }, function(){
            });
        }

         //知识批量还原
        function reductionAll(knowledgeId){
        	 if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0)
            {
                layer.msg("请选择还原的知识",{time:1000});
                return;
            }else{
                layer.confirm('是否还原当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms//knowledgeManage/restoreKnowledge",{
                        "knowledgeIds":$scope.vm.knowledgeIds
                    },function(data){
                        $state.reload();
                        layer.msg("还原成功",{time:1000});
                    },function(){
                        layer.msg("还原失败",{time:1000});
                    });
                }, function(){
                });
            }
        }




         //全选
        function selectAll(){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false;
                $scope.vm.knowledgeIds = [];
            }else{
                $scope.vm.isSelectAll=true;
                $scope.vm.knowledgeIds=[];
                angular.forEach($scope.vm.recycleKnowledgeList.objs,function (val) {
                    $scope.vm.knowledgeIds.push(val.knowledgeId);
                })
            }
            console.log($scope.vm.knowledgeIds);
        }
        //单选
        function selectSingle(id){
            if($scope.vm.knowledgeIds.inArray(id)){
                $scope.vm.knowledgeIds.remove(id);
                $scope.vm.isSelectAll = false;
            }else{
                $scope.vm.knowledgeIds.push(id);

            }
            if($scope.vm.knowledgeIds.length==$scope.vm.recycleKnowledgeList.objs.length){
                $scope.vm.isSelectAll = true;
            }
            console.log( $scope.vm.knowledgeIds);
        }

        //分页监控
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    searchKnowledgeList(current);
                }, 100)

            }
        },true);
        
    }

]);
// Source: app/static/knowledgeManagement/js/controller/knowOverview/custServScenaOverview_controller.js

/**
 * Created by mileS on 2017/4/3.
 * 客服 知识 总览
 */
angular.module('knowledgeManagementModule').controller('custOverviewController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$timeout","$cookieStore","$window","$rootScope",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$timeout,$cookieStore,$window,$rootScope ) {
        //$state.go("custServScenaOverview.manage");
        //******************************************** //
        var n = 1;   // 定義淚目數  類別
        //********************************************//
        $scope.vm = {
            applicationName : $cookieStore.get("applicationName"),
            creatBot : [],
            frameCategoryId : "",

            botRoot : null,
            type : true,
            listData : [],                  //页面展示内容
            //fn
            exportExcel:exportExcel,
            recycleBin:recycleBin,          //知识回收站
            getData : getData ,             //数据获取
            delData : delData ,             //删除
            knowledgeTotal : null,         //知识总条数
            newNumber : null ,              //更新条数
            getNewNumber : getNewNumber ,  //获取更新条数

            knowledgeIds : [], //刪除 id ，
            addDelIds : addDelIds ,
            // params set
            "pageSize": 5,
            sceneIds : [] ,
            "knowledgeTitle": null,         //知识标题默认值null
            "knowledgeContent": null,        //知识内容默认值null
            "knowledgeCreator": null,        //作者默认值null
            "knowledgeExpDateEnd": null,        //知识有效期开始值默认值null
            "knowledgeExpDateStart": null,        //知识有效期结束值默认值null
            sourceType: 0,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
            "updateTimeType": 0 ,  //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)

            keySearch : keySearch,
            napSearch : napSearch ,
            getSourceType : getSourceType,
            getUpdateTimeType : getUpdateTimeType,

            scan : scan ,   // 点击标题预览

            heighSarch : false ,
            knowledgeType : "" , //搜索知识类型
            searchExtension : "", //搜索的擴展問
            newKnowledge : "false",
            jumpToNewKonwledge : jumpToNewKonwledge,
            isSelectAll  : false ,  // 全选 删除
            selectAll : selectAll  ,//選擇全部

            selectedBot : [] ,
            paramsReset : paramsReset //搜索重置参数
        };
        function jumpToNewKonwledge(id){
            var addUrl=null;
            switch(id){
                case "100" :
                    addUrl = "knowledgeManagement.faqAdd";
                    break;
                case "101":
                    addUrl = "knowledgeManagement.singleAddConcept";
                    break;
                case "102" :
                    addUrl = "knowledgeManagement.listAdd";
                    break;
                case "103" :
                    addUrl = "knowledgeManagement.factorAdd";
                    break;
                case "106" :
                    addUrl = "knowledgeManagement.markKnow";
                    break;
                case "107" :
                    addUrl = "knowledgeManagement.recommendKnow";
                    break;
                case "108" :
                    addUrl = "knowledgeManagement.processKnow";
                    break;    
            }
            if(!addUrl)
                return ;
            $state.go(addUrl) ;
            //var url = $state.href(addUrl);
            //$window.open(url,'_blank');
            $scope.vm.newKnowledge = "false";
        }
        // 初始化 数据
        napSearch(false);
        //高级搜索 开关
        $scope.$watch("vm.heighSarch",function(val){
            if(val){
                angular.element(".advanced_search").slideDown()
            }else{
                angular.element(".advanced_search").slideUp()
            }
        });
        // 1 scenesIds
        // 2 title
        // 3 heighsearch

        //是否清空 搜索内容  true  清空 false 不清空
        //@1 分頁 false   @2初始化 true
        function napSearch(type){
            getData(1);
            getNewNumber();
            if(type){
                $timeout(function(){
                    $scope.vm.paramsReset();
                },500);
            }
            $scope.vm.heighSarch = false ;
        }
        function scan(item){
            var obj = {};
            obj.applicationId = APPLICATION_ID ;
            obj.knowledgeId = item.knowledgeId;
            obj.knowledgeType = item.knowledgeType;
            $window.knowledgeScan = obj ;
            var url = $state.href("custKnowledgePreview.manage");
            $window.open(url,'_blank');
            //$state.go("custKnowledgePreview.manage")
        }
        function getSourceType(val){
            $scope.vm.sourceType = val
        }
        function getUpdateTimeType(val){
            $scope.vm.updateTimeType = val
        }

        /**
         * 知识导出
         * @param index
         */
        function exportExcel(){
            var scenceId = $scope.vm.sceneIds.length?$scope.vm.sceneIds:[];
            var urlParams =
                "?applicationId="+APPLICATION_ID+"&sceneIds="+scenceId+"&knowledgeTitle="+$scope.vm.knowledgeTitle +
                "&knowledgeContent="+$scope.vm.knowledgeContent+"&knowledgeCreator="+$scope.vm.knowledgeCreator+
                "&knowledgeExpDateEnd="+$scope.vm.knowledgeExpDateEnd+"&knowledgeExpDateStart="+$scope.vm.knowledgeExpDateStart+
                "&sourceType="+$scope.vm.sourceType+"&updateTimeType="+$scope.vm.updateTimeType;
                var url = "/api/ms/knowledgeManage/exportExcel"+urlParams  ;//请求的url
                $window.open(url,"_blank") ;
            //httpRequestPost("/api/ms/knowledgeManage/exportExcel",{
            //    "applicationId" : APPLICATION_ID,
            //    "sceneIds": $scope.vm.sceneIds.length?$scope.vm.sceneIds:null,	//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
            //    "knowledgeTitle": $scope.vm.knowledgeTitle,         //知识标题默认值null
            //    "knowledgeContent": $scope.vm.knowledgeContent,        //知识内容默认值null
            //    "knowledgeCreator": $scope.vm.knowledgeCreator,        //作者默认值null
            //    "knowledgeExpDateEnd": $scope.vm.knowledgeExpDateEnd,        //知识有效期开始值默认值null
            //    "knowledgeExpDateStart": $scope.vm.knowledgeExpDateStart,        //知识有效期结束值默认值null
            //    "sourceType":$scope.vm.sourceType,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
            //    "updateTimeType": $scope.vm.updateTimeType   //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)
            //},function(data){
            //    if(data.status==500){
            //        layer.msg("导出失败")
            //    }else{
            //        window.open("/api/ms/chatKnowledge/downloadExcel?fileName="+ data.data,"_blank");
            //    }
            //},function(err){
            //    console.log(err);
            //});

        }

        function recycleBin(){
           $state.go("knowledgeManagement.recycleBin")
        
        }

        function getData(index){

            //console.log((index-1)*$scope.vm.pageSize);
            httpRequestPost("/api/ms/knowledgeManage/overView/searchList",{
                "applicationId" : APPLICATION_ID,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "sceneIds": $scope.vm.sceneIds.length?$scope.vm.sceneIds:null,	//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
                "knowledgeTitle": $scope.vm.knowledgeTitle,         //知识标题默认值null
                "knowledgeContent": $scope.vm.knowledgeContent,        //知识内容默认值null
                "knowledgeUpdate": $scope.vm.knowledgeCreator,        //作者默认值null
                "knowledgeExpDateEnd": $scope.vm.knowledgeExpDateEnd,        //知识有效期开始值默认值null
                "knowledgeExpDateStart": $scope.vm.knowledgeExpDateStart,        //知识有效期结束值默认值null
                "knowledgeOrigin":$scope.vm.sourceType,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
                "updateTimeType": $scope.vm.updateTimeType ,   //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)
                "knowledgeType" : $scope.vm.knowledgeType ,
                "knowledgeExtensionQuestion" : $scope.vm.searchExtension
            },function(data){

                $scope.vm.isSelectAll = false ;
                $scope.vm.knowledgeIds = [] ;
                $scope.vm.listData = data.data.objs;
                $scope.vm.knowledgeTotal = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 10,//分页框数量
                };
                $scope.$apply();
                return true;
            },function(err){
                console.log(err);
            });

        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
              timeout = $timeout(function () {
                    getData(current);
              }, 100)

            }
        },true);
        function keySearch(e){
                var  srcObj = e.srcElement ? e.srcElement : e.target;
                var keycode = window.e?e.keyCode:e.which;
                if(keycode==13){
                    srcObj.blur();
                    napSearch();
                    srcObj.blur();
                }
        }
        function paramsReset(){
            //重置 参数 问题
                $scope.vm.knowledgeType = "" ,
                $scope.vm.searchExtension = "",
                $scope.vm.sceneIds = [],				//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
                $scope.vm.knowledgeTitle = null,         //知识标题默认值null
                $scope.vm.knowledgeContent = null,        //知识内容默认值null
                $scope.vm.knowledgeUpdate = null,        //作者默认值null
                $scope.vm.knowledgeCreator = null,        //作者默认为空
                $scope.vm.knowledgeExpDateEnd = null,        //知识有效期开始值默认值null
                $scope.vm.knowledgeExpDateStart = null,        //知识有效期结束值默认值null
                $scope.vm.sourceType =0,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
                $scope.vm.updateTimeType = 0  //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)
        }
        function delData(){
            if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0)
            {
                layer.msg("请选择删除知识",{time:800});
                return;
            }else{
                layer.confirm('是否删除当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/knowledgeManage/recycleKnowledge",{
                        "knowledgeIds":$scope.vm.knowledgeIds
                    },function(data){
                        $state.reload();
                        layer.msg("刪除成功",{time:1000});
                    },function(){
                        layer.msg("刪除失败",{time:1000});
                    });
                }, function(){
                });
            }
        }
        function selectAll(items){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false ;
                $scope.vm.knowledgeIds = [] ;
            }else{
                $scope.vm.isSelectAll = true ;
                $scope.vm.knowledgeIds = [] ;
                angular.forEach(items,function(val){
                    $scope.vm.knowledgeIds.push(val.knowledgeId)
                });
            }
        }
        function addDelIds(id,arr){
            if(arr.inArray(id)){
                arr.remove(id) ;
                $scope.vm.isSelectAll = false ;
            }else{
                arr.push(id)
            }
            console.log(id,arr) ;
        }
        function getNewNumber(){
            httpRequestPost(" /api/ms/knowledgeManage/overView/searchTotalAndToday",{
                "applicationId" : APPLICATION_ID,
                "sceneIds": $scope.vm.sceneIds.length?$scope.vm.sceneIds:null,						//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
                "knowledgeTitle": $scope.vm.knowledgeTitle,         //知识标题默认值null
                "knowledgeContent": $scope.vm.knowledgeContent,        //知识内容默认值null
                "knowledgeUpdate": $scope.vm.knowledgeCreator,        //作者默认值null
                "knowledgeExpDateEnd": $scope.vm.knowledgeExpDateEnd,        //知识有效期开始值默认值null
                "knowledgeExpDateStart": $scope.vm.knowledgeExpDateStart,        //知识有效期结束值默认值null
                "sourceType":$scope.vm.sourceType,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
            },function(data){
                $scope.vm.newNumber = data.data.total;
                //console.log(data)
                return true;

            },function(err){
               console.log(err)
            });
        }

/////////////////////////////////////////          Bot      /////////////////////////////////////////////////////
        $("body").on('click',function(e){
                  e = event || window.event;
            var  srcObj = e.srcElement ? e.srcElement : e.target;
            if($(srcObj).closest(".aside-nav").hasClass("aside-nav")){
                e.stopPropagation();
            }else{
                $(".aside-nav").find(".type1").children("ul").slideUp() ;
                $timeout(function(){
                    $(".aside-nav").find(".type1").children("a").find(".icon-jj").css("backgroundPosition","0% 0%");
                },50) ;
            }
        });
        //获取root 数据
        void function(){
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId": APPLICATION_ID,
                "categoryPid": "root"
            },function(data){
                $scope.vm.botRoot = data.data;
                $scope.$apply()
            },function(){
                console.log("getDate==failed")
            });
        }() ;
        //点击更改bot value
        //绑定点击空白隐藏（滚动条除外）

        $(".aside-nav").on("click","a",function(e){
            //初始化
            $scope.vm.paramsReset();
            var  srcObj = e.srcElement ? e.srcElement : e.target;
            if(srcObj.tagName=='I'){
                return
            }else if(!$(this).parent().hasClass('type1')){
                $(".botPathactiveMouse").removeClass("botPathactiveMouse") ;
                $(".botPathactiveClick").removeClass("botPathactiveClick") ;
                $(this).addClass("botPathactiveClick") ;
            }
            //同级隐藏
            $(srcObj).closest("li").siblings().each(function(index,item){   //同级隐藏
                $(item).find("ul").hide().find(".icon-jj ").css("backgroundPosition","0% 0%") ;
            }) ;
            $(srcObj).closest("ul.menu_1").parent().siblings().each(function(index,item){   //父级元素兄弟元素所有子集隐藏
                $(item).find("ul.pas-menu_1").hide() ;
            })
            var id = angular.element(this).find("span").attr("data-option-id");
            $scope.vm.sceneIds.push(id);
            //获取bot全路径
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                "categoryId": id
            },function(data){
                $scope.vm.selectedBot = data.categoryFullName.split("/") ;
                console.log(data)
            },function(){});
            // 获取知识数据
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId":APPLICATION_ID,
                "categoryPid": id
            },function(data){
                angular.forEach(data.data,function(item){
                    $scope.vm.sceneIds.push(item.categoryId)
                });
                napSearch()
            },function(){});
            $scope.$apply();
        });
        //点击下一级 bot 下拉数据填充以及下拉效果
        $(".aside-nav").on("click",'.ngBotAdd',function(){
            var id = $(this).attr("data-option-id");
            var that = $(this);
            var isEdg = that.hasClass('icon-ngJj') ;
            // 侧边 只能有一个选项
            //非侧边 可以存在多个
            if(that.parent().hasClass('type1')){  //root bot
                return false
            }else if(!that.closest("ul").hasClass("pas-menu_1")){
                that.parent().parent().parent().siblings().each(function(index,item){
                    $(item).find("ul").hide()
                }) ;
            }
            if(!that.parent().siblings().length){   // 新增
                if(!isEdg){   //加号
                    that.css("backgroundPosition","0% 100%");
                }else{     //业务词
                    that.closest("li").siblings().each(function(index,item){   //同级隐藏
                        $(item).find("ul").hide().find(".icon-jj ").css("backgroundPosition","0% 0%") ;
                    }) ;
                    that.parent().parent().css("overflow","visible");
                    that.closest("ul.menu_1").parent().siblings().each(function(index,item){   //父级元素兄弟元素所有子集隐藏
                        $(item).find("ul.pas-menu_1").hide() ;
                    })
                }
                //请求BOT数据 组装DOM
                httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId":APPLICATION_ID,
                    "categoryPid": id
                },function(data){
                    console.log(data)  ;
                    if(data.data){
                            var itemClassName = isEdg?"pas-menu_1":"menu_1";
                            var leafClassName = isEdg?"icon-jj":"icon-ngJj";
                            var  html = '<ul class="'+itemClassName+'" style="overflow:visible;">';
                            //已经移除 icon-ngJj  ngBotAdd 样式 所有的应用于选择
                            angular.forEach(data.data,function(item){
                                var typeClass ;
                                // 叶子节点 node
                                if((item.categoryLeaf == 0) && (item.categoryAttributeName != "edge" )){
                                    typeClass = "bot-noBg"　;
                                }else if((item.categoryLeaf != 0) && (item.categoryAttributeName == "edge" )){
                                    typeClass = "bot-edge"　;
                                }else if((item.categoryLeaf != 0) && (item.categoryAttributeName == "node" )){
                                    typeClass = "icon-jj"
                                }
                                var  backImage ;
                                switch(item.categoryTypeId){
                                    case 160 :
                                        backImage = " bot-divide" ;
                                        break  ;
                                    case 161 :
                                        backImage = " bot-process";
                                        break  ;
                                    case 162 :
                                        backImage = " bot-attr" ;
                                        break  ;
                                    case 163 :
                                        backImage = " bot-default" ;
                                        break  ;
                                }
                                //1  存在叶节点   >
                                //if(item.categoryLeaf){
                                //    html+= '<li data-option-id="'+item.categoryId+'" class="slide-a  bg50 bgE3">' +
                                //    '<a class="ellipsis bg50" href="javascript:;">'+
                                    html+= '<li data-option-id="'+item.categoryId+'" class="slide-a">' +
                                                '<a class="ellipsis bg50" href="javascript:;">'+
                                                    '<i class="'+leafClassName+" "+backImage+" "+typeClass+' ngBotAdd" data-option-id="'+item.categoryId+'"></i>'+
                                                    '<span data-option-id="'+item.categoryId+'">'+item.categoryName+'</span>'+
                                                '</a>' +
                                             '</li>' ;
                                //}else{
                                //    //不存在叶节点
                                //    html+= '<li class="bg50 bgE3" data-option-id="'+item.categoryId+'" class="slide-a  bg50 bgE3">' +
                                //                ' <a class="ellipsis bg50" href="javascript:;">'+
                                //                    '<i class="'+leafClassName+'" style="background:0" data-option-id="'+item.categoryId+'"></i>'+
                                //                    '<span data-option-id="'+item.categoryId+'">'+item.categoryName+'</span>'+
                                //                '</a>' +
                                //           '</li>'
                                //}
                            });
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent()));
                        $timeout(function(){
                            that.parents().next().slideDown()
                        },50) ;
                    }
                },function(err){
                    //console.log("getDate==failed");
                });
            }else{  //操作当前 DOM 隐藏显示
                if(!isEdg){   //加号
                    if(that.css("backgroundPosition")=="0% 0%"){
                        that.css("backgroundPosition","0% 100%");
                        that.parent().next().slideDown()
                    }else{
                        that.css("backgroundPosition","0% 0%");
                        that.parent().next().slideUp() ;
                    }
                }else{       //业务词
                    that.parent().next().slideToggle() ;     //自身状态改变
                    that.closest("li").siblings().each(function(index,item){   //同级隐藏
                        $(item).find("ul").hide().find(".icon-jj ").css("backgroundPosition","0% 0%") ;
                    }) ;
                    that.closest("ul.menu_1").parent().siblings().each(function(index,item){   //父级元素兄弟元素所有子集隐藏
                        $(item).find("ul.pas-menu_1").hide() ;
                    })
                }
            }
        });
        $(".aside-nav").on("mouseenter",'.ellipsis',function() {
            var self = $(this) ;
            if(self.parent().hasClass('type1')){
                return false
            }else{
                if(self.hasClass("botPathactiveClick")){
                    return
                }else{
                    $(this).addClass("botPathactiveMouse")
                }
            }
        }) ;
        $(".aside-nav").on("mouseout",'.ellipsis',function() {
            var self = $(this) ;
            if(self.parent().hasClass('type1')){
                return  false
            }else{
                if(self.hasClass("botPathactiveClick")){
                    return
                }else{
                    self.removeClass("botPathactiveMouse")
                }
            }
        }) ;
        //第二种  箭头添加 hover
        //$(".aside-nav").on("mouseenter",'.leafHover',function(){
        //    var id = $(this).attr("data-option-id");
        //    $(this).addClass("");
        //    //console.log(id)
        //    var that = $(this);
        //    if($(that).children().length==1){
        //        httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
        //            "categoryApplicationId":APPLICATION_ID,
        //            "categoryPid": id
        //        },function(data){
        //            //console.log(data);
        //            if(data.data){
        //                //console.log(data);
        //                    n+=1;
        //                        var  html = '<ul class="pas-menu_1 leaf'+n+'">';
        //                        angular.forEach(data.data,function(item){
        //                            //1  存在叶节点
        //                            if(item.categoryLeaf){
        //                                html+= '<li data-option-id="'+item.categoryId+'">' +
        //                                    '<div class="slide-a">'+
        //                                    ' <a class="ellipsis" href="javascript:;">'+
        //                                     '<i class="icon-ngJj ngBotAdd" data-option-id="'+item.categoryId+'"></i>'+
        //                                    '<span data-option-id="'+item.categoryId+'">'+item.categoryName+'</span></i>'+
        //                                    '</a>' +
        //                                    '</div>' +
        //                                    '</li>'
        //                            }else{
        //                                //不存在叶节点
        //                                html+= '<li data-option-id="'+item.categoryId+'">' +
        //                                    '<div class="slide-a">'+
        //                                    ' <a class="ellipsis" href="javascript:;">'+
        //                                    '<span data-option-id="'+item.categoryId+'">'+item.categoryName+'</span>'+
        //                                    '</a>' +
        //                                    '</div>' +
        //                                    '</li>'
        //                            }
        //                        });
        //                    }
        //            html+="</ul>";
        //            $(html).appendTo((that));
        //            $(".leaf"+n).show();
        //            //}
        //        },function(err){
        //            console.log("getDate==failed");
        //        });
        //
        //}else{
        //     $(that).children().eq(1).show()
        //    }
        //});
        //$(".aside-nav").on("mouseleave",'.leafHover',function(){
        //    var that = $(this);
        //    if($(that).children().length==2){
        //        $(that).children().eq(1).hide();
        //    }
        //});

////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
    }])
// Source: app/static/knowledgeManagement/js/controller/knowOverview/markKnowledgePreview_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('markPreviewController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$cookieStore","knowledgeAddServer","$window",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$cookieStore,knowledgeAddServer,$window) {
        //if(!$window.opener.knowledgeScan){
        //    $state.go("knowledgeManagement.markOverview")
        //}else{
        if(!$stateParams.knowledgeId){
            $state.go("knowledgeManagement.markOverview")
        }else{
            var knowledgeScan = $window.opener.knowledgeScan ;
            $scope.vm = {
                knowledgeId : $stateParams.knowledgeId,
                knowledgeType : $stateParams.knowledgeType,
                listData : null,
                edit :  edit
            };
            // 展示渠道维度使用
            //獲取渠道
            knowledgeAddServer.getDimensions({ "applicationId" : APPLICATION_ID},
                function(data) {
                    if(data.data){
                        $scope.vm.dimensions = data.data;
                    }
                }, function(error) {
                });
            //获取维度
            knowledgeAddServer.getChannels({ "applicationId" : APPLICATION_ID},
                function(data) {
                    if(data.data){
                        $scope.vm.channels = data.data
                    }
                }, function(error) {
                });
            //修改

            function edit(){
                $state.go("knowledgeManagement.conceptAdd",{data:$scope.vm.listData})
            }
            getData();
            function getData(){
                httpRequestPost("/api/ms/conceptKnowledge/getKnowledge",{
                    "knowledgeId" : $scope.vm.knowledgeId,
                    "applicationId" : APPLICATION_ID
                },function(data){
                    console.log(data);
                    $scope.vm.listData = data.data;
                    $scope.$apply();
                },function(){
                    console.log("获取失败")
                });
            }
        }

    }
]);
// Source: app/static/knowledgeManagement/js/controller/knowOverview/markServScenaOverview_controller.js

/**
 * Created by mileS on 2017/6/3
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('markOverviewController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$timeout","$cookieStore","$window",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$timeout,$cookieStore,$window ) {
        //$state.go("markServScenaOverview.manage");
        //******************************************** //
        var n = 1;   // 定義淚目數  類別
        //********************************************//
        $scope.vm = {
            applicationName : $cookieStore.get("applicationName"),
            exportExcel : exportExcel ,
            creatBot : [],
            frameCategoryId : "",

            botRoot : null,
            type : true,
            listData : [],                  //页面展示内容
            //fn
            getData : getData ,             //数据获取
            delData : delData ,             //删除
            knowledgeTotal : null,         //知识总条数
            newNumber : null ,              //更新条数
            getNewNumber : getNewNumber ,  //获取更新条数

            knowledgeIds : [], //刪除 id ，
            addDelIds : addDelIds ,
            // params set
            "pageSize": 5,
            sceneIds : [] ,
            "knowledgeTitle": null,         //知识标题默认值null
            "knowledgeContent": null,        //知识内容默认值null
            "knowledgeCreator": null,        //作者默认值null
            "knowledgeExpDateEnd": null,        //知识有效期开始值默认值null
            "knowledgeExpDateStart": null,        //知识有效期结束值默认值null
            sourceType: 0,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
            "updateTimeType": 0 ,  //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)

            keySearch : keySearch,
            napSearch : napSearch ,
            getSourceType : getSourceType,
            getUpdateTimeType : getUpdateTimeType,

            scan : scan ,   // 点击标题预览

            heighSarch : false ,
            selectAll : selectAll ,
            isSelectAll  : false ,  // 全选 删除
            paramsReset : paramsReset //搜索重置参数
        };
        /**
         * 知识导出
         * @param index
         */
        function exportExcel(){
            var scenceId = $scope.vm.sceneIds.length?$scope.vm.sceneIds:[];
            var urlParams =
                "?applicationId="+APPLICATION_ID+"&sceneIds="+scenceId+"&knowledgeTitle="+$scope.vm.knowledgeTitle +
                "&knowledgeContent="+$scope.vm.knowledgeContent+"&knowledgeCreator="+$scope.vm.knowledgeCreator+
                "&knowledgeExpDateEnd="+$scope.vm.knowledgeExpDateEnd+"&knowledgeExpDateStart="+$scope.vm.knowledgeExpDateStart+
                "&sourceType="+$scope.vm.sourceType+"&updateTimeType="+$scope.vm.updateTimeType;
            var url = "/api/ms/knowledgeManage/exportExcel"+urlParams  ;//请求的url
            $window.open(url,"_blank") ;
            //data:{
            //    "applicationId" : APPLICATION_ID,
            //    "sceneIds": $scope.vm.sceneIds.length?$scope.vm.sce
            // neIds:null,	//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
            //    "knowledgeTitle": $scope.vm.knowledgeTitle,         //知识标题默认值null
            //    "knowledgeContent": $scope.vm.knowledgeContent,        //知识内容默认值null
            //    "knowledgeCreator": $scope.vm.knowledgeCreator,        //作者默认值null
            //    "knowledgeExpDateEnd": $scope.vm.knowledgeExpDateEnd,        //知识有效期开始值默认值null
            //    "knowledgeExpDateStart": $scope.vm.knowledgeExpDateStart,        //知识有效期结束值默认值null
            //    "sourceType":$scope.vm.sourceType,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
            //    "updateTimeType": $scope.vm.updateTimeType   //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)
            //}//要发送的数据
            //});
        }
        napSearch(false);
        //高级搜索 开关
        $scope.$watch("vm.heighSarch",function(val){
            if(val){
                angular.element(".advanced_search").slideDown()
            }else{
                angular.element(".advanced_search").slideUp()
            }
        });
        function napSearch(type){
            getData(1);
            getNewNumber();
            if(type){
                $timeout(function(){
                    $scope.vm.paramsReset();
                },500);
            }
            $scope.vm.heighSarch = false ;
        }
        function scan(item){
            var obj = {};
            obj.applicationId = APPLICATION_ID ;
            obj.knowledgeId = item.knowledgeId;
            obj.knowledgeType = "104";
            $window.knowledgeScan = obj ;
            var url = $state.href("markKnowledgePreview.manage");
            $window.open(url,'_blank');
            //$state.go("custKnowledgePreview.manage")
        }
        function getSourceType(val){
            $scope.vm.sourceType = val
        }
        function getUpdateTimeType(val){
            $scope.vm.updateTimeType = val
        }
        getData(1) ;
        function getData(index){
            //console.log((index-1)*$scope.vm.pageSize);
            httpRequestPost("/api/ms/knowledgeManage/overView/searchList",{
                "applicationId" : APPLICATION_ID,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "sceneIds": $scope.vm.sceneIds.length?$scope.vm.sceneIds:null,	//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
                "knowledgeTitle": $scope.vm.knowledgeTitle,         //知识标题默认值null
                "knowledgeContent": $scope.vm.knowledgeContent,        //知识内容默认值null
                "knowledgeCreator": $scope.vm.knowledgeCreator,        //作者默认值null
                "knowledgeExpDateEnd": $scope.vm.knowledgeExpDateEnd,        //知识有效期开始值默认值null
                "knowledgeExpDateStart": $scope.vm.knowledgeExpDateStart,        //知识有效期结束值默认值null
                "sourceType":$scope.vm.sourceType,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
                "updateTimeType": $scope.vm.updateTimeType   //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)
            },function(data){
                $scope.vm.isSelectAll = false ;
                $scope.vm.knowledgeIds = [] ;
                $scope.vm.listData = data.data.objs;
                $scope.vm.knowledgeTotal = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 10 //分页框数量
                    //numberOfPages  : Math.ceil(data.data.total/5)
                };
                $scope.$apply();
                return true;
            },function(){
            });
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getData(current);
                }, 100)
            }
        },true);
        function keySearch(e){
            var  srcObj = e.srcElement ? e.srcElement : e.target;
            var keycode = window.e?e.keyCode:e.which;
            if(keycode==13){
                srcObj.blur();
                napSearch();
                srcObj.blur();
            }
        }
        function paramsReset(){
            //重置 参数 问题
            $scope.vm.sceneIds = [],						//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
                $scope.vm.knowledgeTitle = null,         //知识标题默认值null
                $scope.vm.knowledgeContent = null,        //知识内容默认值null
                $scope.vm.knowledgeCreator = null,        //作者默认值null
                $scope.vm.knowledgeExpDateEnd = null,        //知识有效期开始值默认值null
                $scope.vm.knowledgeExpDateStart = null,        //知识有效期结束值默认值null
                $scope.vm.sourceType =0,        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
                $scope.vm.updateTimeType = 0  //知识更新时间默认值0   (0:不限 1:近三天 2:近七天 3:近一月)
        }
        function selectAll(items){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false ;
                $scope.vm.knowledgeIds = [] ;
            }else{
                $scope.vm.isSelectAll = true ;
                $scope.vm.knowledgeIds = [] ;
                angular.forEach(items,function(val){
                    $scope.vm.knowledgeIds.push(val.knowledgeId)
                });
            }
        }
        function addDelIds(id,arr){
            if(arr.inArray(id)){
                arr.remove(id) ;
                $scope.vm.isSelectAll = false ;
            }else{
                arr.push(id)
            }
        }

        function delData(){
            if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0)
            {
                layer.msg("请选择删除知识",{time:800});
            }else{
                layer.confirm('是否删除当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/knowledgeManage/deleteKnowledge",{
                        "knowledgeIds":$scope.vm.knowledgeIds
                    },function(data){
                        $state.reload();
                        layer.msg("刪除成功",{time:1000});
                    },function(){
                        layer.msg("刪除失败",{time:1000});
                    });
                }, function(){
                });
            }
        }
        function getNewNumber(){
            httpRequestPost(" /api/ms/knowledgeManage/overView/searchTotalAndToday",{
                "applicationId" : APPLICATION_ID,
                "sceneIds": $scope.vm.sceneIds.length?$scope.vm.sceneIds:null,						//类目编号集默认值null（格式String[],如{“1”,”2”,”3”}）
                "knowledgeTitle": $scope.vm.knowledgeTitle,         //知识标题默认值null
                "knowledgeContent": $scope.vm.knowledgeContent,        //知识内容默认值null
                "knowledgeCreator": $scope.vm.knowledgeCreator,        //作者默认值null
                "knowledgeExpDateEnd": $scope.vm.knowledgeExpDateEnd,        //知识有效期开始值默认值null
                "knowledgeExpDateStart": $scope.vm.knowledgeExpDateStart,        //知识有效期结束值默认值null
                "sourceType":$scope.vm.sourceType        //知识来源默认值0   (0:全部   1:单条新增  2：文档加工)
            },function(data){
                $scope.vm.newNumber = data.data.total;
                console.log(data)
                return true;

            },function(){
                layer.msg("查找今日新增条数失败")
            });
        }
/////////////////////////////////////////          Bot      /////////////////////////////////////////////////////
        $("body").on('click',function(e){
            e = event || window.event;
            var  srcObj = e.srcElement ? e.srcElement : e.target;
            console.log($(srcObj).closest(".aside-nav").hasClass(".aside-nav")) ;
            if($(srcObj).closest(".aside-nav").hasClass("aside-nav")){
                e.stopPropagation();
            }else{
                $(".aside-nav").find(".type1").children("ul").slideUp() ;
                $timeout(function(){
                    $(".aside-nav").find(".type1").children("a").find(".icon-jj").css("backgroundPosition","0% 0%");
                },50) ;
            }
        });
        //获取root 数据
        void function(){
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId": APPLICATION_ID,
                "categoryPid": "root"
            },function(data){
                $scope.vm.botRoot = data.data;
                $scope.$apply()
            },function(){
                console.log("getDate==failed")
            });
        }() ;
        //点击更改bot value
        //绑定点击空白隐藏（滚动条除外）

        $(".aside-nav").on("click","a",function(e){
            //初始化
            $scope.vm.paramsReset();
            var  srcObj = e.srcElement ? e.srcElement : e.target;
            if(srcObj.tagName=='I'){
                return
            }else if(!$(this).parent().hasClass('type1')){
                $(".botPathactiveMouse").removeClass("botPathactiveMouse") ;
                $(".botPathactiveClick").removeClass("botPathactiveClick") ;
                $(this).addClass("botPathactiveClick") ;
            }

            var id = angular.element(this).find("span").attr("data-option-id");
            $scope.vm.sceneIds.push(id);
            //获取bot全路径
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                "categoryId": id
            },function(data){
                $scope.vm.selectedBot = data.categoryFullName.split("/") ;
                console.log(data)
            },function(){});
            // 获取知识数据
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId":APPLICATION_ID,
                "categoryPid": id
            },function(data){
                angular.forEach(data.data,function(item){
                    $scope.vm.sceneIds.push(item.categoryId)
                });
                napSearch()
            },function(){});
            $scope.$apply();
        });
        //点击下一级 bot 下拉数据填充以及下拉效果
        $(".aside-nav").on("click",'.ngBotAdd',function(){
            var id = $(this).attr("data-option-id");
            var that = $(this);
            var isEdg = that.hasClass('icon-ngJj') ;
            // 侧边 只能有一个选项
            //非侧边 可以存在多个
            if(that.parent().hasClass('type1')){  //root bot
                return false
            }else if(!that.closest("ul").hasClass("pas-menu_1")){
                that.parent().parent().parent().siblings().each(function(index,item){
                    $(item).find("ul").hide()
                }) ;
            }
            if(!that.parent().siblings().length){   // 新增
                if(!isEdg){   //加号
                    that.css("backgroundPosition","0% 100%");
                }else{     //业务词
                    that.closest("li").siblings().each(function(index,item){   //同级隐藏
                        $(item).find("ul").hide().find(".icon-jj ").css("backgroundPosition","0% 0%") ;
                    }) ;
                    that.closest("ul.menu_1").parent().siblings().each(function(index,item){   //父级元素兄弟元素所有子集隐藏
                        $(item).find("ul.pas-menu_1").hide() ;
                    })
                }
                //请求BOT数据 组装DOM
                httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId":APPLICATION_ID,
                    "categoryPid": id
                },function(data){
                    console.log(data)  ;
                    if(data.data){
                        var itemClassName = isEdg?"pas-menu_1":"menu_1";
                        var leafClassName = isEdg?"icon-jj":"icon-ngJj";
                        var  html = '<ul class="'+itemClassName+'">';
                        //已经移除 icon-ngJj  ngBotAdd 样式 所有的应用于选择
                        angular.forEach(data.data,function(item){
                            var typeClass ;
                            // 叶子节点 node
                            if((item.categoryLeaf == 0) && (item.categoryAttributeName != "edge" )){
                                typeClass = "bot-noBg"　;
                            }else if((item.categoryLeaf != 0) && (item.categoryAttributeName == "edge" )){
                                typeClass = "bot-edge"　;
                            }else if((item.categoryLeaf != 0) && (item.categoryAttributeName == "node" )){
                                typeClass = "icon-jj"
                            }
                            var  backImage ;
                            switch(item.categoryTypeId){
                                case 160 :
                                    backImage = " bot-divide" ;
                                    break  ;
                                case 161 :
                                    backImage = " bot-process";
                                    break  ;
                                case 162 :
                                    backImage = " bot-attr" ;
                                    break  ;
                                case 163 :
                                    backImage = " bot-default" ;
                                    break  ;
                            }
                            //1  存在叶节点   >
                            html+= '<li data-option-id="'+item.categoryId+'" class="slide-a">' +
                                '<a class="ellipsis bg50" href="javascript:;">'+
                                '<i class="'+leafClassName+" "+backImage+" "+typeClass+' ngBotAdd" data-option-id="'+item.categoryId+'"></i>'+
                                '<span data-option-id="'+item.categoryId+'">'+item.categoryName+'</span>'+
                                '</a>' +
                                '</li>' ;

                        });
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent()));
                        $timeout(function(){
                            that.parents().next().slideDown()
                        },50) ;
                    }
                },function(err){
                    //console.log("getDate==failed");
                });
            }else{  //操作当前 DOM 隐藏显示
                if(!isEdg){   //加号
                    if(that.css("backgroundPosition")=="0% 0%"){
                        that.css("backgroundPosition","0% 100%");
                        that.parent().next().slideDown()
                    }else{
                        that.css("backgroundPosition","0% 0%");
                        that.parent().next().slideUp() ;
                    }
                }else{       //业务词
                    that.parent().next().slideToggle() ;     //自身状态改变
                    that.closest("li").siblings().each(function(index,item){   //同级隐藏
                        $(item).find("ul").hide().find(".icon-jj ").css("backgroundPosition","0% 0%") ;
                    }) ;
                    that.closest("ul.menu_1").parent().siblings().each(function(index,item){   //父级元素兄弟元素所有子集隐藏
                        $(item).find("ul.pas-menu_1").hide() ;
                    })
                }
            }
        });
        $(".aside-nav").on("mouseenter",'.ellipsis',function() {
            var self = $(this) ;
            if(self.parent().hasClass('type1')){
                return false
            }else{
                if(self.hasClass("botPathactiveClick")){
                    return
                }else{
                    $(this).addClass("botPathactiveMouse")
                }
            }
        }) ;
        $(".aside-nav").on("mouseout",'.ellipsis',function() {
            var self = $(this) ;
            if(self.parent().hasClass('type1')){
                return  false
            }else{
                if(self.hasClass("botPathactiveClick")){
                    return
                }else{
                    self.removeClass("botPathactiveMouse")
                }
            }
        }) ;

////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
    }]);
// Source: app/static/knowledgeManagement/js/controller/knowledgeAudit/knowledgeAudit_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('knowledgeAuditController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$cookieStore","knowledgeAddServer","$window","$http","myService","$timeout",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$cookieStore,knowledgeAddServer,$window,$http,myService,$timeout) {

    	    $scope.vm = {
    	    	    searchKnowledgeList:searchKnowledgeList,  //知识搜索 
                    auditDetails:auditDetails,   //知识详情页
    	    	    isSelectAll : false,
		            selectAll : selectAll,      //全选
		            selectSingle:selectSingle,  //单选
                    auditPass:auditPass,        //批量审核通过
                    auditNopass:auditNopass,    //批量审批不同过   
                    auditPassedOrNopass:auditPassedOrNopass, //知识审核
		             paginationConf : {
		                pageSize: 5,//第页条目数
		                pagesLength: 10,//分页框数量
		            } ,
		            knowledgeTitle:"",
		            knowledgeList:"",
		            knowledgeIds:[],
		            list:""	,
		            total:"",
                    knowledgeType:'',
                    knowledgeId:'',
                    dimensions:'',
                    channels:'',
                    reason:''


		     };
       //知识列表
        searchKnowledgeList(1)
        function searchKnowledgeList(index){
        	  httpRequestPost("/api/ms/knowledgeManage/overView/pendingAuditKnowledgeList",{
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "knowledgeTitle": $scope.vm.knowledgeTitle,  
                "statusId":3
            },function(data){
                    console.log(data)
                    $scope.$apply(function(){
                        $scope.vm.knowledgeList = data.data ;
                        $scope.vm.total=data.data.total;
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = data.data.total/$scope.vm.paginationConf.pageSize;
                    })
            })
        	}

        //单条知识审核通过与否
         function auditPassedOrNopass(statusId){
            console.log(statusId)
            if($scope.vm.reason==''&&statusId==4){
                 layer.msg("请填写不通过理由！！！");
                 return false
            }else{
                 httpRequestPost("/api/ms/knowledgeManage/overView/auditPassed",{
                    "statusId":statusId,
                    "reason":$scope.vm.reason,
                    "knowledgeIds":[$scope.vm.knowledgeId],
                    "knowledgeUpdate" : USER_LOGIN_NAME
                },function(data){
                   if(data.status==200&&statusId==1){
                      layer.msg("审核成功,请在知识总览查看",{time:2000});
                       $state.reload();
                   }else if(data.status==200&&statusId==4){
                     layer.msg(data.info);
                       $state.reload();
                       
                   }
               })
            }
         }

         //知识全选
        function selectAll(){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false;
                $scope.vm.knowledgeIds = [];
            }else{
                $scope.vm.isSelectAll=true;
                $scope.vm.knowledgeIds=[];
                angular.forEach($scope.vm.knowledgeList.objs,function (val) {
                    $scope.vm.knowledgeIds.push(val.knowledgeId);
                })
            }
            console.log($scope.vm.knowledgeIds);
        }
        //知识单选单选
        function selectSingle(id){
            if($scope.vm.knowledgeIds.inArray(id)){
                $scope.vm.knowledgeIds.remove(id);
                $scope.vm.isSelectAll = false;
            }else{
                $scope.vm.knowledgeIds.push(id);

            }
            if($scope.vm.knowledgeIds.length==$scope.vm.knowledgeList.objs.length){
                $scope.vm.isSelectAll = true;
            }
            console.log( $scope.vm.knowledgeIds);
        }   
          
        //知识批量审核通过
        function auditPass(){
            if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0)
            {
                layer.msg("请选择审核知识",{time:800});
                return;
            }else{
                layer.confirm('是否审核当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                     httpRequestPost("/api/ms/knowledgeManage/overView/auditPassed",{
                        "statusId":1,
                        "reason":$scope.vm.reason,
                        "knowledgeIds":$scope.vm.knowledgeIds,
                        "knowledgeUpdate" : USER_LOGIN_NAME
                },function(data){
                        $state.reload();
                        layer.msg("审核成功,请在知识总览查看",{time:2000});
                    },function(){
                        layer.msg("审核失败",{time:1000});
                    });
                }, function(){
                });
            }
        }

        //知识批量审核不通过
        function auditNopass(){
             if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0){
                    layer.msg("请选择审核知识",{time:800});
                     return false
                }
                        
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/knowledgeAudit/auditNopass.html",
                width:"650px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true, 
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,   
                preCloseCallback: function (e) {    //关闭回掉
                    if(e==3){
                         if($scope.vm.reason==''){
                             layer.msg("请填写不通过理由！！！");
                             return false
                         }else{
                              httpRequestPost("/api/ms/knowledgeManage/overView/auditPassed",{
                                "statusId":4,
                                "reason":$scope.vm.reason,
                                "knowledgeIds":$scope.vm.knowledgeIds,
                                "knowledgeUpdate" : USER_LOGIN_NAME
                            },function(data){
                               if(data.status==200){
                                 layer.msg(data.info) ;
                                   $state.reload();
                               }
                           })
                         }
                         
                    }
                }
            });
        }


        //知识详情页
        function auditDetails(knowledgeType,knowledgeId,statusId){
             $scope.vm.knowledgeType=parseInt(knowledgeType);
             $scope.vm.knowledgeId=knowledgeId;
             $scope.vm.statusId=statusId;
             console.log($scope.vm.knowledgeType)
             console.log($scope.vm.knowledgeId)
             if($scope.vm.knowledgeType=="108"){
                  $state.go("knowledgeManagement.auditProcessKnow",{knowledgeId:$scope.vm.knowledgeId,knowledgeType:$scope.vm.statusId})
             }else{ 
                 detailsMessage();
                var dialog = ngDialog.openConfirm({
                    template: "/static/knowledgeManagement/knowledgeAudit/custPreview.html",
                    width:"650px",
                    scope: $scope,
                    closeByNavigation: false,
                    overlay: true, 
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,   
                    preCloseCallback: function (e) {    //关闭回掉
                        if(e==1){
                              auditPassedOrNopass(1)
                        }else if(e==0){
                                if($scope.vm.reason==''){
                                     layer.msg("请填写不通过理由！！！");
                                     return false
                                 }else{
                                     auditPassedOrNopass(4)
                                 }
                       }
                             
                        }
                       
             
                });
             }
            
        }
        
        //详细信息
        function detailsMessage(){
            // 展示渠道维度使用
            //獲取渠道
            knowledgeAddServer.getDimensions({ "applicationId" : APPLICATION_ID},
                function(data) {
                    if(data.data){
                        $scope.vm.dimensions = data.data;
                    }
                }, function(error) {
                });
            //获取维度
            knowledgeAddServer.getChannels({ "applicationId" : APPLICATION_ID},
                function(data) {
                    if(data.data){
                        $scope.vm.channels = data.data
                    }
                }, function(error) {
                });
            var editUrl,api;
            switch($scope.vm.knowledgeType){
                case 100 :
                    editUrl = "knowledgeManagement.faqAdd";
                    api = "/api/ms/faqKnowledge/getKnowledge";
                    break;
                case 101 :
                    editUrl = "knowledgeManagement.singleAddConcept" ;
                    api = "/api/ms/conceptKnowledge/getKnowledge";
                    break;
                case 102 :
                    editUrl = "knowledgeManagement.listAdd";
                    api = "/api/ms/conceptKnowledge/getKnowledge";
                    break;
                case 103 :
                    editUrl = "knowledgeManagement.factorAdd";
                    api = "/api/ms/elementKnowledgeAdd/findElementKnowledgeByKnowledgeId";
                    break;
                case 106 :
                    editUrl = "knowledgeManagement.markKnow";
                    api = "api/ms/richtextKnowledge/getKnowledge";
                    break;
                case 107 :
                    editUrl = "knowledgeManagement.recommendKnow";
                    api = "/api/ms/recommendMarketingKnowledge/getKnowledge";
                    break;
                case 108 :
                    api = "knowledgeManagement.processKnow";
                    break;    
            }
            void function(){
                knowledgeAddServer.getDataServer(api,{
                    "knowledgeId" : $scope.vm.knowledgeId,
                    "applicationId" : APPLICATION_ID
                },function(data){
                    if($scope.vm.knowledgeType == 103){
                        //console.log(data.knowledgeContents[0])
                        var data = data.data ;
                        var table = data.knowledgeContents[0].knowledgeTable ;
                        data.knowledgeContents[0].knowledgeContent = table;
                        delete data.knowledgeContents[0].knowledgeTable;
                        $scope.vm.listData = data;
                    }else if($scope.vm.knowledgeType == 107){
                        var data = data.data ;
                        var tableCon=data.knowledgeContents[0].knowledgeContent ;
                        var table = data.knowledgeContents[0].knowledgeTable ;
                        data.knowledgeContents[0].knowledgeContent = table;
                        data.knowledgeContents[0].knowledgeContentTrue = tableCon ;
                        delete data.knowledgeContents[0].knowledgeTable;
                        $scope.vm.listData = data;
                        httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                            categoryId: data.extensionQuestions[0].extensionQuestionTitle
                        },function(response) {
                            console.log(response) ;
                            if (response.status = 10000) {
                                $scope.$apply(function () {
                                $scope.vm.listData.extensionQuestions[0].extensionQuestionName =  response.categoryFullName ;
                                });
                            }
                        }) ;

                    }else{
                        $scope.vm.listData = data.data;
                    }
                },function(){
                    console.log("获取失败")
                }) ;
            }()
        }


        //分页监控
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    searchKnowledgeList(current);
                }, 100)

            }
        },true);
        
    }

]);
// Source: app/static/knowledgeManagement/js/controller/knowledgeAudit/knowledge_audit_failed_controller.js
/**
 * Created by Administrator on 2017/11/03.
 * 控制器
 */
angular.module('knowledgeManagementModule').controller('knowledgeAuditFailedController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$cookieStore","knowledgeAddServer","$window","$http","myService","$timeout",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$cookieStore,knowledgeAddServer,$window,$http,myService,$timeout) {

    	    $scope.vm = {
    	    	    searchKnowledgeList:searchKnowledgeList,  //知识搜索 
                    auditDetails:auditDetails,   //知识详情页
    	    	    isSelectAll : false,
		            selectAll : selectAll,      //全选
		            selectSingle:selectSingle,  //单选
                    deleteOne:deleteOne,        //单条删除
                    delData:delData,            //批量删除
		             paginationConf : {
		                pageSize: 5,//第页条目数
		                pagesLength: 10,//分页框数量
		            } ,
		            knowledgeTitle:"",
		            knowledgeList:"",
		            knowledgeIds:[],
		            list:""	,
		            total:"",
                    knowledgeType:'',
                    knowledgeId:'',
                    dimensions:'',
                    channels:''

		     };

         searchKnowledgeList(1)
        function searchKnowledgeList(index){
              httpRequestPost("/api/ms/knowledgeManage/overView/pendingAuditKnowledgeList",{
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "knowledgeTitle": $scope.vm.knowledgeTitle,  
                "knowledgeCreator":USER_LOGIN_NAME,
                "statusId":4
            },function(data){
                    console.log(data)
                    $scope.$apply(function(){
                        $scope.vm.knowledgeList = data.data ;
                        $scope.vm.total=data.data.total;
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = data.data.total/$scope.vm.paginationConf.pageSize;
                    })
            })
            }

        //知识详情页

        function auditDetails(){
            $scope.vm.knowledgeType=103;
            $scope.vm.knowledgeId=438557530742853632;
             detailsMessage();
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/knowledgeAudit/custPreview.html",
                width:"650px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    detailsMessage();
                    if(e === 1){
                      
                    }else{

                    }
                }
            });
        }
         //全选
        function selectAll(){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false;
                $scope.vm.knowledgeIds = [];
            }else{
                $scope.vm.isSelectAll=true;
                $scope.vm.knowledgeIds=[];
                angular.forEach($scope.vm.knowledgeList.objs,function (val) {
                    $scope.vm.knowledgeIds.push(val.knowledgeId);
                })
            }
            console.log($scope.vm.knowledgeIds);
        }
        //单选
        function selectSingle(id){
            if($scope.vm.knowledgeIds.inArray(id)){
                $scope.vm.knowledgeIds.remove(id);
                $scope.vm.isSelectAll = false;
            }else{
                $scope.vm.knowledgeIds.push(id);

            }
            if($scope.vm.knowledgeIds.length==$scope.vm.knowledgeList.objs.length){
                $scope.vm.isSelectAll = true;
            }
            console.log( $scope.vm.knowledgeIds);
        }

        //单条知识删除
        function deleteOne(knowledgeIds){
                layer.confirm('是否删除当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/knowledgeManage/deleteKnowledge",{
                        "knowledgeIds":knowledgeIds
                    },function(data){
                        $state.reload();
                        layer.msg("刪除成功",{time:1000});
                    },function(){
                        layer.msg("刪除失败",{time:1000});
                    });
                }, function(){
                });
            
        }

        //知识批量删除
        function delData(){
            if(!$scope.vm.knowledgeIds || $scope.vm.knowledgeIds.length === 0)
            {
                layer.msg("请选择删除知识",{time:800});
                return;
            }else{
                layer.confirm('是否删除当前选中知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/knowledgeManage/deleteKnowledge",{
                        "knowledgeIds":$scope.vm.knowledgeIds
                    },function(data){
                        $state.reload();
                        layer.msg("刪除成功",{time:1000});
                    },function(){
                        layer.msg("刪除失败",{time:1000});
                    });
                }, function(){
                });
            }
        }
        //分页监控
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    searchKnowledgeList(current);
                }, 100)

            }
        },true);
        
    }

]);
// Source: app/static/knowledgeManagement/js/controller/knowledgeScan.controller.js

angular.module('knowledgeManagementModule').controller('knowledgeScanController', [
    '$scope', 'localStorageService' ,"$state" ,"$stateParams","ngDialog","$cookieStore","$location","$rootScope","knowledgeAddServer","$window",
    function ($scope,localStorageService, $state,$stateParams,ngDialog,$cookieStore,$location,$rootScope,knowledgeAddServer,$window) {
        //$state.go("custKnowledgePreview.manage",{userPermission:$stateParams.userPermission});
        //console.log($window.opener.knowledgeScan);
        //console.log($window.opener.knowledgeScan);
        var knowledgeScan =  $window.opener.knowledgeScan;
        $scope.vm = {
            knowledgeType : knowledgeScan.params.knowledgeType,
            listData : null,
            knowledgeData : knowledgeScan.params ,
            dimensions : "",
            channels : "",
            editUrl : knowledgeScan.editUrl,
            save :save,
            tableData : (knowledgeScan.knowledgeType==103 || knowledgeScan.knowledgeType==107)?JSON.parse(knowledgeScan.params.knowledgeContents[0].knowledgeContent):""
        };
        console.log(knowledgeScan) ;
        /**
         * 展示渠道维度使用
         * */
        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //保存方法  根据url  获取 保存路径
        function save(){
            httpRequestPost(knowledgeScan.api,$scope.vm.knowledgeData,function(data){
                console.log(data) ;
                if(data.status == 200){
                   if($stateParams.data==''){
                            $state.go('knowledgeManagement.custOverview');
                            layer.msg("新增知识已进入审核列表", {time:2000})
                        }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                            $state.go('knowledgeManagement.custOverview');
                            layer.msg("编辑知识已进入审核列表", {time:2000})
                        }
                        else{
                            $state.go('knowledgeManagement.custOverview');
                        } 
                }else if(data.status == 10002){
                    layer.msg(" 添加知识标题重复,请返回修改 ")
                }
            },function(err){
                console.log(err)
            });
        }
    }
]);
// Source: app/static/knowledgeManagement/js/controller/list.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('knowManaListController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader",
    "knowledgeAddServer","$window","$stateParams","$interval","$filter","$animate",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,
              knowledgeAddServer,$window,$stateParams,$interval,$filter,$animate) {
        $scope.vm = {
            knowledgeId : "" ,
            knowledgeOrigin :120 ,
            frames : [],      //业务框架
            frameId : "",
            botRoot : "",      //根节点
            knowledgeBotVal : "",  //bot 内容
            botSelectAdd : botSelectAdd,
            frameCategoryId : "",
            title : "",   //标题
            titleTip :  "",
            timeStart : "",      //起始时间
            timeEnd : "",
            isTimeTable : false,  //时间表隐藏
            //生成  知识标题 打标生成 BOT
            getBotAndExtensionByTitle : getBotAndExtensionByTitle,
            //creatBot : [],

            botClassfy : [],   //类目
            creatSelectBot : [], //手选生成 bot

            //扩展问
            extensionTitle : "",
            extensionWeight :60,
            getExtension : getExtension,  //獲取擴展問
            extensions : [],      //手動生成
            extensionsByFrame : [],  //業務框架生成
            extensionByTitleTag : [] , //标题打标生成扩展问
            extensionEdit : extensionEdit,

            //展示内容
            scanContent : [],
            save : save ,   //保存
            scan :scan ,   //预览
            //高级选项
            newTitle: "",    //标题
            knowledgeContentNegative : "",
            channel : [],     //新添加的 channel
            channels : [],     //所有渠道
            channelArr : [] ,
            selectChannel : selectChannel , //獲取渠道
            dimension  : "",
            dimensions : []
            ,  //所有维度
            dimensionArr : [],  //選擇的維度
            dimensionsCopy :[]
            ,

            //高级选项内容
            slideDown : slideDown,
            slideFlag : false,

            question : 1,
            tip : 1,
            tail : 1 ,

            knowledgeTitleTag : [],

            appointRelative : "",
            appointRelativeList :[],
            // addAppoint  : addAppoint,

            appointRelativeGroup : [],
            replaceType : 0 ,
            enterEvent : enterEvent,

            dialogExtension : [],
            limitSave : false, //限制多次打标
//*******************2017/8/3  BEGIN   删除扩展问本地备份 *******************//
            rmExtensionBackup : [] ,
//*******************2017/8/3  END   删除扩展问本地备份   *******************//
            //引到页
            showTip : showTip,
            hideTip : hideTip,
            prevDiv : prevDiv,
            nextDiv : nextDiv,
            //引到页end
            isDecorateSimple : false  ,// true 单独修饰  false  整体修饰
            backupsOfExtension : "" ,//扩展问 编辑备份
            sourceTitle : "" , //备份标题 打标是验证
            backUpExt: backUpExt , // 扩展问 假删除
            extensionDeleted : []
        };

        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions","dimensionsCopy"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //、、、、、、、、、、、、、、、、、、、、、、、   通过预览 编辑 判断   、、、、、、、、、、、、、、、、、、、、、、、、、
        /*

         */
        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        if($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase ){
            var data = angular.fromJson($stateParams.data) ;
            //console.log($stateParams.data);
            //标题
            $scope.vm.title =  data.knowledgeBase.knowledgeTitle ;
            $scope.vm.sourceTitle =  data.knowledgeBase.knowledgeTitle ;
            // 标题打标结果
            $scope.vm.knowledgeTitleTag = data.knowledgeBase.knowledgeTitleTag ;
            // 时间
            if(data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd){
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart  =  $filter("date")(data.knowledgeBase.knowledgeExpDateStart,"yyyy-MM-dd") ;
            $scope.vm.timeEnd  = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd,"yyyy-MM-dd") ;
            //bot路径
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList ;
            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId ;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin ;
            //扩展问
            $scope.vm.extensionsByFrame = data.extensionQuestions;
            //内容
            angular.forEach(data.knowledgeContents,function(item){
                $scope.vm.newTitle = item.knowledgeContent;
                $scope.vm.knowledgeContentNegative = item.knowledgeContentNegative ;
                //維度，添加預覽效果   以name id 的 形式显示
                               //obj.channelIdList =  item.channelIdList ;
                //obj.dimensionIdList =  item.dimensionIdList ;
                $scope.vm.channel = item.channelIdList ;
                //console.log(item.channelIdList ,$scope.vm.channels )
                $scope.vm.dimensionArr = [] ;
                //异步原因
                var getDimension = $interval(function(){
                    if($scope.vm.dimensions){
                        //console.log(item.dimensionIdList , $scope.vm.dimensions) ;
                        $interval.cancel(getDimension);
                        angular.forEach($scope.vm.dimensions,function(val){
                            if(item.dimensionIdList.inArray(val.dimensionId)){
                                var obj = {};
                                obj.dimensionName = val.dimensionName;
                                obj.dimensionId = val.dimensionId;
                                $scope.vm.dimensionArr.push(obj);
                                //console.log(obj)
                                //console.log( $scope.vm.dimensionArr )
                            }
                        });
                    }
                },100) ;
                $scope.vm.question =item.knowledgeRelatedQuestionOn ;   //显示相关问
                $scope.vm.tip  =  item.knowledgeBeRelatedOn ; //在提示
                $scope.vm.tail = item.knowledgeCommonOn ;   //弹出评价小尾巴
                $scope.vm.appointRelativeGroup = item.knowledgeRelevantContentList!=null?item.knowledgeRelevantContentList : [];  //业务扩展问
                //console.log(obj)
            });
            //
        }

        if($stateParams.knowledgeTitle){
            console.log("======"+$stateParams.knowledgeTitle);
            $scope.vm.title=$stateParams.knowledgeTitle;
        }

        //、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
// 通过类目id 获取框架
        function getFrame(id){
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId":10012,
                "index": 0,
                "pageSize":999999
            },function(data){
                console.log(data);
                if(data.status!=10005){
                    if(data.data.length){
                        $scope.vm.frames = $scope.vm.frames.concat(data.data) ;
                        $scope.$apply();
                    }
                }
            },function(){
                // layer.msg("err or err")
            });
        }
        $scope.$watch("vm.frameCategoryId",function(val,old){
            if(val&&val!=old){
                getFrame( val )
            }
        });
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId",function(val,old){
            if(val&&val!=old){
                //if($scope.vm.extensionsByFrame.length){
                //    //  替換條件gruntwatch
                //    replace(val);
                //}else{
                    // 在未生成扩展问情況
                    getExtensionByFrame(val);
                //}
            }
        });
        // 通过frame 获取扩展问
        function getExtensionByFrame(id,type){
            console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameTypeId": 10012,
                "frameId": id,
                "index": 0,
                "pageSize":999999
            },function(data){
                if(data.status==10000){
                    //var  extensionQuestionList = [] ,
                    //     frameQuestionTagList = [];
                    var obj = {} ;
                    if(data.data[0].elements){
                        angular.forEach(data.data[0].elements,function(item,index){
                            var  extensionQuestionList = [] ,
                                frameQuestionTagList = [];
                                obj={
                                    "extensionQuestionType": 60 ,  //61
                                    "extensionQuestionTitle": data.data[0].frameTitle
                                } ;
                                extensionQuestionList.push((item.elementContent.substring(0,item.elementContent.indexOf('#'))));
                                frameQuestionTagList.push(item.elementContent.substring(item.elementContent.indexOf('#')+1).split('；'));
                               checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                        });
                        //checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                    }
                    $scope.$apply();
                }
            });
        }
        // 获取Bot全路径
        function getBotFullPath(id){
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                categoryId: id
            },function(data){
                if(data.status = 10000){
                    //添加校验是否添加校验
                    console.log(data) ;
                    var allBot = angular.copy($scope.vm.creatSelectBot.concat($scope.vm.botClassfy)) ,
                        botResult = $scope.master.isBotRepeat(id,data.categoryFullName.split("/"),"",allBot) ;
                    console.log(botResult) ;
                    $scope.$apply(function(){
                        $scope.vm.knowledgeBotVal = data.categoryFullName;
                        if(botResult != false){
                            //$scope.vm.knowledgeBotVal = data.categoryFullName.split("/");
                            $scope.vm.botFullPath= botResult;
                        }
                    });
                }
            }
        )}
        //生成扩展问校验
        function checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,oldWord){
            //var title = oldWord.extensionQuestionTitle ;
            var title = extensionQuestionList[0] ;
            var weight = oldWord.extensionQuestionType ;
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                $scope.vm.extensionsByFrame.push(isLocalHasExt);
                return ;
            }
            httpRequestPost("/api/ms/listKnowledge/checkFrameTag",{
                "applicationId": APPLICATION_ID,
                "extensionQuestionList" : extensionQuestionList,
                "frameQuestionTagList" : frameQuestionTagList
            },function(data){
                if(data.status==200){
                    $scope.$apply(function(){
                        var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                        var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                        if(result != true){
                            $scope.vm.extensionTitle = "";
                            $scope.vm.extensionsByFrame.push(result);
                        }
                    }) ;
                }
            });
        }
        //手动添加扩展问
        function getExtension(title,weight,source){
            //source  0 默认  1 标题
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                if(!source){
                    $scope.vm.extensions.push(isLocalHasExt);
                }else{
                    $scope.vm.extensionByTitleTag = new Array(isLocalHasExt)
                }
                return ;
            }
            var question = new Array(title);
            var obj = {
                "extensionQuestionTitle" : $scope.vm.extensionTitle,
                "extensionQuestionType" : $scope.vm.extensionWeight
            } ;
            if(!title){
                layer.msg("扩展问不能为空")
            }else if(!checkExtensionByTitle(obj)){
                layer.msg("生成扩展问重复,已阻止添加");
                return false
            } else {
                httpRequestPost("/api/ms/listKnowledge/checkExtensionQuestion", {
                    "applicationId": APPLICATION_ID,
                    "extendQuestionList": question
                }, function (data) {
                    if (data.status == 500) {
                        layer.msg(data.data);
                    } else if(data.status == 10026 ){
                         layer.msg("扩展问添加重复，请重新添加");
                    }else if (data.status == 200) {
                        $scope.$apply(function(){
                            var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                            var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                            if(result != true){
                                $scope.vm.extensionTitle = "";
                                if(!source){
                                    $scope.vm.extensions.push(result);
                                }else{
                                    $scope.vm.extensionByTitleTag = new Array(result)
                                }
                            }
                        })
                    }
                }, function () {

                });
            }
        }
////////////////////////////////////// ///          Bot     /////////////////////////////////////////////////////
        $scope.master.botTreeOperate($scope,"/api/ms/modeling/category/listbycategorypid","/api/ms/modeling/category/listbycategorypid",getBotFullPath
            //"/api/ms/modeling/category/searchbycategoryname"
        ) ;
        //BOT搜索自动补全
        $scope.master.searchBotAutoTag(".botTagAuto","/api/ms/modeling/category/searchbycategoryname",function(suggestion){
            $scope.$apply(function(){
                var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
                    botResult = $scope.master.isBotRepeat(suggestion.data,suggestion.value.split("/"),suggestion.type,allBot) ;
                $scope.vm.knowledgeBotVal = suggestion.value;
                if(botResult != false){
                    $scope.vm.botFullPath= botResult;
                }
            })
        });

        //点击bot分类的 加号
        function botSelectAdd(){
            if($scope.vm.botFullPath){
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = "";
                $scope.vm.knowledgeBotVal = "";
            }
        };
////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
//        function replace(id){
//                var replace = ngDialog.openConfirm({
//                    template:"/static/knowledgeManagement/faq/replace.html",
//                    scope: $scope,
//                    closeByDocument:false,
//                    closeByEscape: true,
//                    showClose : true,
//                    backdrop : 'static',
//                    preCloseCallback:function(e){     //关闭回掉
//                        if(e === 1){    //替换
//                            getExtensionByFrame( id ,1 )
//                        }else if(e === 0){
//                            // 添加不替换
//                            getExtensionByFrame( id ,0 )
//                        }
//                    }
//                });
//        }
        function extensionEdit(type,item,index){
            //type  1 框架生成  0 手动添加
            $scope.vm.backupsOfExtension = angular.copy(item) ;
            console.log($scope.vm.backupsOfExtension) ;
            var dia = angular.element(".ngdialog ");
            if(dia.length==0){
                var extensionEdit = ngDialog.openConfirm({
                    template:"/static/knowledgeManagement/public-html/extension_edit.html",
                    width:"500px",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){     //关闭回掉
                        if(e === 1){
                            if(type == 1){
                                $scope.vm.extensionsByFrame[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 0){
                                $scope.vm.extensions[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 2){
                                $scope.vm.extensionByTitleTag[index] = $scope.vm.backupsOfExtension ;
                            }
                        }else{$scope.vm.backupsOfExtension = ""; }
                    }
                });
            }
        }
        function slideDown(){
            $scope.vm.slideFlag = ! $scope.vm.slideFlag;
            $(".senior_div").slideToggle();
            if($scope.vm.slideFlag){
                $(".senior_div").css('overflow','visible');
            }

        }
        //根據 標題 生成 bot 跟 扩展问
        function getBotAndExtensionByTitle(){
            getExtension($scope.vm.title,"60",1) ; //生成扩展问
            if($scope.vm.title && $scope.vm.sourceTitle!=$scope.vm.title){
                httpRequestPost("/api/ms/listKnowledge/checkKnowledgeTitleAndGetAutoClassify",{
                    "title" :  $scope.vm.title,
                    "applicationId" : APPLICATION_ID,
                    "knowledgeId" : $scope.vm.knowledgeId
                },function(data){
                    console.log(data);
                    if(data.status == 500){    //标题打标失败
                        $scope.vm.titleTip = "知识标题重复";
                        $scope.$apply();
                    }else if(data.status == 200){
                        $scope.$apply(function(){
                            //標題打标结果
                            $scope.vm.knowledgeTitleTag = data.data.knowledgeTitleTagList ;
                            $scope.vm.botClassfy = [];   //reset 标题生成bot
                            //添加校验是否添加校验  获取所有bot 验证是否重复
                            var allBot = angular.copy($scope.vm.creatSelectBot) ;
                            //生成bot
                            angular.forEach(data.data.classifyList, function (item) {
                                var botResult = $scope.master.isBotRepeat(item.id,item.fullPath,item.type,allBot) ;
                                if(botResult != false){
                                    $scope.vm.botClassfy.push(botResult);
                                }
                                $scope.vm.frameCategoryId = item.id;
                            });
                        });
                    }
                });
            }else if($scope.vm.sourceTitle==$scope.vm.title) {
                getExtension($scope.vm.title,"60",1) ; //生成扩展问
            }else{
                $scope.vm.titleTip = "知识标题不能为空"
            }
        }
        //  主页保存 获取参数
        function getParams(){
           var params =  {
                "applicationId": APPLICATION_ID,
                "userId" : USER_ID ,
                "sceneId" : SCENE_ID ,
                "knowledgeType": 102,
                "knowledgeTitle": $scope.vm.title,      //知识标题
                "knowledgeExpDateStart" : $scope.vm.isTimeTable?$scope.vm.timeStart:"",  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable?$scope.vm.timeEnd:"",     //结束时间
                "knowledgeTitleTag" : $scope.vm.knowledgeTitleTag,    //标题打标生成的name
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME , //操作人
                "knowledgeOrigin" : $scope.vm.knowledgeOrigin
           };
            var obj = {};
            obj.knowledgeContent = $scope.vm.newTitle;
            obj.knowledgeContentNegative = $scope.vm.knowledgeContentNegative;
            obj.channelIdList =  $scope.vm.channel;
            if(!$scope.vm.dimensionArr.id.length){
                $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
            };
            obj.dimensionIdList =  $scope.vm.dimensionArr.id.length?$scope.vm.dimensionArr.id:$scope.vm.dimensionsCopy.id;
            obj.knowledgeRelatedQuestionOn = $scope.vm.question;    //显示相关问
            obj.knowledgeBeRelatedOn  =  $scope.vm.tip ; //在提示
            obj.knowledgeCommonOn = $scope.vm.tail ;   //弹出评价小尾巴
            obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup;  //业务扩展问
            $scope.vm.scanContent = [] ;
            $scope.vm.scanContent.push(obj);
            params.knowledgeContents =  $scope.vm.scanContent;
            params.extensionQuestions =  $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
            params.classificationAndKnowledgeList = $scope.vm.botClassfy.concat($scope.vm.creatSelectBot);
            return params
        }
        //限制一个知识多次保存
        var limitTimer ;
        function save() {
                if (!checkSave()) {
                    return false
                } else {
                    if(!$scope.vm.limitSave){
                        $timeout.cancel(limitTimer) ;
                        $scope.vm.limitSave = true ;
                        limitTimer = $timeout(function(){
                            $scope.vm.limitSave = false ;
                        },180000) ;
                            var params = getParams();
                            var api;
                            if ($scope.vm.knowledgeId) {
                                //编辑
                                api = "/api/ms/listKnowledge/editKnowledge";
                                params.knowledgeId = $scope.vm.knowledgeId;
                            } else {
                                //新增
                                api = "/api/ms/listKnowledge/addListKnowledge"
                            }
                            httpRequestPost(api, params, function (data) {
                                //console.log(getParams());
                                if (data.status == 200) {
                                  if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                                } else if (data.status == 500) {
                                    layer.msg("知识保存失败") ;
                                    $timeout.cancel(limitTimer) ;
                                    $scope.$apply(function(){
                                        $scope.vm.limitSave = false ;
                                    });
                                }
                            }, function (err) {
                                $timeout.cancel(limitTimer) ;
                                $scope.$apply(function(){
                                    $scope.vm.limitSave = false ;
                                });
                            });
                        }
            }
        }
        function scan(){
            if(!checkSave()){
                return false
            }else{
                var obj = {};
                var params = getParams();
                //console.log(params);

                obj.params = params;
                obj.knowledgeType = 102 ;
                obj.knowledgeId = $scope.vm.knowledgeId ;
                if($scope.vm.knowledgeId){
                    //编辑
                    obj.api = "/api/ms/listKnowledge/editKnowledge" ;
                    params.knowledgeId = $scope.vm.knowledgeId ;
                }else{
                    //新增
                    obj.api = "/api/ms/listKnowledge/addListKnowledge" ;
                }
                obj.editUrl = "knowledgeManagement.listAdd";
                $window.knowledgeScan = obj;
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url,'_blank');
            }
        };

        /* *********************              高级选项           **************************/ //
        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channel.inArray(channelId)){
                $scope.vm.channel.remove(channelId);
            }else{
                $scope.vm.channel.push(channelId);
            }
        }

        // 检验标题是否符合
        function checkTitle(title,type){
            if(!title){
                layer.msg("标题不能为空");
                return false
            }else{
                httpRequestPost("/api/ms/listKnowledge/checkDistribute",{
                    "title" : title
                },function(data){
                    console.log(data);
                    return true;
                },function(err){
                    layer.msg("打标失败，请重新打标");
                    return false
                });
            }
        }

//********************************  2017/9/5 扩展问删除备份  BEGIN ***********************************************
        // 假删除本地备份
        function backUpExt(item){
            if(!$scope.vm.extensionDeleted.inArray(item)){
                $scope.vm.extensionDeleted.push(item)
            }
        }
        function addLocalExtension(title){
            var result = false ;
            if($scope.vm.extensionDeleted){
                angular.forEach($scope.vm.extensionDeleted,function(item,index){
                    if(title == item.extensionQuestionTitle){
                        result = item ;
                        $scope.vm.extensionDeleted.splice(index,1)
                    }
                })
            }
            return result ;
        }
//********************************  2017/9/5 扩展问删除备份  EDN ***********************************************
        //检验扩展问是否重复
        function checkExtensionByTitle(item){
            var result ;
            //所有标题以及手动打标生成的扩展问
            var arr = $scope.vm.extensionByTitleTag.concat($scope.vm.extensions);
            if(!arr.length){
                result = true ;
            }else{
                var len = arr.length;
                angular.forEach(arr,function(val){
                    if(val.extensionQuestionTitle == item.extensionQuestionTitle && val.extensionQuestionType == item.extensionQuestionType){
                        len-=1 ;
                        //console.log(val.extensionQuestionTitle == item.extensionQuestionTitle);
                        result = false ;
                    }
                    if(len==arr.length){
                        result = true ;
                    }
                })
            }
            return  result ;
        }
//        提交 检验参数
        function checkSave(){
            var params = getParams();
            if(!params.knowledgeTitle){
                layer.msg("知识标题不能为空，请填写");
                return false;
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("知识类目不能为空，请选择分类");
                return false ;
            }else if(!$scope.$parent.master.isTitleHasTag($scope.vm.title,$scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag))){
                layer.msg("知识意图未打标");
                return false ;
            } else if(!params.knowledgeContents[0].knowledgeContent || !params.knowledgeContents[0].knowledgeContentNegative){
                layer.msg("知识内容信息不完整，请增填写完整");
                return false ;
            }else if(!params.knowledgeContents[0].channelIdList.length){
                layer.msg("渠道不能为空") ;
                return false ;
            }else{
                return true ;
            }
        }
        // 添加时候 存储对象
        function saveScan(){

        }
//*************************************************************************
        $timeout(function(){
            $scope.master.searchAppointAutoTag($scope,".appoint","/api/ms/knowledgeManage/getKnowledgeTitle","appointRelativeList",function(suggestion){
                console.log(suggestion) ;
                //$scope.$apply(function(){
                //    if($scope.vm.appointRelativeGroup.indexOf(suggestion)==-1){
                //        $scope.vm.appointRelativeGroup.push(suggestion)
                //    }else{
                //        layer.msg("重复添加相关问")
                //    }
                //    $scope.vm.appointRelative = "";  //清楚title
                //})
            }).listener()
        },2000) ;
        // function addAppoint(item,arr){
        //     if(arr.indexOf(item)==-1){
        //         arr.push(item)
        //     }
        //     $scope.vm.appointRelative = "";  //清楚title
        //     $scope.vm.appointRelativeList = [];  //清除 列表
        //
        // }
        // // 動態加載 title
        // $scope.$watch("vm.appointRelative",function(title){
        //     //console.log(title);
        //     if(title){
        //         $timeout(getAppointRelative(title))
        //     }
        // });
        //
        // function getAppointRelative(title){
        //     httpRequestPost("/api/ms/knowledgeManage/getKnowledgeTitle",{
        //         "title" : title,
        //         "applicationId" : APPLICATION_ID
        //     },function(data){
        //         if(data.status == 200){
        //             $scope.vm.appointRelativeList = data.data;
        //             $scope.$apply();
        //         }else{
        //         }
        //         console.log(data);
        //     },function(err){
        //
        //     });
        // }
        //引导页方法
        function showTip(){
            $('.shadow_div').show();
            $('.step_div').show();
            $('#step_one').show().siblings().hide();
        }
        function hideTip(){
            $('.shadow_div').hide();
            $('.step_div').hide();
        }

        //上一个
        function prevDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().prev()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().prev().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().prev().offset().top-20
                }, 500);
            }else{
                // $(obj).attr('disabled',true);
                return;
            }
        }
        //下一个
        function nextDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().next()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().next().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().next().offset().top-20
                }, 500);
            }else{
                //$(obj).attr('disabled',true);
                return;
            }
        }
        //引导页方法end

    }
]);
// Source: app/static/knowledgeManagement/js/controller/main.controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('knowledgeManagementModule').controller('knowledgeManagementController', [
    '$scope', 'localStorageService' ,"$state" ,function ($scope,localStorageService, $state) {
        $scope.vm = {
            userName: '',
            password: ''
        };

    }
]);
// Source: app/static/knowledgeManagement/js/controller/markConcept.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('newConceptController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","knowledgeAddServer","$window","$interval","$stateParams","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,knowledgeAddServer,$window,$interval,$stateParams,$filter) {
        $scope.vm = {
            knowledgeId: "",
            knowledgeOrigin : 120 ,
            frames: [],      //业务框架
            frameId: "",
            knowledgeAdd : knowledgeAdd ,
            knowledgeClassifyCall: knowledgeClassifyCall, //知识分类的回调方法
            openContentConfirm: openContentConfirm, //打开内容对话框
            botRoot : "",      //根节点
            knowledgeBot:knowledgeBot,  //bot点击事件
            knowledgeBotVal : "",  //bot 内容
            botSelectAdd : botSelectAdd,
            frameCategoryId : "",
            title : "",   //标题
            titleTip :  "",
            timeStart : "",      //起始时间
            timeEnd : "",
            isTimeTable : false,  //时间表隐藏
            //生成  知识标题 打标生成 BOT
            getBotAndExtensionByTitle : getBotAndExtensionByTitle,
            //creatBot : [],
            botClassfy : [],   //类目
            creatSelectBot : [], //手选生成 bot

            //扩展问
            extensionTitle : "",
            extensionWeight :60,
            getExtension : getExtension,  //獲取擴展問
            extensions : [],      //手動生成
            extensionsByFrame : [],  //業務框架生成
            extensionByTitleTag : [] , //标题打标生成扩展问
            extensionEdit : extensionEdit,

            //展示内容
            scanContent : [],
            save : save ,   //保存
            scan :scan ,   //预览
            //弹框相关
            newTitle: "",    //标题
            channel : [],     //新添加的 channel
            channels : [],     //所有渠道
            channelArr : [] ,
            selectChannel : selectChannel , //獲取渠道
            dimension  : "",
            dimensions : []
            ,  //所有维度
            dimensionArr : [],  //選擇的維度
            dimensionsCopy :[]
            ,

            checkChannelDimension : checkChannelDimension ,
            //高级选项内容
            slideDown : slideDown,
            slideFlag : false,

            question : 1,
            tip : 1,
            tail : 1 ,

            knowledgeTitleTag : [],

            appointRelative : "",
            appointRelativeList :[],
            addAppoint  : addAppoint,
            //vm.appointRelativeGroup.push(item)
            appointRelativeGroup : [],
            replaceType : 0 ,
            enterEvent : enterEvent,

            factor : 62  ,  //触发要素，62知识标题 63概念扩展
            factorTitle : "" , // 触发要素 标题
            getDetailByTitle : getDetailByTitle,
            getFactorByTitle : []  ,     // 要素标题产生选项
            selelectTitle : selelectTitle ,

            extensionByContentTitle : [] ,   // 内容生成扩展问 ,
            limitSave : false ,//限制多次打标
            isEditIndex : -1,   // 知识内容 弹框
                        // -1 为内容新增
                        // index 为知识的编辑索引
            increaseCheck  : increaseCheck , //知识新增弹框保存按钮
            backupsOfExtension : "" ,//扩展问 编辑备份
            //引到页
            showTip : showTip,
            hideTip : hideTip,
            prevDiv : prevDiv,
            nextDiv : nextDiv
            //引到页end
        };
        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions","dimensionsCopy"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //、、、、、、、、、、、、、、、、、、、、、、、   通过预览 编辑 判断   、、、、、、、、、、、、、、、、、、、、、、、、、

        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        if ($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase) {
            var data = $stateParams.data;
            //console.log($stateParams.data);
            //标题
            $scope.vm.title =  data.knowledgeBase.knowledgeTitle ;
            // 标题打标结果
            $scope.vm.knowledgeTitleTag = data.knowledgeBase.knowledgeTitleTag ;
            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId ;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin ;
            // 时间
            if(data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd){
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart  =  $filter("date")(data.knowledgeBase.knowledgeExpDateStart,"yyyy-MM-dd") ;
            $scope.vm.timeEnd  = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd,"yyyy-MM-dd") ;
            //bot路径
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList ;
            //扩展问
            $scope.vm.extensionsByFrame = data.extensionQuestions;
            angular.forEach(data.extensionQuestions,function(item){
            });
            //内容
            angular.forEach(data.knowledgeContents,function(item){
                var obj = {} ;
                obj.knowledgeContent = item.knowledgeContent;
                //維度，添加預覽效果   以name id 的 形式显示
                obj.channelIdList =  item.channelIdList ;
                obj.dimensionIdList =  item.dimensionIdList ;
                obj.knowledgeRelatedQuestionOn =item.knowledgeRelatedQuestionOn ;   //显示相关问
                obj.knowledgeBeRelatedOn  =  item.knowledgeBeRelatedOn ; //在提示
                obj.knowledgeCommonOn = item.knowledgeCommonOn ;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = item.knowledgeRelevantContentList ;  //业务扩展问
                $scope.vm.scanContent.push(obj);
            });
        } else if ($stateParams.data  && angular.fromJson($stateParams.data).docmentation) {
            $scope.vm.docmentation = angular.fromJson($stateParams.data).docmentation;
            $scope.vm.title = $scope.vm.docmentation.documentationTitle;
            $scope.vm.newTitle = $scope.vm.docmentation.documentationContext; //填充新的知识内容
            $scope.vm.openContentConfirm(saveAddNew); //知识内容弹出框
        }
        if($stateParams.knowledgeTitle){
            console.log("======"+$stateParams.knowledgeTitle);
            $scope.vm.title=$stateParams.knowledgeTitle;
        }

        //、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
        // 触发要素  知识标题
        var timer ;
        if(myBrowser() == "Chrome"){
            angular.element(".factorInput").on({
                compositionend:function(value) {
                    var val = angular.element(".factorInput").val() ; //得到数值
                    $scope.vm.factorTitle = val ;
                    $timeout.cancel(timer) ;
                    timer = $timeout(function(){
                        getDetailByTitle(val);
                    },300)
                }
            }) ;
        }else{
            $scope.$watch("vm.factorTitle",function(title){
                if(title != "" && $scope.vm.factor==62 && title != $scope.vm.getFactorByTitle[0] ){
                    console.log(title) ;
                    $timeout.cancel(timer) ;
                    timer = $timeout(function(){
                        getDetailByTitle(title);
                    },300) ;
                }
            },true) ;
        }
        function selelectTitle(title){
            $scope.vm.factorTitle = title ;
            $scope.vm.getFactorByTitle = [] ;
        }

//        選擇知識标题
        function getDetailByTitle(title){
                httpRequestPost("/api/ms/marketingKnowledge/getKnowledgeTitle",{
                    "title" : title,
                    "applicationId": APPLICATION_ID,
                },function(data){
                    //console.log(title);
                    //console.log(data.data);
                    $scope.vm.getFactorByTitle = data.data;
                    if((title == data.data[0]) && (data.data.length==1)){
                        $scope.vm.getFactorByTitle = []
                    }
                    $scope.$apply() ;
                },function(){
                    // layer.msg("err or err")
                });
        }
// 通过类目id 获取框架
        function getFrame(id){
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId":10012,
                "index": 0,
                "pageSize":999999
            },function(data){
                console.log(data);
                if(data.status!=10005){
                    if(data.data.length){
                        $scope.vm.frames = $scope.vm.frames.concat(data.data) ;
                        $scope.$apply();
                    }
                }
            },function(){
            });
        }
        $scope.$watch("vm.frameCategoryId",function(val,old){
            if(val&&val!=old){
                getFrame( val )
            }
        });
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId",function(val,old){
            if(val&&val!=old){
                //if($scope.vm.extensionsByFrame.length){
                //    //  替換條件
                //    replace(val);
                //}else{
                    // 在未生成扩展问情況
                    getExtensionByFrame(val);
                //}

            }
        });

        // 通过frame 获取扩展问
        function getExtensionByFrame(id,type){
            //console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameTypeId": 10012,
                "frameId": id,
                "index": 0,
                "pageSize":999999
            },function(data){
                if(data.status==10000){
                    //console.log(data);
                    //var  extensionQuestionList = [] ,
                    //     frameQuestionTagList = [];
                    var obj = {} ;
                    if(data.data[0].elements){
                        angular.forEach(data.data[0].elements,function(item,index){
                            var  extensionQuestionList = [] ,
                                frameQuestionTagList = [];
                                obj.extensionQuestionType = 60;   //61
                                obj.extensionQuestionTitle = data.data[0].frameTitle;
                                extensionQuestionList.push((item.elementContent.substring(0,item.elementContent.indexOf('#'))));
                                frameQuestionTagList.push(item.elementContent.substring(item.elementContent.indexOf('#')+1).split('；'));
                                checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                        });
                        //checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                    }
                    $scope.$apply();
                }
            },function(){

            });
        }

        // 获取Bot全路径
        function getBotFullPath(id){
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                categoryId: id
            },function(data){
                if(data.status = 10000){
                    var len = $scope.vm.creatSelectBot.length;
                    var obj = {};
                    if(len){
                        angular.forEach($scope.vm.creatSelectBot,function(item){
                            if(item.classificationId!=id){
                                len-=1
                            }
                        });
                        if(len==0){
                            obj.className = data.categoryFullName.split("/");
                            obj.classificationId = id ;
                            obj.classificationType = 1;
                        }else{
                            layer.msg("添加分类重复");
                            return false
                        }
                    }else{
                        obj.className = data.categoryFullName.split("/");
                        obj.classificationId = id ;
                        //obj.classificationType = 1;
                    }
                    $scope.vm.knowledgeBotVal = obj.className.join("/");
                    $scope.vm.botFullPath=obj ;
                    $scope.$apply()
                }
            },function(){

            });
        }
        //生成扩展问校验
        function checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,oldWord){
            //var title = oldWord.extensionQuestionTitle ;
            var title = extensionQuestionList[0] ;
            var weight = oldWord.extensionQuestionType ;
            //console.log(oldWord);
            httpRequestPost("/api/ms/marketingKnowledge/checkFrameTag",{
                "applicationId": APPLICATION_ID,
                "extensionQuestionList" : extensionQuestionList,
                "frameQuestionTagList" : frameQuestionTagList
            },function(data){
                if(data.status==200){
                    var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                    if(isTagRepeat(data.data,allExtension,title)){

                    }else{
                        var enten = {}  ;
                        enten.extensionQuestionTitle = title;
                        enten.extensionQuestionType = weight ;
                        enten.wholeDecorateTagList = [
                            {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"36"},
                            {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"37"},
                            {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"38"}
                        ];
                        enten.extensionQuestionTagList = [] ;
                        angular.forEach(data.data,function(tagList){
                            angular.forEach(tagList.extensionQuestionTagList,function(item){
                                var tagTem = {
                                    "exist" : item.exist ,
                                    "tagClass" : item.tagClass ,
                                    "tagName" : item.tagName ,
                                    "tagType" : item.tagType
                                };
                                enten.extensionQuestionTagList.push(tagTem) ;
                            });
                        });
                        $scope.vm.extensionsByFrame.push(enten);
                        $scope.$apply();
                    }
                }
            }, function () {
                //layer.msg("err or err")
            });
        }
        //function checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,oldWord){
        //    console.log(oldWord);
        //    httpRequestPost("/api/ms/marketingKnowledge/checkFrameTag",{
        //        "applicationId": APPLICATION_ID,
        //        "extensionQuestionList" : extensionQuestionList,
        //        "frameQuestionTagList" : frameQuestionTagList
        //    },function(data){
        //        console.log(data);
        //        if(data.status==200){
        //            var enten = {}  ;
        //            enten.extensionQuestionTitle = title;
        //            enten.extensionQuestionType = weight ;
        //            var listArr = [];
        //            var listObj = {};
        //            listObj.wholeDecorateTagNameList="";
        //            listObj.wholeDecorateTagType="";
        //            listArr.push(listObj);
        //            enten.wholeDecorateTagList = listArr;
        //            enten.extensionQuestionTagList = [] ;
        //            angular.forEach(data.data,function(tagList){
        //                //var tag = [] ;
        //                angular.forEach(tagList.extensionQuestionTagList,function(item){
        //                    var tagTem = {};
        //                    tagTem.exist = item.exist ;
        //                    tagTem.tagClass= item.tagClass;
        //                    tagTem.tagName= item.tagName;
        //                    tagTem.tagTypeList= [] ;
        //                    tagTem.tagTypeList.push(item.tagType);
        //                    //tag.push(tagTem)
        //                    enten.extensionQuestionTagList.push(tagTem) ;
        //                });
        //            });
        //            $scope.vm.extensionsByFrame = exten;
        //            console.log($scope.vm.extensionsByFrame);
        //            $scope.$apply();
        //        }
        //    },function(){
        //        layer.msg("err or err")
        //    });
        //}
        /*function scanCotentByTitle(title,index){
            var answerContentList = [];
            answerContentList.push(title);
            httpRequestPost("/api/ms/marketingKnowledge/productExtensionQuestion", {
                "applicationId": APPLICATION_ID,
                "title": $scope.vm.title,
                "answerContentList": answerContentList
            }, function (data) {
                //console.log(data);
                if (data.status == 200) {
                    //console.log(data.data);
                    //console.log(index) ;
                    $scope.vm.scanContent[index].extensionByContentByTitle = data.data;
                    $scope.$apply()
                } else if (data.status == 500) {
                    layer.msg(data.info);
                }
            }, function () {
                //layer.msg("打标失败");
            });
        }*/
        //手动添加扩展问
        function getExtension(title){
            var question = new Array(title);
            var obj = {
                "extensionQuestionTitle" : title,
                "extensionQuestionType" : angular.copy($scope.vm.factor)
            } ;
            if(!title){
                layer.msg("扩展问不能为空")
            }else if(!checkExtensionByTitle(obj)){
                layer.msg("生成扩展问重复,已阻止添加");
                return false
            }else{
                httpRequestPost("/api/ms/marketingKnowledge/checkExtensionQuestion",{
                    "applicationId": APPLICATION_ID,
                    "extendQuestionList" : question
                },function(data){
                    if(data.status == 500){
                        layer.msg(data.data);
                    }else if(data.status == 10026 ){
                        layer.msg("扩展问添加重复，请重新添加") ;
                    }else if(data.status==11006){
                        layer.msg("扩展问生成失败") ;
                    }else if(data.status==200){
                        var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                        if(isTagRepeat(data.data,allExtension,title)){

                        }else{
                            $scope.vm.extensionTitle = "" ;
                            var enten = {}  ;
                            enten.extensionQuestionTitle = title;
                            enten.extensionQuestionType = weight ;
                            enten.wholeDecorateTagList = [
                                {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"36"},
                                {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"37"},
                                {"wholeDecorateTagNameList":[],"wholeDecorateTagType":"38"}
                            ];
                            enten.extensionQuestionTagList = [] ;
                            angular.forEach(data.data,function(tagList){
                                angular.forEach(tagList.extensionQuestionTagList,function(item){
                                    var tagTem = {
                                        "exist" : item.exist ,
                                        "tagClass" : item.tagClass ,
                                        "tagName" : item.tagName ,
                                        "tagType" : item.tagType
                                    };
                                    enten.extensionQuestionTagList.push(tagTem) ;
                                });
                            });
                            $scope.vm.extensions.push(enten);
                        }
                        $scope.vm.extensionTitle = "" ;
                        $scope.$apply();
                    }
                },function(){

                });
            }
        }

        //判断扩展问标签是否重复
        //data.data
        function isTagRepeat(current,allExtension,title){
            console.log(allExtension) ;
            var current = angular.copy(current) ;
            var isRepeat = false ;
            var tag = [] ;
            angular.forEach(current,function(tagList){
                angular.forEach(tagList.extensionQuestionTagList,function(item){
                    if(item.exist){   //标签存在情况下
                        tag.push(item.tagName);
                    }
                });
            });
            angular.forEach(allExtension,function(extension){
                var tagLen = 0 ;
                var itemTag = [] ;
                angular.forEach(extension.extensionQuestionTagList,function(item){
                    if(item.exist){       //存在标签
                        itemTag.push(item.tagName);
                    }
                    if(tag.inArray(item.tagName) && item.exist){   //标签重复数量
                        tagLen += 1;
                    }
                }) ;
                if(tagLen == itemTag.length && tag.length == itemTag.length){
                    layer.msg('根据"'+ title+ '"生成扩展问重复,已阻止添加') ;
                    return   isRepeat = true ;
                }
            }) ;
            return isRepeat
        }
////////////////////////////////////// ///          Bot     /////////////////////////////////////////////////////
        //{
        //    "categoryApplicationId": "360619411498860544",
        //    "categoryPid": "root"
        //}
        getBotRoot();
        //    getDimensions();
        //    getChannel();
        //点击 root 的下拉效果
        function  knowledgeBot(ev){
            //console.log(1) ;
            $timeout(function(){
                angular.element(".rootClassfy").slideToggle();
            },50)
        }
        //获取root 数据
        function getBotRoot(){
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId": APPLICATION_ID,
                "title" : $scope.vm.title ,
                "categoryPid": "root"
            },function(data){
                //console.log(data);
                $scope.vm.botRoot = data.data;
                //console.log( APPLICATION_ID);
            },function(){

            });
        }
        //点击更改bot value
        $(".aside-navs").on("click","span",function(){
            //类型节点
            var pre = $(this).prev() ;
            //if(pre.hasClass("bot-edge")){
            //    layer.msg("请可用选择节点") ;
            //    return ;
            //}else{
                angular.element(".icon-jj").css("backgroundPosition","0% 0%");
                var id = pre.attr("data-option");
                getBotFullPath(id);    //添加bot分類
                angular.element(".rootClassfy,.menus").slideToggle();
                $scope.$apply();
            //}
        });
        //点击bot分类的 加号
        function botSelectAdd(){
            if($scope.vm.botFullPath){
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                console.log($scope.vm.botFullPath) ;
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = null;
                $scope.vm.knowledgeBotVal = "";
            }
        }
        //点击下一级 bot 下拉数据填充以及下拉效果
        $(".aside-navs").on("click",'i',function(){
            var id = $(this).attr("data-option");
            var that = $(this);
            if(!that.parent().parent().siblings().length){
                that.css("backgroundPosition","0% 100%");
                httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId":APPLICATION_ID,
                    "categoryPid": id
                },function(data){
                    console.log(data) ;
                    if(data.data){
                        var  html = '<ul class="menus">';
                        for(var i=0;i<data.data.length;i++){
                            var typeClass ;
                            // 叶子节点 node
                            if((data.data[i].categoryLeaf == 0)){
                                typeClass = "bot-leaf"　;
                            }else if((data.data[i].categoryLeaf != 0) && (data.data[i].categoryAttributeName == "edge" )){
                                typeClass = "bot-edge"　;
                            }else if((data.data[i].categoryLeaf != 0) && (data.data[i].categoryAttributeName == "node" )){
                                typeClass = "icon-jj"
                            }
                            var  backImage ;
                            switch(data.data[i].categoryTypeId){
                                case 160 :
                                    backImage = " bot-divide" ;
                                    break  ;
                                case 161 :
                                    backImage = " bot-process";
                                    break  ;
                                case 162 :
                                    backImage = " bot-attr" ;
                                    break  ;
                                case 163 :
                                    backImage = " bot-default" ;
                                    break  ;
                            }
                            html+= '<li>' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;">' ;

                            html+=            '<i class="'+typeClass + backImage +'" data-option="'+data.data[i].categoryId+'"></i>' ;

                            html+=             '<span>'+data.data[i].categoryName+'</span>'+
                                '</a>' +
                                '</div>' +
                                '</li>'
                        }
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent().parent()));
                        that.parent().parent().next().slideDown()
                    }
                },function(err){
                    //layer.msg(err)
                });
            }else{
                if(that.css("backgroundPosition")=="0% 0%"){
                    that.css("backgroundPosition","0% 100%");
                    that.parent().parent().next().slideDown()
                }else{
                    that.css("backgroundPosition","0% 0%");
                    that.parent().parent().next().slideUp()
                }
            }
        });

////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
//        function replace(id){
//                var replace = ngDialog.openConfirm({
//                    template:"/static/knowledgeManagement/faq/replace.html",
//                    scope: $scope,
//                    closeByDocument:false,
//                    closeByEscape: true,
//                    showClose : true,
//                    backdrop : 'static',
//                    preCloseCallback:function(e){     //关闭回掉
//                        if(e === 1){    //替换
//                            getExtensionByFrame( id ,1 )
//                        }else if(e === 0){
//                            // 添加不替换
//                            getExtensionByFrame( id ,0 )
//                        }
//                    }
//                });
//        }
        // 知识文档分类回调
        function knowledgeClassifyCall() {
            httpRequestPost("/api/ms/knowledgeDocumentation/documentationKnowledgeClassify",
                {
                    knowledgeId: $scope.vm.docmentation.knowledgeId,
                    knowledgeStatus: 4
                },
                function (data) {
                    if (data && data.status == 200) {
                        $state.go("back.doc_results_view",
                            {
                                knowDocId: $scope.vm.docmentation.documentationId,
                                knowDocCreateTime: $scope.vm.docmentation.knowDocCreateTime,
                                knowDocUserName: $scope.vm.docmentation.knowDocUserName
                            }
                        );
                    }
                }
            );
        }
        //打开知识内容对话框
        function openContentConfirm(callback) {
            var dialog = ngDialog.openConfirm({
                width : "521px" ,
                template: "/static/knowledgeManagement/public-html/knowledge_increase.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        callback();
                    } else {
                        setDialog();//清空内容对话框
                    }
                }
            });
        }

        function knowledgeAdd(data,index){
            if(!$scope.vm.title){
                layer.msg("请先输入营销知识标题") ;
                return false ;
            }else {
                var dia = angular.element(".ngdialog ");
                if (data) {    //增加
                    $scope.vm.isEditIndex = index ;
                    $scope.vm.newTitle = data.knowledgeContent;
                    $scope.vm.channel = data.channelIdList;
                    //$scope.vm.dimensionArr.id = data.dimensionIdList;
                    angular.forEach($scope.vm.dimensions, function (item) {
                        if (data.dimensionIdList.inArray(item.dimensionId)) {
                            var obj = {
                                "dimensionId" : item.dimensionId ,
                                "dimensionName" : item.dimensionName
                            };
                            $scope.vm.dimensionArr.push(obj);
                        }
                    });
                    $scope.vm.tip = data.knowledgeBeRelatedOn; //在提示
                    $scope.vm.question = data.knowledgeRelatedQuestionOn;
                    $scope.vm.tail = data.knowledgeCommonOn;
                    $scope.vm.appointRelativeGroup = data.knowledgeRelevantContentList == null ? [] : data.knowledgeRelevantContentList;
                    var callback = function () {
                        var obj = {};
                        obj.knowledgeContent = $scope.vm.newTitle;
                        obj.knowledgeContentType = 0,  // 答案类型
                        obj.channelIdList = $scope.vm.channel;
                        obj.dimensionIdList = $scope.vm.dimensionArr.id;
                        obj.knowledgeRelatedQuestionOn = $scope.vm.question,    //显示相关问
                        obj.knowledgeBeRelatedOn = $scope.vm.tip; //在提示
                        obj.knowledgeCommonOn = $scope.vm.tail;   //弹出评价小尾巴
                        obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup  //业务扩展问
                        $scope.vm.scanContent[index] = obj;
                        $scope.vm.isEditIndex = -1  ;
                        setDialog();
                    }
                } else {
                    var callback = saveAddNew;
                }
                if (dia.length == 0) {
                    var dialog = ngDialog.openConfirm({
                        width : "521px" ,
                        template: "/static/knowledgeManagement/public-html/knowledge_increase.html",
                        scope: $scope,
                        closeByDocument: false,
                        closeByEscape: true,
                        showClose: true,
                        backdrop: 'static',
                        preCloseCallback: function (e) {    //关闭回掉
                            if (e === 1) {
                                callback()
                            } else {
                                $scope.vm.isEditIndex = -1  ;
                                setDialog()
                            }
                        }
                    });
                }
            }
        }


        function extensionEdit(type,item,index){
            //type  1 框架生成  0 手动添加
            $scope.vm.backupsOfExtension = angular.copy(item) ;
            console.log($scope.vm.backupsOfExtension) ;
            var dia = angular.element(".ngdialog ");
            if(dia.length==0){
                var extensionEdit = ngDialog.openConfirm({
                    template:"/static/knowledgeManagement/public-html/extension_edit.html",
                    width:"500px",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){     //关闭回掉
                        if(e === 1){
                            if(type == 1){
                                $scope.vm.extensionsByFrame[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 0){
                                $scope.vm.extensions[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 2){
                                $scope.vm.extensionByTitleTag[index] = $scope.vm.backupsOfExtension ;
                            }
                        }else{$scope.vm.backupsOfExtension = ""; }
                    }
                });
            }
        }

        function slideDown(){
            $scope.vm.slideFlag = ! $scope.vm.slideFlag;
            $(".senior_div").slideToggle();
        }
        //根據 標題 生成 bot
        function getBotAndExtensionByTitle(){
            if($scope.vm.title){
                httpRequestPost("/api/ms/marketingKnowledge/checkKnowledgeTitleAndGetAutoClassify",{
                    "title" :  $scope.vm.title,
                    "applicationId" :  APPLICATION_ID
                },function(data){
                    //console.log(data);
                    if(data.status == 500){    //标题打标失败
                        $scope.vm.titleTip = "知识标题重复";
                        $scope.$apply()
                    }else if(data.status == 200) {
                        $scope.$apply(function(){
                            $scope.vm.knowledgeTitleTag = data.data.knowledgeTitleTagList ;
                            $scope.vm.botClassfy = [];   //防止 多次打标,添加类目
                            //生成bot
                            angular.forEach(data.data.classifyList, function (item) {
                                var obj = {
                                    "className" : item.fullPath ,
                                    "classificationId" : item.id ,
                                    "classificationType" : item.type
                                };
                                $scope.vm.botClassfy.push(obj);
                                $scope.vm.frameCategoryId = item.id;
                            });
                        });
                    }
                });
            }else{
                $scope.vm.titleTip = "知识标题不能为空"
            }
        }
        //  主页保存 获取参数
        function getParams(){
            var params = {};
            params =  {
                "applicationId": APPLICATION_ID,
                "userId" : USER_ID ,
                "sceneId" : SCENE_ID ,
                "knowledgeTitle": $scope.vm.title,      //知识标题
                "knowledgeExpDateStart" : $scope.vm.isTimeTable?$scope.vm.timeStart:null,  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable?$scope.vm.timeEnd:null,     //结束时间
                "knowledgeTitleTag" : $scope.vm.knowledgeTitleTag,    //标题打标生成的name
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME , //操作人
                "knowledgeOrigin" : $scope.vm.knowledgeOrigin
            };
            params.knowledgeContents =  $scope.vm.scanContent;
            params.extensionQuestions =  $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
            params.classificationAndKnowledgeList = $scope.vm.botClassfy.concat($scope.vm.creatSelectBot);
            return params
        } ;
        //限制一个知识多次保存
        var limitTimer ;
        function save(){
                if(!checkSave()){
                    return false
                }else{
                    if(!$scope.vm.limitSave){
                        $timeout.cancel(limitTimer) ;
                        $scope.vm.limitSave = true ;
                        limitTimer = $timeout(function(){
                            $scope.vm.limitSave = false ;
                        },180000) ;
                        var params = getParams() ;
                        var api ;
                        if($scope.vm.knowledgeId){
                            //编辑
                            api = "/api/ms/marketingKnowledge/editKnowledge" ;
                            params.knowledgeId = $scope.vm.knowledgeId ;
                        }else{
                            //新增
                            api = "/api/ms/marketingKnowledge/addMarketingKnowledge"
                        }
                        httpRequestPost(api,params,function(data){
                            if (data.status == 200) {
                                if ($scope.vm.docmentation) {
                                    $scope.vm.knowledgeClassifyCall();
                                }
                                else{
                                    if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                                }
                            } else if (data.status == 500) {
                                layer.msg("知识保存失败") ;
                                $timeout.cancel(limitTimer) ;
                                $scope.$apply(function(){
                                    $scope.vm.limitSave = false ;
                                });
                            }
                        },function(err){
                            $timeout.cancel(limitTimer) ;
                            $scope.$apply(function(){
                                $scope.vm.limitSave = false ;
                            });
                        });
                    }
                }
        }
        function scan(){
            if(!checkSave()){
                return false
            }else{
                var obj = {};
                var params = getParams();
                //console.log(params);
                obj.params = params;
                obj.editUrl = "knowledgeManagement.ConceptAdd";
                if($scope.vm.knowledgeId){
                    //编辑
                    obj.api = "marketingKnowledge/editMarketingKnowledge" ;
                    params.knowledgeId = $scope.vm.knowledgeId ;
                }else{
                    //新增
                    obj.api = "/api/ms/marketingKnowledge/addMarketingKnowledge"
                }
                obj.params = params;
                obj.knowledgeType = 104 ;
                $window.knowledgeScan = obj;
                //    var url = $state.href('knowledgeManagement.knowledgeScan',{knowledgeScan: 111});
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url,'_blank');
            }
        };

        /* *********************              弹框相关           **************************/ //
//重置参数
        function setDialog(){
            $scope.vm.newTitle = "";
            $scope.vm.channel = [];
            $scope.vm.dimension = [];
            $scope.vm.question = 1;    //显示相关问
            $scope.vm.tip = 1;   //在提示
            $scope.vm.tail =1;    //弹出评价小尾巴
            $scope.vm.appointRelativeGroup = [] ;//业务扩展问
            $scope.vm.appointRelative = "";
            $scope.vm.dimensionsCopy = angular.copy($scope.vm.dimensions);
            $scope.vm.dimensionArr = [];
        }

        function saveAddNew(){
            if($scope.vm.newTitle){
                var title = angular.copy($scope.vm.newTitle);
                var index = $scope.vm.scanContent.length ;
                //scanCotentByTitle(title,index) ;
                var obj = {};
                obj.knowledgeContent = $scope.vm.newTitle;
                //obj.knowledgeContentType = 0,  // 答案类型
                obj.channelIdList =  $scope.vm.channel;
                obj.dimensionIdList =  $scope.vm.dimensionArr.id.length?$scope.vm.dimensionArr.id:$scope.vm.dimensionsCopy.id;
                obj.knowledgeRelatedQuestionOn = $scope.vm.question;  //显示相关问
                obj.knowledgeBeRelatedOn  =  $scope.vm.tip ; //在提示
                obj.knowledgeCommonOn = $scope.vm.tail ;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup;  //业务扩展问
                // 生成扩展问题+
                //高級 選項
                $scope.vm.scanContent.push(obj);
                setDialog()
            }else{
                setDialog()
            }
        }
        // 检验标题是否符合
        function checkTitle(title,type){
            if(!title){
                layer.msg("标题不能为空");
                return false ;
            }else{
                httpRequestPost("/api/ms/marketingKnowledge/checkDistribute",{
                    "title" : title
                },function(data){
                    //console.log(data);
                    return true;
                },function(err){

                    return false;
                });
            }
        }
        //检验扩展问是否重复
        function checkExtensionByTitle(item){
            var result ;
            //所有标题以及手动打标生成的扩展问
            var arr = $scope.vm.extensionByTitleTag.concat($scope.vm.extensions);
            if(!arr.length){
                result = true ;
            }else{
                var len = arr.length;
                angular.forEach(arr,function(val){
                    if(val.extensionQuestionTitle == item.extensionQuestionTitle && val.extensionQuestionType == item.extensionQuestionType){
                        len-=1 ;
                        //console.log(val.extensionQuestionTitle == item.extensionQuestionTitle);
                        result = false ;
                    }
                    if(len==arr.length){
                        result = true ;
                    }
                })
            }
            return  result ;
        }
//        提交 检验参数
        function checkSave(){
            //return true;
            var params = getParams();
            if(!params.knowledgeTitle){
                layer.msg("知识标题不能为空，请填写");
                return false
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("知识类目不能为空，请选择分类");
                return false
            }else if(!$scope.$parent.master.isTitleHasTag($scope.vm.title,$scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag))){
                layer.msg("知识意图未打标");
                return false ;
            }
            else if(!params.knowledgeContents.length){
                layer.msg("知识内容不能为空，请点击新增填写");
                return false
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("分类知识Bot不能为空") ;
                return false
            }else{
                return true
            }
        }
//***************************    save check channel dimension  **********************************************
//        知识内容添加校验
        function increaseCheck(){
            //判斷维度是否为空 0 不变 1 全维度
            if(!$scope.vm.dimensionArr.id.length){
                $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
            };
            if(!$scope.vm.newTitle && !$scope.vm.channel.length){
                layer.msg("请填写知识内容,并选择渠道后保存")
            }else if(!$scope.vm.newTitle){
                layer.msg("请填写知识内容后保存")
            }else if(!$scope.vm.channel.length){
                layer.msg("请选择渠道后保存")
            }else if(checkChannelDimension($scope.vm.channel,$scope.vm.dimensionArr.id)){
                //存在重复条件
            }else{
                ngDialog.closeAll(1) ;
            }
        }
        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channel.inArray(channelId)){
                $scope.vm.channel.remove(channelId);
            }else{
                $scope.vm.channel.push(channelId);
            }
        }
        function checkChannelDimension(channel,dimension){
            var isRepeat  = false;
            //    新增的 channel = []  dimension = [] ,
            //   页面以添加 scanContent.dimensions   scanContent.channels
            angular.forEach($scope.vm.scanContent,function(item,contentIndex){
                if($scope.vm.isEditIndex != contentIndex){
                    angular.forEach(item.channelIdList,function(v){
                        angular.forEach(channel,function(val,indexChannel) {
                            if(val == v){
                                angular.forEach(item.dimensionIdList,function(value){
                                    angular.forEach(dimension,function(key,indexDimension){
                                        if(key==value){
                                            var channelTip;
                                            angular.forEach($scope.vm.channels,function(all){
                                                if(all.channelCode==v){
                                                    channelTip = all.channelName
                                                }
                                            });
                                            layer.msg("重复添加"+"渠道 "+channelTip+" 维度 "+$scope.vm.dimensionArr.name[indexDimension]);
                                            isRepeat = true
                                        }
                                    })
                                })
                            }
                        });
                    });
                }
            });
            return isRepeat
        }
//*************************************************************************

        function addAppoint(item,arr){
            if(arr.indexOf(item)==-1){
                arr.push(item);
            };
            $scope.vm.appointRelative = null;  //清楚title
            $scope.vm.appointRelativeList = [];  //清除 列表

        }
        // 動態加載 title
        $scope.$watch("vm.appointRelative",function(title){
            //console.log(title);
            if(title){
                $timeout(getAppointRelative(title),300)
            }
        });

        function getAppointRelative(title){
            httpRequestPost("/api/ms/marketingKnowledge/getKnowledgeTitle",{
                "title" : title
            },function(data){
                if(data.status == 200){
                    $scope.vm.appointRelativeList = data.data;
                    $scope.$apply();
                }else{
                }
                //console.log(data);
            },function(err){

            });
        }
        //引导页方法
        function showTip(){
            $('.shadow_div').show();
            $('.step_div').show();
            $('#step_one').show().siblings().hide();

        }
        function hideTip(){
            $('.shadow_div').hide();
            $('.step_div').hide();
        }

        //上一个
        function prevDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().prev()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().prev().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().prev().offset().top-20
                }, 500);
            }else{
                // $(obj).attr('disabled',true);
                return;
            }
        }
        //下一个
        function nextDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().next()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().next().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().next().offset().top-20
                }, 500);
            }else{
                //$(obj).attr('disabled',true);
                return;
            }
        }
        //引导页方法end

    }
]);

// Source: app/static/knowledgeManagement/js/controller/markKnow.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('markKnowController', ['$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","knowledgeAddServer","$window","$stateParams","$interval","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,knowledgeAddServer,$window,$stateParams,$interval,$filter) {
    $scope.vm = {
            knowledgeId : "",
            knowledgeOrigin : 120 ,
            frames: [],      //业务框架
            frameId: "",
            knowledgeAdd: knowledgeAdd,  //新增点击事件
            botRoot : "",      //根节点
            //knowledgeClassifyCall: knowledgeClassifyCall, //知识分类的回调方法
            openContentConfirm: openContentConfirm, //打开内容对话框
            knowledgeBotVal : "",  //bot 内容
            botSelectAdd : botSelectAdd,
            frameCategoryId : "",
            title : "",   //标题
            titleTip :  "",
            timeStart : "",      //起始时间
            timeEnd : "",
            isTimeTable : false,  //时间表隐藏

            //生成  知识标题 打标生成 BOT 扩展问
            getBotAndExtensionByTitle : getBotAndExtensionByTitle,
            //creatBot : [],

            botClassfy : [],   //类目
            creatSelectBot : [], //手选生成 bot

            //扩展问
            extensionTitle : "",
            extensionWeight :60,
            getExtension : getExtension,  //獲取擴展問
            extensions : [],      //手動生成
            extensionsByFrame : [],  //業務框架生成
            extensionByTitleTag : [] , //标题打标生成扩展问
            extensionEdit : extensionEdit,

            //展示内容
            scanContent : [],
            save : save ,   //保存
            scan :scan ,   //预览
            //弹框相关
            newTitle: "",    //标题
            channel : [],     //新添加的 channel
            channels : [],     //所有渠道
            channelArr : [] ,
            selectChannel : selectChannel , //獲取渠道
            dimension  : "",
            dimensions : []
            ,  //所有维度
            dimensionArr : [],  //選擇的維度
            dimensionsCopy :[]
            ,

            checkChannelDimension : checkChannelDimension ,
            //高级选项内容
            slideDown : slideDown,
            slideFlag : false,

            question : 1,
            tip : 1,
            tail : 1 ,

            knowledgeTitleTag : [],

            appointRelative : "",
            appointRelativeList :[],
            // addAppoint  : addAppoint,
            removeAppointRelative : removeAppointRelative ,
            //vm.appointRelativeGroup.push(item)
            appointRelativeGroup : [],
            replaceType : 0 ,
            enterEvent : enterEvent,
            dialogExtension : [],

            limitSave : false ,
            isEditIndex : -1,   // 知识内容 弹框
            // -1 为内容新增
            // index 为知识的编辑索引
            //*******************2017/7/14*******************//
            contentType : 113 ,  //新增内容类型
            imgPaginationConf : {
                pageSize: 8,//第页条目数
                pagesLength: 10//分页框数量
            },
            voicePaginationConf : {
                pageSize: 8,//第页条目数
                pagesLength: 10//分页框数量
            } ,
            getPicList : getPicList ,   //获得所有图片
            selectMultimedia : selectMultimedia,   //图片选择弹出框
            imageList : [] ,     //所有图片文件
            addMultimedia : addMultimedia , //选择图片
            imgSelected : "",    // 已选图片
            //getEmotion : getEmotion ,
            voiceList : "",                //所有声音文件
            getVoiceList : getVoiceList,  //获取素有声音文件
            voiceSelected : "" ,    //以选择声音文件
            qqFaceText : "" ,
//*******************2017/7/14*******************//
//*******************2017/8/3  BEGIN   删除扩展问本地备份 *******************//
            rmExtensionBackup : [] ,
//*******************2017/8/3  END   删除扩展问本地备份   *******************//

//*******************2017/8/9  添加链接 BEGIN *******************//
            addLint : addLint ,
            isNewLinkAble : isNewLinkAble ,
            newLint : "" ,
//*******************2017/8/9  添加链接  END *******************//
            //引到页
            showTip : showTip,
            hideTip : hideTip,
            prevDiv : prevDiv,
            nextDiv : nextDiv,
            //引到页end
            increaseCheck  : increaseCheck , //知识新增弹框保存按钮
            backupsOfExtension : "" ,//扩展问 编辑备份

            sourceTitle : ""  ,//备份标题 打标是验证
            backUpExt: backUpExt , // 扩展问 假删除
            extensionDeleted : []
        };

        //獲取渠道
        $scope.master.getDimensions($scope,["dimensions","dimensionsCopy"]) ;
        //获取维度
        $scope.master.getChannels($scope,["channels"]) ;
        //、、、、、、、、、、、、、、、、、、、、、、、   通过预览 编辑 判断   、、、、、、、、、、、、、、、、、、、、、、、、、
        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        
        if($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase){
            var data = angular.fromJson($stateParams.data) ;
            //console.log($stateParams.data);
            //标题
            $scope.vm.title =  data.knowledgeBase.knowledgeTitle ;
            $scope.vm.sourceTitle =  data.knowledgeBase.knowledgeTitle ;
            // 标题打标结果
            $scope.vm.knowledgeTitleTag = data.knowledgeBase.knowledgeTitleTag ;
            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId ;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin ;

            // 时间
            if(data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd){
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart  =  $filter("date")(data.knowledgeBase.knowledgeExpDateStart,"yyyy-MM-dd") ;
            $scope.vm.timeEnd  = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd,"yyyy-MM-dd") ;
            //bot路径
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList ;
            //扩展问
            $scope.vm.extensionsByFrame = data.extensionQuestions;
            angular.forEach(data.extensionQuestions,function(item){
            });
            //内容
            angular.forEach(data.knowledgeContents,function(item){
                var obj = {} ;

                //維度，添加預覽效果   以name id 的 形式显示
                obj.knowledgeContentNegative = item.knowledgeContentNegative ;
                if(item.knowledgeContentNegative==113){
                    obj.knowledgeContent = $filter("emotion")(item.knowledgeContent);
                }else{
                    obj.knowledgeContent = item.knowledgeContent;
                }
                obj.channelIdList =  item.channelIdList ;
                obj.dimensionIdList =  item.dimensionIdList ;
                obj.knowledgeRelatedQuestionOn =item.knowledgeRelatedQuestionOn ;   //显示相关问
                obj.knowledgeBeRelatedOn  =  item.knowledgeBeRelatedOn ; //在提示
                obj.knowledgeCommonOn = item.knowledgeCommonOn ;   //弹出评价小尾巴
                obj.knowledgeRelevantContentList = item.knowledgeRelevantContentList ;  //业务扩展问
                $scope.vm.scanContent.push(obj);
            });
        }
// 通过类目id 获取框架
        function getFrame(id){
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId":10012,
                "index": 0,
                "pageSize":999999
            },function(data){
                //console.log(data);
                if(data.status!=10005){
                    if(data.data.length){
                        $scope.vm.frames = $scope.vm.frames.concat(data.data) ;
                        $scope.$apply();
                    }
                }
            },function(){
                // layer.msg("err or err")
            });
        }
        $scope.$watch("vm.frameCategoryId",function(val,old){
            if(val&&val!=old){
                getFrame( val )
            }
        });
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId",function(val,old){
            if(val&&val!=old){
                //if($scope.vm.extensionsByFrame.length){
                //    //  替換條件
                //    replace(val);
                //}else{
                // 在未生成扩展问情況
                getExtensionByFrame(val);
                //}
            }
        });

        // 通过frame 获取扩展问
        function getExtensionByFrame(id,type){
            console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute",{
                "frameTypeId": 10012,
                "frameId": id,
                "index": 0,
                "pageSize":999999
            },function(data){
                if(data.status==10000){
                    //var extensionQuestionList = [],
                    //    frameQuestionTagList = [];
                    var obj = {};
                    if (data.data[0].elements) {
                        angular.forEach(data.data[0].elements, function (item, index) {
                            var  extensionQuestionList = [] ,
                                frameQuestionTagList = [];
                            obj={
                                "extensionQuestionType": 60 ,  //61
                                "extensionQuestionTitle": data.data[0].frameTitle
                            } ;
                            extensionQuestionList.push((item.elementContent.substring(0,item.elementContent.indexOf('#'))));
                            frameQuestionTagList.push(item.elementContent.substring(item.elementContent.indexOf('#')+1).split('；'));
                            checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                        });
                        //checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,obj);
                    }
                    $scope.$apply();
                }
            }, function (error) {console.log(error)});
        }

        // 获取Bot全路径
        function getBotFullPath(id){
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname",{
                categoryId: id
            },function(data){
                if(data.status = 10000){
                    var allBot = angular.copy($scope.vm.creatSelectBot.concat($scope.vm.botClassfy)) ,
                        botResult = $scope.master.isBotRepeat(id,data.categoryFullName.split("/"),"",allBot) ;
                    $scope.$apply(function(){
                        $scope.vm.knowledgeBotVal = data.categoryFullName;
                        if(botResult != false){
                            $scope.vm.botFullPath= botResult;
                        }
                    });
                }
            },function(error){console.log(error)});
        }
        //打开知识内容对话框
        function openContentConfirm(callback) {
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/public-html/knowledge_increase.html",
                width:"650px",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        callback();
                    } else {
                        setDialog();//清空内容对话框
                    }
                }
            });
        }
        //y业务框架生成扩展问校验
        function checkExtensionByFrame(extensionQuestionList,frameQuestionTagList,oldWord){
            //var title = oldWord.extensionQuestionTitle ;
            var title = extensionQuestionList[0] ;
            var weight = oldWord.extensionQuestionType ;
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                $scope.vm.extensionsByFrame.push(isLocalHasExt);
                return ;
            }
            console.log(oldWord,title);
            httpRequestPost("/api/ms/richtextKnowledge/checkFrameTag",{
                "applicationId": APPLICATION_ID,
                "extensionQuestionList" : extensionQuestionList,
                "frameQuestionTagList" : frameQuestionTagList
            },function(data){
                if(data.status==200){
                    $scope.$apply(function(){
                        var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                        var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                        if(result != true){
                            $scope.vm.extensionTitle = "";
                            $scope.vm.extensionsByFrame.push(result);
                        }
                    })
                }
            }, function () {
            });
        }
        //手动添加扩展问
        function getExtension(title,weight,source){
            //source  0 默认  1 标题
            var isLocalHasExt = addLocalExtension(title)  ;
            if(isLocalHasExt){
                if(!source){
                    $scope.vm.extensions.push(isLocalHasExt);
                }else{
                    $scope.vm.extensionByTitleTag = new Array(isLocalHasExt)
                }
                return ;
            }
            var question = new Array(title);
            var obj = {
                "extensionQuestionTitle" : $scope.vm.extensionTitle,
                "extensionQuestionType" : $scope.vm.extensionWeight
            } ;
            if(!title){
                layer.msg("扩展问不能为空")
            }else if(!checkExtensionByTitle(obj)){
                layer.msg("生成扩展问重复,已阻止添加");
                return false
            } else {
                httpRequestPost("/api/ms/richtextKnowledge/checkExtensionQuestion", {
                    "applicationId": APPLICATION_ID,
                    "extendQuestionList": question
                }, function (data) {
                    if (data.status == 500) {
                        layer.msg(data.data);
                    }else if(data.status == 10026 ){
                        layer.msg("扩展问添加重复，请重新添加")
                    } else if (data.status == 200) {
                        $scope.$apply(function(){
                            var allExtension = $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
                            var result = $scope.master.isExtensionTagRepeat(data.data,allExtension,title,weight) ;
                            if(result != true){
                                $scope.vm.extensionTitle = "";
                                if(!source){
                                    $scope.vm.extensions.push(result);
                                }else{
                                    $scope.vm.extensionByTitleTag = new Array(result)
                                }
                            }
                        });
                    }
                }, function (error,e,er) {
                    console.log(error)
                });
            }
        }
////////////////////////////////////// ///          Bot     /////////////////////////////////////////////////////
        $scope.master.botTreeOperate($scope,"/api/ms/modeling/category/listbycategorypid","/api/ms/modeling/category/listbycategorypid",getBotFullPath
            //"/api/ms/modeling/category/searchbycategoryname"
        ) ;
        //BOT搜索自动补全
        $scope.master.searchBotAutoTag(".botTagAuto","/api/ms/modeling/category/searchbycategoryname",function(suggestion){
            $scope.$apply(function(){
                var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
                    botResult = $scope.master.isBotRepeat(suggestion.data,suggestion.value.split("/"),suggestion.type,allBot) ;
                $scope.vm.knowledgeBotVal = suggestion.value;
                if(botResult != false){
                    $scope.vm.botFullPath= botResult;
                }
            })
        });
        //点击bot分类的 加号
        function botSelectAdd(){
            if($scope.vm.botFullPath){
                console.log($scope.vm.botFullPath)
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = "";
                $scope.vm.knowledgeBotVal = "";
            }
        };
////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
//        function replace(id){
//                var replace = ngDialog.openConfirm({
//                    template:"/static/knowledgeManagement/faq/replace.html",
//                    scope: $scope,
//                    closeByDocument:false,
//                    closeByEscape: true,
//                    showClose : true,
//                    backdrop : 'static',
//                    preCloseCallback:function(e){     //关闭回掉
//                        if(e === 1){    //替换
//                            getExtensionByFrame( id ,1 )
//                        }else if(e === 0){
//                            // 添加不替换
//                            getExtensionByFrame( id ,0 )
//                        }
//                    }
//                });
//        }
        function knowledgeAdd(data, index) {
            if(!$scope.vm.title){
                layer.msg("请先输入知识标题") ;
                return false ;
            }else{

                var dia = angular.element(".ngdialog ");
                $timeout(function(){
                    $scope.master.searchAppointAutoTag($scope,".appoint","/api/ms/knowledgeManage/getKnowledgeTitle","appointRelativeList",function(suggestion){
                        console.log(suggestion) ;
                    }).listener()
                },2000) ;
                if(data){    //增加
                    /* **************** 2017/8/2   知识内容编辑  BEGIN     **************/ //
                    switch (data.knowledgeContentNegative){
                        case  "111" :
                            $scope.vm.imgSelected = {
                                "name" : data.knowledgeContent ,
                                "url" : data.knowledgeContent
                            };
                            break ;
                        case  "112":
                            $scope.vm.voiceSelected = {
                                "name" : data.knowledgeContent,
                                "url" : data.knowledgeContent
                            };
                            break ;
                        case  "113" :
                            $timeout(function(){
                                $("#emotion-container").html(data.knowledgeContent) ;
                            },100);
                            break ;
                    }
                    $scope.vm.contentType  = data.knowledgeContentNegative ;  //新增内容类型
                    /* **************** 2017/8/2   知识内容编辑 END   **************/ //
                    $scope.vm.isEditIndex = index ;
                    $scope.vm.channel = data.channelIdList;
                    angular.forEach($scope.vm.dimensions,function(item){
                        if(data.dimensionIdList.inArray(item.dimensionId)){
                            var obj = {
                                "dimensionId" : item.dimensionId ,
                                "dimensionName" : item.dimensionName
                            } ;
                            $scope.vm.dimensionArr.push(obj) ;
                        }
                    }) ;
                    $scope.vm.tip  = data.knowledgeBeRelatedOn; //在提示
                    $scope.vm.question = data.knowledgeRelatedQuestionOn;
                    $scope.vm.tail = data.knowledgeCommonOn;
                    $scope.vm.appointRelativeGroup = data.knowledgeRelevantContentList!=null?data.knowledgeRelevantContentList:[];
                }
                if(dia.length==0) {
                    var dialog = ngDialog.openConfirm({
                        template: "/static/knowledgeManagement/public-html/markKnow_increase.html",
                        width:"650px",
                        scope:$scope ,
                        closeByDocument: false,
                        closeByEscape: true,
                        showClose: true,
                        backdrop: 'static',
                        preCloseCallback: function (e) {    //关闭回掉
                            if (e === 1) {
                                addNewOrEditKnow(index);
                            } else {
                                $scope.vm.isEditIndex = -1  ;
                            }
                            setDialog()
                        }
                    }) ;
                    var isDialog = $interval(function(){
                        var  intervaler ;
                        if(angular.element(".ngdialog ")){
                            $interval.cancel(isDialog) ;
                            var qqFaceWatcher = $scope.$watch("vm.contentType",function(val){
                                if(val == 113){
                                    $timeout(function(){
                                        $('.emotion').qqFace({
                                            id : 'facebox',
                                            //assign:'emotion-container',       //赋值对象
                                            assign:'emotinon-backup',       //赋值对象
                                            path:'/libs/qqFace/arclist/'	//表情存放的路径
                                        });
                                        intervaler = $interval(function(){
                                            var val = $("#emotinon-backup").val() ;
                                            if(val){
                                                var html = $("#emotion-container").html()+$filter('emotion')(val);
                                                $("#emotion-container").html(html) ;
                                                $("#emotinon-backup").val("") ;
                                                //console.log($filter("faceToString")(html))
                                            }
                                        },500) ;
                                    });
                                    qqFaceWatcher() ;
                                }else{
                                    $interval.cancel(intervaler) ;
                                }
                            })
                        }
                    },10) ;

                }
            }
        }
        function extensionEdit(type,item,index){
            //type  1 框架生成  0 手动添加
            $scope.vm.backupsOfExtension = angular.copy(item) ;
            console.log($scope.vm.backupsOfExtension) ;
            var dia = angular.element(".ngdialog ");
            if(dia.length==0){
                var extensionEdit = ngDialog.openConfirm({
                    template:"/static/knowledgeManagement/public-html/extension_edit.html",
                    width:"500px",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){     //关闭回掉
                        if(e === 1){
                            //console.log( $scope.vm.backupsOfExtension ) ;
                            if(type == 1){
                                $scope.vm.extensionsByFrame[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 0){
                                $scope.vm.extensions[index] = $scope.vm.backupsOfExtension ;
                            }else if(type == 2){
                                $scope.vm.extensionByTitleTag[index] = $scope.vm.backupsOfExtension ;
                            }
                        }else{$scope.vm.backupsOfExtension = ""; }
                    }
                });
            }
        }

        function slideDown(){
            $scope.vm.slideFlag = ! $scope.vm.slideFlag;
            $(".senior_div").slideToggle();
        }
        //根據 標題 生成 bot 跟 扩展问
        function getBotAndExtensionByTitle(){
            getExtension($scope.vm.title,"60",1) ; //生成扩展问
            if($scope.vm.title && $scope.vm.sourceTitle!=$scope.vm.title){
                httpRequestPost("/api/ms/richtextKnowledge/checkKnowledgeTitleAndGetAutoClassify",{
                    "title" :  $scope.vm.title,
                    "applicationId" : APPLICATION_ID,
                    "knowledgeId" : $scope.vm.knowledgeId
                },function(data){
                    console.log(data) ;
                    if(data.status == 500){    //标题打标失败
                        $scope.vm.titleTip = "知识标题重复";
                        $scope.$apply()
                    }else if(data.status == 200){

                        $scope.$apply(function(){
                            //標題打标结果
                            $scope.vm.knowledgeTitleTag = data.data.knowledgeTitleTagList ;
                            $scope.vm.botClassfy = [];   //reset 标题生成bot
                            //添加校验是否添加校验  获取所有bot 验证是否重复
                            var allBot = angular.copy($scope.vm.creatSelectBot) ;
                            //生成bot
                            angular.forEach(data.data.classifyList, function (item) {
                                var botResult = $scope.master.isBotRepeat(item.id,item.fullPath,item.type,allBot) ;
                                if(botResult != false){
                                    $scope.vm.botClassfy.push(botResult);
                                }
                                $scope.vm.frameCategoryId = item.id;
                            });
                        });
                    }
                },function(error){
                    console.log(error)
                });
            }else if($scope.vm.sourceTitle==$scope.vm.title){
                getExtension($scope.vm.title,"60",1) ; //生成扩展问
            }else{
                $scope.vm.titleTip = "知识标题不能为空"
            }
        }

        //  主页保存 获取参数
        function getParams(){
            var params =  {
                "applicationId": APPLICATION_ID,
                "userId" : USER_ID ,
                "sceneId" :SCENE_ID ,
                "knowledgeTitle": $scope.vm.title,//
                "knowledgeType": 106,
                "knowledgeExpDateStart" : $scope.vm.isTimeTable?$scope.vm.timeStart:"",  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable?$scope.vm.timeEnd:"",     //结束时间
                "knowledgeTitleTag" : $scope.vm.knowledgeTitleTag,    //标题打标生成的name
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME , //操作人
                "knowledgeOrigin" : $scope.vm.knowledgeOrigin
            };

            //var knowledgeContent ;
            var content = angular.copy($scope.vm.scanContent) ;
            angular.forEach(content,function(item,index){
                if(item.knowledgeContentNegative ==113){
                    var html = angular.copy(item.knowledgeContent) ;
                    content[index].knowledgeContent = $filter("faceToString")(html).replace(/<div>/,"\n").replace(/<div>/g,"").replace(/<\/div>/g,'\n').replace(/<br>/g,'\n') ;
                }
            }) ;
            params.knowledgeContents =  content;
            params.extensionQuestions =  $scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag) ;
            params.classificationAndKnowledgeList = $scope.vm.botClassfy.concat($scope.vm.creatSelectBot);
            return params
        }
        //限制一个知识多次保存
        var limitTimer ;
        function save() {
            if (!checkSave()) {
                return false
            } else {
                if(!$scope.vm.limitSave) {
                    $timeout.cancel(limitTimer) ;
                    $scope.vm.limitSave = true ;
                    limitTimer = $timeout(function(){
                        $scope.vm.limitSave = false ;
                    },180000) ;
                    var params = getParams();   // 保存參數
                    var api;                    // 返回編輯的 url
                    if ($scope.vm.knowledgeId) {
                        //编辑
                        api = "/api/ms/richtextKnowledge/editKnowledge";
                        params.knowledgeId = $scope.vm.knowledgeId;
                    } else {
                        //新增
                        api = "/api/ms/richtextKnowledge/addKnowledge"
                    }
                    httpRequestPost(api, params, function (data) {
                        console.log(getParams());
                        if (data.status == 200) {
                                    if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                        } else if (data.status == 500) {
                            layer.msg("知识保存失败") ;
                            $timeout.cancel(limitTimer) ;
                            $scope.$apply(function(){
                                $scope.vm.limitSave = false ;
                            });
                        }
                    }, function (err) {
                        $timeout.cancel(limitTimer) ;
                        $scope.$apply(function(){
                            $scope.vm.limitSave = false ;
                        });
                        console.log(err)
                    });
                }
            }
        }
        function scan(){
            if(!checkSave()){
                return false
            }else{
                var obj = {};
                var params = getParams();
                console.log(params);
                obj.params = params;
                obj.editUrl = "knowledgeManagement.markKnow";
                if($scope.vm.knowledgeId){
                    //编辑
                    obj.api = "/api/ms/richtextKnowledge/editKnowledge" ;
                    params.knowledgeId = $scope.vm.knowledgeId ;
                }else{
                    //新增
                    obj.api = "/api/ms/richtextKnowledge/addKnowledge"
                }
                obj.params = params;
                obj.knowledgeType = 106;
                $window.knowledgeScan = obj;
                //    var url = $state.href('knowledgeManagement.knowledgeScan',{knowledgeScan: 111});
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url,'_blank');
            }
        };

        /* *********************              弹框相关           **************************/ //
        function removeAppointRelative(item){
            $scope.vm.appointRelativeGroup.remove(item);
        }
//重置参数
        function setDialog() {
            /* **************** 2017/8/2   重置参数  BEGIN     **************/ //
            $scope.vm.contentType  = 113 ,  //新增内容类型
                $scope.vm.imgSelected = "",    // 已选图片
                $scope.vm.voiceSelected = "" ,    //以选择声音文件
                /* **************** 2017/8/2   重置参数 END   **************/ //
                $scope.vm.slideFlag = false ;
            $scope.vm.channel = [];
            $scope.vm.dimension = [];
            $scope.vm.question = 1;    //显示相关问
            $scope.vm.tip = 1;   //在提示
            $scope.vm.tail =1;   //弹出评价小尾巴
            $scope.vm.appointRelativeGroup = [] ;//业务扩展问
            $scope.vm.appointRelative = "";
            $scope.vm.dimensionsCopy = angular.copy($scope.vm.dimensions);
            $scope.vm.dimensionArr = [];
        }

        function addNewOrEditKnow(index){
            if(isNewKnowledgeTitle()){
                var knowledgeContent ;
                if($scope.vm.contentType==111){
                    knowledgeContent = $scope.vm.imgSelected.url
                }else if($scope.vm.contentType==112){
                    knowledgeContent = $scope.vm.voiceSelected.url
                }else if($scope.vm.contentType==113){
                    //faceToString
                    knowledgeContent = $("#emotion-container").html() ;
                    //console.log($("#emotion-container").html()) ;
                    //var html = $("#emotion-container").html() ;
                    //knowledgeContent = $filter("faceToString")(html).replace(/<div>/,"\n").replace(/<div>/g,"").replace(/<\/div>/g,'\n').replace(/<br>/g,'\n') ;
                }
                if(!$scope.vm.dimensionArr.id.length){
                    $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
                };
                var parameter = {
                    "knowledgeContent": knowledgeContent,
                    "channelIdList": $scope.vm.channel,
                    "knowledgeContentNegative": $scope.vm.contentType.toString(),
                    "dimensionIdList": $scope.vm.dimensionArr.id.length ? $scope.vm.dimensionArr.id : $scope.vm.dimensionsCopy.id,
                    "knowledgeRelatedQuestionOn": $scope.vm.question,    //显示相关问
                    "knowledgeBeRelatedOn": $scope.vm.tip, //在提示
                    "knowledgeCommonOn": $scope.vm.tail,   //弹出评价小尾巴
                    "knowledgeRelevantContentList": $scope.vm.appointRelativeGroup  //业务扩展问
                };
                if(index>=0){
                    $scope.vm.scanContent[index] = parameter ;
                }else{
                    $scope.vm.scanContent.push(parameter);
                }

            }
        }
        // 检验标题是否符合
        function checkTitle(title,type){
            if(!title){
                layer.msg("标题不能为空");
                return false
            }else{
                httpRequestPost("/api/ms/richtextKnowledge/checkDistribute",{
                    "title" : title
                },function(data){
                    console.log(data);
                    return true;
                },function(error){
                    console.log(error) ;
                    return false
                });
            }
        }
        //检验扩展问是否重复
        function checkExtensionByTitle(item){
            var result ;
            //所有标题以及手动打标生成的扩展问
            var arr = $scope.vm.extensionByTitleTag.concat($scope.vm.extensions);
            if(!arr.length){
                result = true ;
            }else{
                var len = arr.length;
                angular.forEach(arr,function(val){
                    if(val.extensionQuestionTitle == item.extensionQuestionTitle && val.extensionQuestionType == item.extensionQuestionType){
                        len-=1 ;
                        //console.log(val.extensionQuestionTitle == item.extensionQuestionTitle);
                        result = false ;
                    }
                    if(len==arr.length){
                        result = true ;
                    }
                })
            }
            return  result ;
        }

        function checkSave(){
            var params = getParams();
            console.log(params) ;
            if(!params.knowledgeTitle){
                layer.msg("知识标题不能为空，请填写");
                return false ;
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("知识类目不能为空，请选择分类");
                return false
            }else if(!$scope.$parent.master.isTitleHasTag($scope.vm.title,$scope.vm.extensions.concat($scope.vm.extensionsByFrame,$scope.vm.extensionByTitleTag))){
                layer.msg("知识意图未打标");
                return false ;
            }
            else if(!params.knowledgeContents.length){
                layer.msg("知识内容不能为空，请点击新增填写");
                return false ;
            }else if(!params.classificationAndKnowledgeList.length){
                layer.msg("分类知识Bot不能为空")
            }else{
                return true
            }
        }
//***************************    save check channel dimension  **********************************************

        function increaseCheck(){
            //判斷维度是否为空 0 不变 1 全维度
            if(!$scope.vm.dimensionArr.id.length){
                $scope.vm.dimensionArr=angular.copy($scope.vm.dimensionsCopy)
            };
            if(!isNewKnowledgeTitle() && !$scope.vm.channel.length){
                layer.msg("请填写知识内容,并选择渠道后保存")
            }else if(!isNewKnowledgeTitle()){
                layer.msg("请填写知识内容后保存")
            }else if(!$scope.vm.channel.length){
                layer.msg("请选择渠道后保存")
            }else if(checkChannelDimension($scope.vm.channel,$scope.vm.dimensionArr.id)){
                //存在重复条件
            }else{
                ngDialog.closeAll(1) ;
            }
        }
        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channel.inArray(channelId)){
                $scope.vm.channel.remove(channelId);
            }else{
                $scope.vm.channel.push(channelId);
            }
        }
/*        console.log("-------")
        console.log($scope.vm.scanContent)*/
        function checkChannelDimension(channel,dimension){
            var isRepeat  = false;
            //    新增的 channel = []  dimension = [] ,
            //   页面以添加 scanContent.dimensions   scanContent.channels
            angular.forEach($scope.vm.scanContent,function(item,contentIndex){
                if($scope.vm.isEditIndex != contentIndex){
                    angular.forEach(item.channelIdList,function(v){
                        angular.forEach(channel,function(val,indexChannel) {
                            if(val == v){
                                angular.forEach(item.dimensionIdList,function(value){
                                    angular.forEach(dimension,function(key,indexDimension){
                                        if(key==value){
                                            var channelTip;
                                            angular.forEach($scope.vm.channels,function(all){
                                                if(all.channelCode==v){
                                                    channelTip = all.channelName
                                                }
                                            });
                                            layer.msg("重复添加"+"渠道 "+channelTip+" 维度 "+$scope.vm.dimensionArr.name[indexDimension]);
                                            isRepeat = true
                                        }
                                    })
                                })
                            }
                        });
                    });
                }
            });
            return isRepeat
        }
//*******************       2017/7/14  BEGIN    *******************//
        //弹出选择图片声音对话框
        function selectMultimedia(){
            var dialog = ngDialog.openConfirm({
                template:"/static/knowledgeManagement/public-html/selectImage.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                    }
                }
            });
        }
        function addMultimedia(item){
            if($scope.vm.contentType==111){
                $scope.vm.imgSelected = {
                    "url" : item.pictureUrl ,
                    "id" : item.pictureId,
                    "name" : item.pictureName
                } ;
            }else if($scope.vm.contentType==112){
                $scope.vm.voiceSelected = {
                    "url" : item.videoUrl ,
                    "id" : item.videoId ,
                    "name" : item.videoName
                } ;
            }
            ngDialog.close(ngDialog.latestID) ;
        }
        getPicList(1) ;
        //获取所有图片
        function getPicList(index){
            httpRequestPost("/api/ms/picture/queryPicture",{
                "index": (index-1)*$scope.vm.imgPaginationConf.pageSize,
                "pageSize": $scope.vm.imgPaginationConf.pageSize
            },function(data){
                if(data.status == 200){
                    $scope.$apply(function(){
                        $scope.vm.imageList = data.data.objs ;
                        $scope.vm.imgPaginationConf.currentPage =index ;
                        $scope.vm.imgPaginationConf.totalItems =data.data.total ;
                    })
                }
            },function(err){
                console.log(err)
            }) ;
        }
        getVoiceList(1) ;
        function getVoiceList(index){
            httpRequestPost("/api/ms/videoManage/queryVideo",{
                "index": (index-1)*$scope.vm.voicePaginationConf.pageSize,
                "pageSize": $scope.vm.voicePaginationConf.pageSize
            },function(data){
                if(data.status == 200){
                    $scope.$apply(function(){
                        $scope.vm.voiceList = data.data.objs ;
                        $scope.vm.voicePaginationConf.currentPage =index ;
                        $scope.vm.voicePaginationConf.totalItems =data.data.total ;
                        console.log($scope.vm.voicePaginationConf)
                    })
                }
            },function(err){
                console.log(err)
            }) ;
        }
        var picTimer ;
        $scope.$watch('vm.imgPaginationConf.currentPage', function(current){
            if(current){
                if (picTimer) {
                    $timeout.cancel(picTimer)
                }
                picTimer = $timeout(function () {
                    getPicList(current);
                }, 100)

            }
        },true);
        var voiceTimer ;
        $scope.$watch('vm.voicePaginationConf.currentPage', function(current){
            if(current){
                if (voiceTimer) {
                    $timeout.cancel(voiceTimer)
                }
                voiceTimer = $timeout(function () {
                    getVoiceList(current);
                }, 100)
            }
        },true);
        function isNewKnowledgeTitle(){
            var info = "" , isPass = true;
            if($scope.vm.contentType == 111 && !$scope.vm.imgSelected.url){         //图片
                isPass = false;
            }else if($scope.vm.contentType == 112 && !$scope.vm.voiceSelected.name){  //声音
                isPass = false;
            }else if($scope.vm.contentType == 113 &&  !$("#emotion-container").html()){  //表情
                isPass = false;
            } ;
            return isPass
        }

        //*******************2017/8/9  添加链接 BEGIN *******************//
        function addLint(){
            var addLink = ngDialog.openConfirm({
                template:"/static/knowledgeManagement/markKnow/addLink.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    console.log(e)
                    if(e === 1){
                        var aLink = "<a href='"+$scope.vm.newLink+"' target='_blank'>"+$scope.vm.newLink+"</a>" ;
                        var html = $("#emotion-container").html() + aLink ;

                        $("#emotion-container").html(html)
                        console.log($scope.vm.newLink)
                    }
                    $scope.vm.newLink = ""
                }
            })
        }
        function isNewLinkAble(val){
            var regex =/^http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&=]*)?$/i
            if(regex.test(val)){
                ngDialog.close(ngDialog.latestID,1) ;
            }else{
                layer.msg("请输入正确的链接地址")
            }
        }
//*******************2017/8/9  添加链接  END *******************//
//*******************       2017/7/14      END *******************//

//         function addAppoint(item,arr){
//             if(arr.indexOf(item)==-1){
//                 arr.push(item)
//             }
//             $scope.vm.appointRelative = "";  //清楚title
//             $scope.vm.appointRelativeList = [];  //清除 列表
//
//         }
//         // 動態加載 title
//         $scope.$watch("vm.appointRelative",function(title){
//             //console.log(title);
//             if(title){
//                 $timeout(getAppointRelative(title),300)
//             }
//         });
//
//         function getAppointRelative(title){
//             httpRequestPost("/api/ms/knowledgeManage/getKnowledgeTitle",{
//                 "title" : title,
//                 "applicationId" : APPLICATION_ID
//             },function(data){
//                 if(data.status == 200){
//                     $scope.vm.appointRelativeList = data.data;
//                     $scope.$apply()
//                 }else{
//                 }
//                 console.log(data);
//             },function(error){
//                 console.log(error)
//             });
//         }

//********************************  2017/9/5 扩展问删除备份  BEGIN ***********************************************
        // 假删除本地备份
        function backUpExt(item){
            if(!$scope.vm.extensionDeleted.inArray(item)){
                $scope.vm.extensionDeleted.push(item)
            }
        }
        function addLocalExtension(title){
            var result = false ;
            if($scope.vm.extensionDeleted){
                angular.forEach($scope.vm.extensionDeleted,function(item,index){
                    if(title == item.extensionQuestionTitle){
                        result = item ;
                        $scope.vm.extensionDeleted.splice(index,1)
                    }
                })
            }
            return result ;
        }
//********************************  2017/9/5 扩展问删除备份  EDN ***********************************************

        //引导页方法
        function showTip(){
            $('.shadow_div').show();
            $('.step_div').show();
            $('#step_one').show().siblings().hide();

        }
        function hideTip(){
            $('.shadow_div').hide();
            $('.step_div').hide();
        }

        //上一个
        function prevDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().prev()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().prev().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().prev().offset().top-20
                }, 500);
            }else{
                // $(obj).attr('disabled',true);
                return;
            }
        }
        //下一个
        function nextDiv(e){
            var  obj = e.srcElement ? e.srcElement : e.target;
            if($(obj).parent().parent().parent().next()){
                $(obj).parent().parent().parent().hide();
                $(obj).parent().parent().parent().next().show();
                $('html, body').animate({
                    scrollTop: $(obj).parent().parent().parent().next().offset().top-20
                }, 500);
            }else{
                //$(obj).attr('disabled',true);
                return;
            }
        }
        //引导页方法end

    },
    
]);
// Source: app/static/knowledgeManagement/js/controller/processKnow.controller.js
/**
 * Created by mileS on 2017/11/6.
 * Describe 流程知识
 */
angular.module('knowledgeManagementModule').controller('processKnowController', [
    '$scope', '$http','localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","knowledgeAddServer","$window","$stateParams","$interval","$rootScope","$filter",
function ($scope,$http,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,knowledgeAddServer,$window,$stateParams,$interval,$rootScope,$filter) {
    $scope.vm = {
        knowledgeId : $stateParams.knowledgeId?$stateParams.knowledgeId:"" ,// 知识id
        statusId:$stateParams.statusId?$stateParams.statusId:"" ,
        selectNodeVal : "" , //弹框选择的节点名称
        recommendKnow : [] , // 机器人回复 输入搜索
        flowKnowledgeContentList : [] , // 流程
        isFactorKnow : false, // 是否为要素知识
        newIndex : null ,// 新建节点位置
        isEditIndex : null ,
        botRoot : "" ,// root bot
        disabled : {
            "background" : "#eee"
        } ,
        relatedIndex : null , //
//------------------       val  ---------------------------------------------------
        triggerKnowledge : "" , // 机器人回复标题
        triggerKnowTitle : "", // 触发要素标题
        actionType : 0, // 后续动作类型
        triggerCondition : 0,  //触发条件
        nodeName : "" , // 节点名称
        strikeNumber : "" , // 触发次数
        botVal : ""  ,// bot
        factorContent : [] ,  // 要素之时 内容
        knowJump : [{
            answer :  "",
            nodeNo : null
        }],
        removeAutoList:removeAutoList ,
//----------------------            method    ---------------------------------------------------
        openSelectNodeDialog : openSelectNodeDialog , // 打开选择节点弹框
        //processList : [] , // 所有流程
        moveUp : moveUp ,// 向下移动
        moveDown : moveDown ,// 向下移动
        storeNewProcess : storeNewProcess ,// 新增一个流程
        addNewKnow : addNewKnow ,// 添加新知识
        selectKnowTitle : selectKnowTitle, // 选择知识标题
        editNode : editNode, // 编辑节点
        resetParams : resetParams ,//重置参数
        bindingNodeChange : bindingNodeChange , // 已绑定节点的移动
        newNode : newNode ,// 新建节点
        inputBlur : inputBlur,
        deleteNode : deleteNode,
        //审核通过与否
        auditPassedOrNopass:auditPassedOrNopass,
        reason:''


    };
    //删除节点
    function deleteNode(index,num,type){
        var layerDialog = layer.confirm('是否要删除？',{
            btn:['确定','取消']
        },function(){
            console.log(111);
            $scope.$apply(function () {
                $scope.vm.flowKnowledgeContentList.splice(index,num);
            });
            bindingNodeChange(type,index);
            layer.close(layerDialog)
        },function(){

        });

    }

    //失去焦点
    function inputBlur(){
        $timeout(function(){
            if($scope.vm.triggerCondition==3){
                $scope.vm.triggerCondition=0;
            }
        },200);
    }

    // 编辑知识
    (function(id){
         //隱藏
        // $(".right_popup_div").show();
        // $(".arrow").removeClass("act");
        if(id){
            $http.get("api/ms/flowKnowledge/"+id).then(function(response){
                var data = response.data.data ;
                var list = data.flowKnowledgeContentList ;
                angular.forEach(list,function(item,index){
                    //"triggerKnowledgeOfTitle": triggerKnowledgeOfTitle,  //----机器人回复知识标题title
                    //"triggerValueOfTitle": triggerValueOfTitle ,// ----bot 或知识name
                    if(item.triggerType==1){  // bot
                        list[index].triggerValueOfTitle = item.className.join(",").replace(/\,/g,"/");
                        list[index].triggerKnowledgeOfTitle = item.knowledge!=null?item.knowledge.knowledgeTitle:"" ;
                    }else if(item.triggerType==2){
                        list[index].triggerValueOfTitle = item.knowledge.knowledgeTitle ;
                        list[index].triggerKnowledgeOfTitle = "" ;
                    }else if(item.triggerType==3){
                        list[index].triggerValueOfTitle = "" ;
                        list[index].triggerKnowledgeOfTitle = item.knowledge.knowledgeTitle ;
                    }
                    $scope.vm.flowKnowledgeContentList = list
                }) ;
                // 隱藏
                $(".right_popup_div").hide();
                $(".arrow").removeClass("act");
            })
        }else{
            $(".right_popup_div").show();
            $(".arrow").removeClass("act");
        }
    })($scope.vm.knowledgeId) ;

    $(".trigger_know_title_key,.robot_key_words").bind("input focus",function(){
        var keyWords = $(this).val() ;
        httpRequestPost("/api/ms/knowledgeManage/getKnowledgeTitle",{
            "applicationId":APPLICATION_ID ,
            "title" : keyWords
        },function(response){
            if(response.status == 200){
                $scope.$apply(function(){
                    $scope.vm.recommendKnow = response.data
                })
            }
        },function(error){
            console.log(error)
        })
    }) ;
    // 节点位置变动 引起的绑定 num 发生变化
    //@1 绑定name    ---- 较简单
    //@2 绑定 num    ---- 较复杂  temp
    function bindingNodeChange(type,index) {
        //    type 0 删除 ， 1 新增 ，2 上移 3 下移
        //    删除     --首尾删除，中间删除
        //    新增     --首尾新增，中间新增
        //    上移     --first --last
        //    下移     --first --last
        //$timeout(function(){
            var nodeLen = $scope.vm.flowKnowledgeContentList.length ; // 操作完之后 节点数量
            if(nodeLen == 1){  //2
                angular.forEach($scope.vm.flowKnowledgeContentList[0].contentSubsequentList,function(item,cur){
                    $scope.vm.flowKnowledgeContentList[0].contentSubsequentList[cur].nodeNo = null ;
                })
            }
            else if(nodeLen >= 2){
                if(type == 0){
                    angular.forEach($scope.vm.flowKnowledgeContentList,function(process,processCur){
                        angular.forEach(process.contentSubsequentList,function(item,itemCur){
                            if(item.nodeNo==null ){
                                return true ;
                            }
                            var nodeNumber = null ;
                            var number = parseInt(item.nodeNo) ;
                            if(number > index){
                                nodeNumber = number - 1 ;
                            }else if(number < index){
                                nodeNumber = number  ;
                            }
                            $scope.vm.flowKnowledgeContentList[processCur].contentSubsequentList[itemCur].nodeNo = nodeNumber;
                        }) ;
                    })
                }else if(type == 1){
                    angular.forEach($scope.vm.flowKnowledgeContentList,function(process,processCur){
                        angular.forEach(process.contentSubsequentList,function(item,itemCur){
                            if(item.nodeNo==null ){
                                return true ;
                            }
                            var number =  parseInt(item.nodeNo) ;
                            if(number >= index){
                                $scope.vm.flowKnowledgeContentList[processCur].contentSubsequentList[itemCur].nodeNo = number + 1;
                            }
                        }) ;
                    })
                }else if(type == 2){ //index , index-1  两个位置变动了
                    var movingIndex = index,movedIndex = index-1 ;
                    angular.forEach($scope.vm.flowKnowledgeContentList,function(process,processCur){
                        angular.forEach(process.contentSubsequentList,function(item,itemCur){
                            if(item.nodeNo==null ){
                                return true ;
                            }
                            var number =  parseInt(item.nodeNo) ;
                            if(number == movingIndex){
                                $scope.vm.flowKnowledgeContentList[processCur].contentSubsequentList[itemCur].nodeNo = movedIndex;
                            }else if(number == movedIndex){
                                $scope.vm.flowKnowledgeContentList[processCur].contentSubsequentList[itemCur].nodeNo = movingIndex;
                            }
                        }) ;
                    })
                }else if(type == 3){ //index , index+1  两个位置变动了
                    var movingIndex = index,movedIndex = index+1;
                    angular.forEach($scope.vm.flowKnowledgeContentList,function(process,processCur){
                        angular.forEach(process.contentSubsequentList,function(item,itemCur){
                            if(item.nodeNo==null ){
                                return true ;
                            }
                            var number =  parseInt(item.nodeNo) ;
                            if(number == movingIndex){
                                $scope.vm.flowKnowledgeContentList[processCur].contentSubsequentList[itemCur].nodeNo = movedIndex;
                            }else if(number == movedIndex){
                                $scope.vm.flowKnowledgeContentList[processCur].contentSubsequentList[itemCur].nodeNo = movingIndex;
                            }
                        }) ;
                    })
                }
            }
            console.log($scope.vm.flowKnowledgeContentList)
        //})
    }
//-------------------------------------------------------------------------
    function moveUp(index){
        var temp = angular.copy($scope.vm.flowKnowledgeContentList[index]) ;
        $scope.vm.flowKnowledgeContentList.splice(index,1) ;
        $scope.vm.flowKnowledgeContentList.insert(index-1,temp) ;
        bindingNodeChange(2,index)
    }
    function moveDown(index){
        var temp = angular.copy($scope.vm.flowKnowledgeContentList[index]) ;
        $scope.vm.flowKnowledgeContentList.splice(index,1) ;
        $scope.vm.flowKnowledgeContentList.insert(index+1,temp) ;
        bindingNodeChange(3,index)
    }
    function newNode(index){
        //type  0 上方 1 下方
        resetParams() ;
        $(".right_popup_div").show();
        $(".arrow").removeClass("act");
        $scope.vm.newIndex = index ;
    }
    // 获取要素知识内容
    function getFactorContent(id){
        $scope.vm.factorContent = [] ;
        $http.get('api/ms/knowledgeManage/getKnowledgeContent/'+id).then(function(response){
            angular.forEach(angular.fromJson(response.data.data[0].knowledgeContent).items,function(item,index){
                $scope.vm.factorContent.push({
                    answer : item.name ,
                    nodeNo : null
                })
            }) ;
        })
    }
    // 保存知识
    function addNewKnow(){
        var api = $scope.vm.knowledgeId?"api/ms/flowKnowledge/edit":"/api/ms/flowKnowledge/add" ;
        angular.forEach($scope.vm.flowKnowledgeContentList,function(item,index){
            // nodeNo 参数
            $scope.vm.flowKnowledgeContentList[index].nodeNo = index;
            // 删除多余属性
            //delete $scope.vm.flowKnowledgeContentList[index].triggerKnowledgeOfTitle ;
            //delete $scope.vm.flowKnowledgeContentList[index].triggerValueOfTitle ;
        }) ;
        var params= {
            "applicationId": APPLICATION_ID,
            "knowledgeTitle" : $scope.vm.flowKnowledgeContentList[0].nodeName ,
            "knowledgeCreator": USER_LOGIN_NAME , //操作人
            "flowKnowledgeContentList": $scope.vm.flowKnowledgeContentList , //节点集合
            "userId" : USER_ID
        } ;
        if($scope.vm.knowledgeId){
            params.knowledgeId = $scope.vm.knowledgeId
        }
        console.log(params) ;
        //return ;
        httpRequestPost(api,params,function(response){
            if(response.status == 200){
                //var layDialog = layer.confirm('是跳转到知识总览页面？', {
                //     btn: ['是','继续添加'] //按钮
                // }, function(){
                //     layer.close(layDialog);
                console.log("------------")
                console.log($scope.vm.knowledgeId)
                if($scope.vm.statusId==''){
                    layer.msg("新增知识已进入审核列表",{time:2000});
                    $state.go("knowledgeManagement.custOverview");
                }else if($scope.vm.statusId==4){
                    layer.msg("编辑知识已进入审核列表",{time:2000});
                      $state.go("knowledgeManagement.custOverview");
                }else{
                      $state.go("knowledgeManagement.custOverview");
                }
              
                //}, function(){
                //   $state.reload()
                //});
            }else if(response.status == 500){
                layer.msg(response.data)
            }
        })
    }
    // 保存节点
    function storeNewProcess(editIndex){
        console.log(editIndex);
        if(!$scope.vm.nodeName){  // 节点名称必须
            return layer.msg("请输入节点名称")
        }
        // 触发条件 1 bot ；2 知识   后续动作
        var isRepeat ,curIndex;
        angular.forEach($scope.vm.flowKnowledgeContentList,function(item,index){
            if($scope.vm.nodeName == item.nodeName && editIndex !=index){
                isRepeat = true ;
                return layer.msg("节点名称重复")
            }
        }) ;
        if(isRepeat){
            return ;
        }
        //      触发条件                    机器人回复
        var strikeValue = "",           triggerKnowledge = "",contentSubsequentList = [],strikeNumber = 1;
        var triggerValueOfTitle = "" , triggerKnowledgeOfTitle = "" ,triggerType = 3 ;   //  不需字段页面判断
        if($scope.vm.triggerCondition == 1 && $scope.vm.strikeValue.id && $scope.vm.strikeValue.name){
            triggerType = 1 ;
            strikeNumber = $scope.vm.strikeNumber ;
            strikeValue = $scope.vm.strikeValue.id ;
            triggerValueOfTitle = $scope.vm.strikeValue.name ;
        }else if($scope.vm.triggerCondition == 2 && $scope.vm.triggerKnowTitle.id  && $scope.vm.triggerKnowTitle.name){
            triggerType = 2 ;
            strikeNumber = 1 ;
            strikeValue = $scope.vm.triggerKnowTitle.id ;
            triggerValueOfTitle = $scope.vm.triggerKnowTitle.name ;
        }
        //机器人回复
        if($scope.vm.triggerKnowledge.name && $scope.vm.triggerKnowledge.id){
            triggerKnowledgeOfTitle =  $scope.vm.triggerKnowledge.name;
            triggerKnowledge = $scope.vm.triggerKnowledge.id
        }
        if($scope.vm.actionType == 0){
            contentSubsequentList.push({
                "answer": "等待用户输入",
                "nodeNo": null
            })
        }else if($scope.vm.actionType == 1){
            contentSubsequentList = $scope.vm.factorContent
        }else if($scope.vm.actionType == 2){
            contentSubsequentList = $scope.vm.knowJump
        }
        if($scope.vm.newIndex!=null){
            curIndex = $scope.vm.newIndex
        }else{
            curIndex = $scope.vm.flowKnowledgeContentList.length
        }
        // 需保存的参数
        var storeParams  = {
            "nodeName": $scope.vm.nodeName,
            "triggerType": triggerType,
            "triggerValue": strikeValue,   // bot 或知识id
            "triggerValueOfTitle": triggerValueOfTitle ,// ----bot 或知识name
            "triggerNum": strikeNumber,  //触发次数
            "triggerKnowledge": triggerKnowledge,  //机器人回复知识标题id
            "triggerKnowledgeOfTitle": triggerKnowledgeOfTitle,  //----机器人回复知识标题title
            "actionType": $scope.vm.actionType,   //后续动作类型
            "contentSubsequentList": contentSubsequentList
        };
        console.log(storeParams);
        var storeParamsCopy = angular.copy(storeParams) ;
        if(editIndex!=null){
            $scope.vm.flowKnowledgeContentList[editIndex] = storeParamsCopy ;
        }else{
            $scope.vm.flowKnowledgeContentList.splice(curIndex,0,storeParamsCopy) ;
            bindingNodeChange(1,curIndex) ;
        }
        // 重置参数
        resetParams() ;
        $(".right_popup_div").hide();
        $(".arrow").removeClass("act");
    }
    // 选择知识标题
    function selectKnowTitle(know,title){
        // 要素知识 添加知识内容
        if(know.knowledgeType == 103){
            $scope.vm.isFactorKnow = true ;
            getFactorContent(know.knowledgeId)
        }else{
            $scope.vm.isFactorKnow = false ;
        }
        $scope.vm[title]={
            id :know.knowledgeId ,
            name : know.knowledgeTitle
        } ;
        $scope.vm.recommendKnow = [] ;
    }
    function editNode(item,index){
        console.log(item) ;
        $scope.vm.relatedIndex = index ;
        $scope.vm.isEditIndex = index ;
        //触发
        if(item.triggerType == 1){  // bot
            $scope.vm.triggerCondition = 1 ;
            $scope.vm.strikeValue={
                id : item.triggerValue ,
                name : item.triggerValueOfTitle
            } ;
            $scope.vm.triggerKnowTitle = {
                id : "" ,
                name : ""
            } ;
        }else if(item.triggerType == 2){  // 知识
            $scope.vm.triggerCondition=2 ;
            $scope.vm.strikeValue={
                id : "" ,
                name : ""
            } ;
            $scope.vm.triggerKnowTitle = {
                id : item.triggerValue ,
                name : item.triggerValueOfTitle
            } ;
        }else if(item.triggerType == 3){  // 机器人回复知识  无触发条件
            $scope.vm.triggerCondition = 0 ;
            $scope.vm.triggerKnowTitle = {
                id : "" ,
                name : ""
            } ;
            $scope.vm.strikeValue={
                id : "" ,
                name : ""
            } ;
        }
        //机器人回复
        $scope.vm.triggerKnowledge = {
            id : item.triggerKnowledge ,
            name : item.triggerKnowledgeOfTitle
        } ;
        console.log($scope.vm.triggerKnowledge,$scope.vm.triggerKnowTitle) ;
        // 后续动作
        if(item.actionType == 1){
            $scope.vm.isFactorKnow = true ;
            $scope.vm.factorContent = item.contentSubsequentList
        }else if(item.actionType == 2){
            $scope.vm.isFactorKnow = false ;
            $scope.vm.knowJump = item.contentSubsequentList
        }else{
            $scope.vm.isFactorKnow = false ;
        }
        $scope.vm.nodeName = item.nodeName ; // 节点名称
        $scope.vm.strikeNumber = item.triggerNum ; // 触发次数
        $scope.vm.triggerCondition = item.triggerType;  //触发条件
        $scope.vm.triggerType = item.triggerType;  //触发条件
        $scope.vm.actionType = item.actionType;  //触发条件
    }
    function resetParams(){
        console.log("------重置参数------") ;
        $scope.vm.relatedIndex = null ;
        $scope.vm.isEditIndex = null ; // 编辑索引
        $scope.vm.newIndex = null ; // 重置 新建节点位置
        $scope.vm.selectNodeVal = "" ; //弹框选择的节点名称
        $scope.vm.isFactorKnow = false; // 是否为要素知识
        $scope.vm.triggerKnowledge = "" ; // 机器人回复标题
        $scope.vm.triggerKnowTitle = ""; // 触发要素标题
        $scope.vm.actionType = 0; // 后续动作类型
        $scope.vm.triggerCondition = 0;  //触发条件
        $scope.vm.nodeName = "" ; // 节点名称
        $scope.vm.strikeNumber = "" ; // 触发次数
        $scope.vm.botVal = ""  ;// bot
        $scope.vm.factorContent = [] ;  // 要素之时 内容
        $scope.vm.knowJump = [{
            answer : "",
            nodeNo : null
        }];
        $scope.vm.strikeValue = "" ;
        $scope.vm.triggerKnowTitle = "" ;
        $scope.vm.triggerKnowledge = "" ;
        $("#knowTitle").val("") ;
    }
    function removeAutoList(){
        $timeout(function(){
            $scope.vm.recommendKnow=[] ;
        },200)
    }
    //    ------------------------           init   bot   -----------------------------
    $scope.master.botTreeOperate($scope, "/api/ms/modeling/category/listbycategorypid", "/api/ms/modeling/category/listbycategorypid", function (id) {
        httpRequestPost("/api/ms/modeling/category/getcategoryfullname", {
            categoryId: id
        }, function (data) {
            console.log(data);
            if (data.status = 10000) {
                $scope.$apply(function () {
                    $scope.vm.strikeValue = {
                        id: id,
                        name: data.categoryFullName
                    }
                });
            }
        })
    }, "", ".strikeRootClassfy") ;
    function openSelectNodeDialog(type,index,num){
        if(type==1){  //    跳转

        }else{ //    答案内容
            $scope.vm.factorContent
        }
        // 触发次数
        if(index && num!=null){
            $scope.vm.selectNodeVal = num ;
        }else{
            $scope.vm.selectNodeVal = 0 ;
        }
        var dialog = ngDialog.openConfirm({
            template: "/static/knowledgeManagement/processKnow/select_node.html",
            scope: $scope,
            closeByDocument: false,
            closeByEscape: true,
            showClose: true,
            backdrop: 'static',
            preCloseCallback: function (e) {    //关闭回掉
                if (e === 1) {
                    if(type==1){  //    跳转
                        $scope.vm.knowJump[0].nodeNo = $scope.vm.selectNodeVal
                    }else{ //    答案内容
                        $scope.vm.factorContent[index].nodeNo =  $scope.vm.selectNodeVal
                    }
                }
            }
        });
    }
        //单条知识审核通过与否
         function auditPassedOrNopass(statusId){
            console.log(statusId)
            if($scope.vm.reason==''&&statusId==4){
                 layer.msg("请填写不通过理由！！！");
                 return false
            }else{
                 httpRequestPost("/api/ms/knowledgeManage/overView/auditPassed",{
                    "statusId":statusId,
                    "reason":$scope.vm.reason,
                    "knowledgeIds":[$scope.vm.knowledgeId],
                    "knowledgeUpdater" : USER_NAME
                },function(data){
                   if(data.status==200&&statusId==1){
                      layer.msg("审核成功,请在知识总览查看",{time:2000});
                       $state.reload();
                       window.history.go(-1)
                   }else if(data.status==200&&statusId==4){
                     layer.msg(data.info);
                       $state.reload();
                       window.history.go(-1)
                   }
               })
            }
         }
    }]);
// Source: app/static/knowledgeManagement/js/controller/recommendKnow.controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('recommendKnowController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$compile","FileUploader","knowledgeAddServer","$window","$stateParams","$interval","$rootScope","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$compile,FileUploader,knowledgeAddServer,$window,$stateParams,$interval,$rootScope,$filter) {
        $scope.vm = {
            knowledgeId: "",
            knowledgeOrigin: 120,
            frames: [],      //业务框架
            frameId: "",
            botRoot: "",      //根节点
            knowledgeBotVal: "",  //bot 内容
            botSelectAdd: botSelectAdd,
            frameCategoryId: "",
            title: "",   //标题
            titleTip: "",
            timeStart: "",      //起始时间
            timeEnd: "",
            isTimeTable: false,  //时间表隐藏
            //生成  知识标题 打标生成 BOT 扩展问
            //getBotAndExtensionByTitle : getBotAndExtensionByTitle,
            //creatBot : [],

            botClassfy: [],   //类目
            creatSelectBot: [], //手选生成 bot

            //扩展问
            extensionTitle: "",
            extensionWeight: 60,
            extensions: [],      //手動生成
            extensionByTitleTag: [], //标题打标生成扩展问
            //extensionEdit : extensionEdit,
            botFullPath: "",

            //展示内容
            scanContent: [],
            save: save,   //保存
            scan: scan,   //预览
            //高级选项
            newTitle: "",    //标题
            channel: [],     //新添加的 channel
            channels: [],     //所有渠道
            channelArr: [],
            selectChannel: selectChannel, //獲取渠道
            dimension: "",
            dimensions: []
            ,  //所有维度
            dimensionArr: [],  //選擇的維度
            dimensionsCopy: []
            ,

            //高级选项内容
            slideDown: slideDown,
            slideFlag: false,

            question: 1,
            tip: 1,
            tail: 1,

            //knowledgeTitleTag : [],

            appointRelative: "",
            appointRelativeList: [],
            addAppoint: addAppoint,

            //appointRelativeGroup : [],
            replaceType: 0,
            enterEvent: enterEvent,  //鍵盤事件
            //表格
            pro_name: pro_name,
            addList: addList,  //table 添加列
            editList: editList, //编辑表格
            tableRow: null,   //行
            tableColumn: null,  //刪除用
            tableChange: tableChange,//編輯
            tableRemove: tableRemove, //删除行或列
            addRow: addRow,   //添加行
            //gorithm : ['NLP'], //语义挖掘
            gorithm: "", //语义挖掘
            tableType: "字符串",   //类型
            factorName: null,   //要素名称
            reQuestion: null, //反问

            tableList: "",
            listTableType: "",
            data: "",
            column: "",
            tableSaveCheck: tableSaveCheck,  // 添加的行列是否符合要求

            limitSave: false,//限制多次打标
//*******************2017/8/3  BEGIN   删除扩展问本地备份 *******************//
            rmExtensionBackup: [],
//*******************2017/8/3  END   删除扩展问本地备份   *******************//

//*******************2017/8/15  BEGIN   推荐知识对接修改 *******************//
            strikeNumber: 1,  //触发次数
            strikeValue: {}, //触发内容
            connectKnow: [],
            connectKnowCopy: [],
            bind: bind,
            //relativeProblem : "" ,
            isAppointKnowRight: isAppointKnowRight,
            allRelateTitle: {},

//*******************2017/8/15  END    推荐知识对接修改  *******************//

            isDecorateSimple: false,// true 单独修饰  false  整体修饰
            backupsOfExtension: "" //扩展问 编辑备份
        };
        //獲取渠道
        $scope.master.getDimensions($scope, ["dimensions", "dimensionsCopy"]);
        //获取维度
        $scope.master.getChannels($scope, ["channels"]);
        //組裝數據   擴展問   content
        //BOT路径设置为 选择添加                  再次增加判断重复
        //
        //标题
        //console.log($stateParams.data);
        if ($stateParams.data && angular.fromJson($stateParams.data).knowledgeBase) {
            var data = angular.fromJson($stateParams.data);
            //标题
            $scope.vm.title = data.knowledgeBase.knowledgeTitle;
            // 标题打标结果
            //$scope.vm.knowledgeTitleTag = data.knowledgeBase.knowledgeTitleTag ;
            // 时间
            if (data.knowledgeBase.knowledgeExpDateStart || data.knowledgeBase.knowledgeExpDateEnd) {
                $scope.vm.isTimeTable = true
            }
            $scope.vm.timeStart = $filter("date")(data.knowledgeBase.knowledgeExpDateStart, "yyyy-MM-dd");
            $scope.vm.timeEnd = $filter("date")(data.knowledgeBase.knowledgeExpDateEnd, "yyyy-MM-dd");
            //bot路径
            $scope.vm.creatSelectBot = data.knowledgeBase.classificationAndKnowledgeList;
            //knowledgeId
            $scope.vm.knowledgeId = data.knowledgeBase.knowledgeId;
            $scope.vm.knowledgeOrigin = data.knowledgeBase.knowledgeOrigin;
            //触发要素
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname", {
                categoryId: data.extensionQuestions[0].extensionQuestionTitle
            }, function (resonse) {
                //console.log(resonse)
                if (resonse.status = 10000) {
                    //$scope.$apply(function () {
                    $scope.vm.strikeValue = {
                        id: data.extensionQuestions[0].extensionQuestionTitle,
                        name: resonse.categoryFullName
                    };
                    //});
                }
            });
            //$scope.vm.strikeValue = {
            //    id : data.extensionQuestions?data.extensionQuestions[0].extensionQuestionTitle:"" ,
            //    name : data.extensionQuestions?data.extensionQuestions[0].extensionQuestionName:""
            //} ;
            $scope.vm.strikeNumber = data.extensionQuestions ? data.extensionQuestions[0].extensionQuestionType : "";
            //内容
            angular.forEach(data.knowledgeContents, function (item) {
                var obj = {}, trueValue = angular.fromJson(item.knowledgeContentTrue).items;
                //obj.knowledgeContent = item.knowledgeContent;
                $scope.vm.tableList = {};
                //$scope.vm.tableList.data.listTableType[column].technology;
                $scope.vm.tableList.data = item.knowledgeContent;

//*******************2017/8/15  BEGIN   表格展示問題修改  *******************//
                $scope.vm.connectKnow = [];
                angular.forEach(trueValue, function (tag, cure) {
                    if (cure != 0) {
                        $scope.vm.tableList.data.listTableType[cure].technology = tag.slots[0].algorithm
                    }
                    $scope.vm.connectKnow.push({
                        appoint: {
                            relatedTitle: tag.relatedTitle ? tag.relatedTitle : "",
                            relatedId: tag.relatedId ? tag.relatedId : ""
                        },
                        item: tag.name
                    })
                });
//*******************2017/8/15  END    推荐知识对接修改  *******************//

                //$scope.vm.connectKnow = [] ;
                //$scope.vm.connectKnow.push({
                //    appoint : {
                //        relatedTitle : "" ,
                //        relatedId : ""
                //    } ,
                //    item : item[0]
                //})
                //維度，添加預覽效果   以name id 的 形式显示
                obj.channelIdList = item.channelIdList;
                obj.dimensionIdList = item.dimensionIdList;

                $scope.vm.channel = item.channelIdList;
                $scope.vm.dimensionArr = [];
                //异步原因
                var getDimension = $interval(function () {
                    if ($scope.vm.dimensions) {
                        $interval.cancel(getDimension);
                        angular.forEach($scope.vm.dimensions, function (val) {
                            if (item.dimensionIdList.inArray(val.dimensionId)) {
                                var obj = {};
                                obj.dimensionName = val.dimensionName;
                                obj.dimensionId = val.dimensionId;
                                $scope.vm.dimensionArr.push(obj);
                                console.log($scope.vm.dimensionArr)
                            }
                        });
                    }
                }, 100);
                $scope.vm.question = item.knowledgeRelatedQuestionOn;   //显示相关问
                $scope.vm.tip = item.knowledgeBeRelatedOn; //在提示
                $scope.vm.tail = item.knowledgeCommonOn;   //弹出评价小尾巴
                //$scope.vm.appointRelativeGroup = item.knowledgeRelevantContentList ;  //业务扩展问
            });
        } else {
            init();
        }
        if ($stateParams.knowledgeTitle) {
            console.log("======" + $stateParams.knowledgeTitle);
            $scope.vm.title = $stateParams.knowledgeTitle;
        }
        function init() {
            $scope.vm.tableList = {
                "data": {"listTable": new Array(new Array("答案"))}
            };
            $scope.vm.listTableType = [];
            var newType = {};
            newType.elementName = "答案";
            newType.elementType = "字符串";
            newType.technology = null;
            newType.elementAsk = "";
            newType.relatedQuestions = null;
            $scope.vm.listTableType.push(newType);
            $scope.vm.tableList.data.listTableType = $scope.vm.listTableType;
            //$scope.$apply();
        }

        function tableChange(row, col, val) {
            $scope.vm.tableList.data.listTable[row][col] = val;
        }

        function tableRemove(type) {
            switch (type) {
                case 1:
                    if ($scope.vm.tableRow == 0) {
                        layer.msg("不可删除第一行")
                    } else if ($scope.vm.tableRow == null) {
                        layer.msg("请先选择要删除的行")
                    } else {
                        $scope.vm.tableList.data.listTable.splice($scope.vm.tableRow, 1);
                        $scope.vm.tableRow = null
                    }
                    break;
                case 2:
                    if ($scope.vm.tableColumn == 0) {
                        layer.msg("不可删除第一列")
                    } else if ($scope.vm.tableRow == null) {
                        layer.msg("请先选择要删除的列")
                    } else {
                        angular.forEach($scope.vm.tableList.data.listTable, function (item, tableRow) {
                            angular.forEach(item, function (val, index) {
                                if (index == $scope.vm.tableColumn) {
                                    $scope.vm.tableList.data.listTable[tableRow].splice(index, 1)
                                }
                            })
                        });
                        $scope.vm.tableList.data.listTableType.splice($scope.vm.tableColumn, 1)
                        $scope.vm.tableColumn = null
                    }
                    break;
            }
        }

        function addRow() {
            var len = $scope.vm.tableList.data.listTable[0].length;
            var arr = new Array(len);
            $scope.vm.tableList.data.listTable.push(arr);
        }

        //检验是否合理保存 ==> 检查要素名称以及反问
        function tableSaveCheck() {
            if (!$scope.vm.factorName) {
                layer.msg("请填写要素名称后保存")
            } else if (!$scope.vm.elementAsk) {
                layer.msg("请填写反问后保存")
            } else {
                ngDialog.closeAll(1)
            }
        }

        function pro_name(row, column) {
            $scope.vm.connectKnowCopy = angular.copy($scope.vm.connectKnow);
            //console.log($scope.vm.tableList)
            //console.log($scope.vm.tableList.data.listTable) ;
            //$scope.vm.connectKnow = [] ;
            if ($scope.vm.connectKnowCopy.length == 0) {
                angular.forEach($scope.vm.tableList.data.listTable, function (item, index) {
                    if (index > 0) {
                        //$scope.$apply(function(){
                        if (item[0] != null) {
                            $scope.vm.connectKnowCopy.push({
                                appoint: {
                                    relatedTitle: "",
                                    relatedId: ""
                                },
                                item: item[0]
                            }) ;
                        } else {
                            $scope.vm.connectKnowCopy.push({
                                appoint: {
                                    relatedTitle: "",
                                    relatedId: ""
                                },
                                item: ""
                            });
                        }
                    }
                });
            }
            console.log($scope.vm.connectKnowCopy);
            var dia = angular.element(".ngdialog ");
            if (dia.length == 0) {
                var dialog = ngDialog.openConfirm({
                    template: "/static/knowledgeManagement/recommendKnow/recommendDialog2.html",
                    width: "695px",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                        if (e === 1) {
                            angular.forEach($scope.vm.connectKnowCopy, function (item, index) {
                                if (!item.appoint.relatedTitle) {
                                    $scope.vm.connectKnowCopy[index].appoint.relatedId = "";
                                }
                            });
                            $scope.vm.connectKnow = angular.copy($scope.vm.connectKnowCopy);
                        }
                    }
                });
            }
        }

        function addList(row, column) {
            var dia = angular.element(".ngdialog ");
            if (dia.length == 0) {
                var dialog = ngDialog.openConfirm({
                    template: "/static/knowledgeManagement/recommendKnow/recommendDialog.html",
                    width: "695px",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {    //关闭回掉
                        if (e === 1) {
                            angular.forEach($scope.vm.tableList.data.listTable, function (item, index) {
                                if (index == 0) {
                                    $scope.vm.tableList.data.listTable[index].push($scope.vm.factorName)
                                } else {
                                    $scope.vm.tableList.data.listTable[index].push(null)
                                }
                            });
                            var newType = {
                                "elementName": $scope.vm.factorName,
                                "elementType": $scope.vm.tableType,
                                "technology": $scope.vm.gorithm,
                                "elementAsk": $scope.vm.elementAsk,
                                "relatedQuestions": null,
                            };
                            $scope.vm.tableList.data.listTableType.push(newType);
                            setDialogNew();
                        } else {
                            setDialogNew();
                        }
                    }
                });
            }
        }

        function editList(row, column) {
            $scope.vm.factorName = $scope.vm.tableList.data.listTableType[column].elementName;
            $scope.vm.tableType = $scope.vm.tableList.data.listTableType[column].elementType;
            console.log($scope.vm.tableList)
            $scope.vm.gorithm = $scope.vm.tableList.data.listTableType[column].technology;
            $scope.vm.elementAsk = $scope.vm.tableList.data.listTableType[column].elementAsk;
            var dialog = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/recommendKnow/recommendDialog.html",
                width: '695px',
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {    //关闭回掉
                    if (e === 1) {
                        $scope.vm.tableList.data.listTableType[column].elementName = $scope.vm.factorName;
                        $scope.vm.tableList.data.listTableType[column].elementType = $scope.vm.tableType;
                        $scope.vm.tableList.data.listTableType[column].technology = $scope.vm.gorithm;
                        $scope.vm.tableList.data.listTableType[column].elementAsk = $scope.vm.elementAsk;
                        $scope.vm.tableList.data.listTable[0][column] = $scope.vm.factorName;
                        setDialogNew();
                    } else {
                        setDialogNew();
                    }
                }
            });
        }

        function getTableParams() {
            if (!$scope.vm.tableList.data) {
                console.log("请上传表格知识");
                return false;
            } else {
                //console.log()
                var tabelData = angular.copy($scope.vm.tableList.data);
                //console.log(tabelData) ;
                var params = {};
                var ask = [];
                var items = [];
                // 反问
                angular.forEach(tabelData.listTableType, function (item, index) {
                    if (index > 0) {
                        var obj = {
                            "name": item.elementName,
                            "value": item.elementAsk
                        };
                        ask.push(obj);
                    }
                });
                angular.forEach(tabelData.listTable, function (item, icon) {
                    if (icon > 0) {
                        var row = {};
                        row.name = item[0];
                        if($scope.vm.connectKnow.length != 0){
                            var isExit = ($scope.vm.connectKnow[icon - 1] != undefined && $scope.vm.connectKnow[icon - 1].appoint != undefined)
                            console.log(isExit)
                            row.relatedTitle = isExit ? $scope.vm.connectKnow[icon - 1].appoint.relatedTitle : "";
                            row.relatedId = isExit ? $scope.vm.connectKnow[icon - 1].appoint.relatedId : "";
                        }else{
                            row.relatedTitle =  "";
                            row.relatedId = "";
                        }
                        row.slots = [];
                        angular.forEach(tabelData.listTableType, function (val, cur) {
                            if (cur > 0) {
                                var slot = {};
                                slot.name = val.elementName;
                                slot.value = tabelData.listTable[icon][cur];
                                slot.type = val.elementType;
                                slot.algorithm = val.technology;
                                row.slots.push(slot)
                            }
                        });
                        items.push(row)
                    }
                });
                params.asks = ask;
                params.items = items;
                return JSON.stringify(params)
            }
        }

        function setDialogNew() {
            $scope.vm.factorName = null;
            $scope.vm.tableType = "字符串";
            $scope.vm.gorithm = ['NLP'];
            $scope.vm.elementAsk = null;
        }

// 通过类目id 获取框架
        function getFrame(id) {
            httpRequestPost("/api/ms/modeling/frame/listbyattribute", {
                "frameCategoryId": id,
                "frameEnableStatusId": 1,
                "frameTypeId": 10013,
                "index": 0,
                "pageSize": 32767
            }, function (data) {
                //console.log(data);
                if (data.status != 10005) {
                    if (data.data.length) {
                        $scope.vm.frames = $scope.vm.frames.concat(data.data);
                        $scope.$apply();
                    }
                }
            }, function () {
                console.log("err or err")
            });
        }

        $scope.$watch("vm.frameCategoryId", function (val, old) {
            if (val && val != old) {
                getFrame(val)
            }
        });

        //replace()
        //  根據框架添加擴展問  --》 替換原來的條件
        $scope.$watch("vm.frameId", function (val, old) {
            if (val && val != old) {
                //if($scope.vm.extensions.length){
                //    //  替換條件
                //    replace(val);
                //}else{
                // 在未生成扩展问情況
                getTableListByFrame(val);
                //}
            }
        });

        // 通过frame 获取扩展问
        function getTableListByFrame(id, type) {
            //console.log(id);
            httpRequestPost("/api/ms/modeling/frame/listbyattribute", {
                "frameTypeId": 10013,
                "frameId": id,
                "index": 0,
                "pageSize": 32767
            }, function (data) {
                if (data.status == 10000) {
                    if (data.data[0].elements) {
                        $.each(data.data[0].elements, function (index, value) {
                            console.log("====" + value.elementContent);
                            var addFlag = true;
                            for (var i = 0; i < $scope.vm.tableList.data.listTable[0].length; i++) {
                                console.log("===" + $scope.vm.tableList.data.listTable[0][i]);
                                if ($scope.vm.tableList.data.listTable[0][i] == value.elementContent) {
                                    addFlag = false;
                                }
                            }
                            if (addFlag == true) {
                                $scope.vm.tableList.data.listTable[0].push(value.elementContent);
                                var newType = {};
                                newType.elementName = value.elementContent;
                                newType.elementType = switchContentType(value.elementTypeId);
                                var miningTypeArr = [];
                                miningTypeArr.push(switchMiningType(value.elementMiningTypeId));
                                newType.technology = miningTypeArr;
                                newType.elementAsk = value.elementAskContent;
                                newType.relatedQuestions = value.elementRelateConcept;
                                $scope.vm.tableList.data.listTableType.push(newType);
                                $scope.$apply();
                            }
                        });
                    }
                }
            }, function () {
                console.log("获取表格失败");
            });
        }

        function switchMiningType(type) {
            //var returnStr = "NLP";
            var returnStr = "";
            return returnStr;
        }

        function switchContentType(type) {
            var returnStr = "字符串";
            switch (type) {
                case 10014:
                    returnStr = "字符串";
                    break;
                case 10015:
                    returnStr = "日期";
                    break;
                case 10016:
                    returnStr = "范围";
                    break;
            }
            return returnStr;
        }

        // 获取Bot全路径
        function getBotFullPath(id) {
            httpRequestPost("/api/ms/modeling/category/getcategoryfullname", {
                categoryId: id
            }, function (data) {
                console.log(data);
                if (data.status = 10000) {
                    var allBot = angular.copy($scope.vm.creatSelectBot.concat($scope.vm.botClassfy)),
                        botResult = $scope.master.isBotRepeat(id, data.categoryFullName.split("/"), "", allBot);
                    $scope.$apply(function () {
                        console.log(data);
                        $scope.vm.knowledgeBotVal = data.categoryFullName;
                        if (botResult != false) {
                            //$scope.vm.knowledgeBotVal = data.categoryFullName.split("/");
                            $scope.vm.botFullPath = botResult;
                        }
                    });
                }
            }, function () {
                //console.log("添加扩展问失败")
            });
        }

////////////////////////////////////// ///         Bot     /////////////////////////////////////////////////////
        $scope.master.botTreeOperate($scope, "/api/ms/modeling/category/listbycategorypid", "/api/ms/modeling/category/listbycategorypid", getBotFullPath, "", ".originRootClassfy"
            //"/api/ms/modeling/category/searchbycategoryname"
        );
        //BOT搜索自动补全
        $scope.master.searchBotAutoTag(".originBotAuto", "/api/ms/modeling/category/searchbycategoryname", function (suggestion) {
            $scope.$apply(function () {
                var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)),
                    botResult = $scope.master.isBotRepeat(suggestion.data, suggestion.value.split("/"), suggestion.type, allBot);
                $scope.vm.knowledgeBotVal = suggestion.value;
                if (botResult != false) {
                    $scope.vm.botFullPath = botResult;
                }
            })
        });

        // 触发要素selectCall
        $scope.master.botTreeOperate($scope, "/api/ms/modeling/category/listbycategorypid", "/api/ms/modeling/category/listbycategorypid", function (id) {
                httpRequestPost("/api/ms/modeling/category/getcategoryfullname", {
                    categoryId: id
                }, function (data) {
                    console.log(data)
                    if (data.status = 10000) {
                        $scope.$apply(function () {
                            $scope.vm.strikeValue = {
                                id: id,
                                name: data.categoryFullName
                            }
                        });
                    }
                })
            }, "", ".strikeRootClassfy"
        );
        //BOT搜索自动补全
        //$scope.master.searchBotAutoTag(".strikeBotTagAuto","/api/ms/modeling/category/searchbycategoryname",function(suggestion){
        //    //getExtension(suggestion.data,$scope.vm.stirkeNumber,suggestion.value)
        //    $scope.$apply(function(){
        //    //    var allBot = angular.copy($scope.vm.botClassfy.concat($scope.vm.creatSelectBot)) ,
        //    //        botResult = $scope.master.isBotRepeat(suggestion.data,suggestion.value.split("/"),suggestion.type,allBot) ;
        //        $scope.vm.strikeValue = suggestion.value;
        //        //if(botResult != false){
        //        //    $scope.vm.strikeValue= botResult;
        //        //}
        //    })
        //});

        //添加BOT 分类  ==== 点击bot分类的 加号
        function botSelectAdd() {
            console.log($scope.vm.botFullPath);
            if ($scope.vm.botFullPath) {
                $scope.vm.creatSelectBot.push($scope.vm.botFullPath);
                $scope.vm.frameCategoryId = $scope.vm.botFullPath.classificationId;
                $scope.vm.botFullPath = null;
                $scope.vm.knowledgeBotVal = "";
                $(".icon-jj").eq(0).css("backgroundPosition", "0% 0%");
            }
        }

////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
        function replace(id) {
            var replace = ngDialog.openConfirm({
                template: "/static/knowledgeManagement/faq/replace.html",
                scope: $scope,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                backdrop: 'static',
                preCloseCallback: function (e) {     //关闭回掉
                    if (e === 1) {    //替换
                        getTableListByFrame(id, 1)
                    } else if (e === 0) {
                        // 添加不替换
                        getTableListByFrame(id, 0)
                    }
                }
            });
        }

        //function extensionEdit(type,item,index){
        //    //type  1 框架生成  0 手动添加
        //    $scope.vm.backupsOfExtension = angular.copy(item) ;
        //    console.log($scope.vm.backupsOfExtension) ;
        //    var dia = angular.element(".ngdialog ");
        //    if(dia.length==0){
        //        var extensionEdit = ngDialog.openConfirm({
        //            template:"/static/knowledgeManagement/public-html/extension_edit.html",
        //            width:"500px",
        //            scope: $scope,
        //            closeByDocument:false,
        //            closeByEscape: true,
        //            showClose : true,
        //            backdrop : 'static',
        //            preCloseCallback:function(e){     //关闭回掉
        //                if(e === 1){
        //                   if(type == 0){
        //                        $scope.vm.extensions[index] = $scope.vm.backupsOfExtension ;
        //                    }else if(type == 2){
        //                        $scope.vm.extensionByTitleTag[index] = $scope.vm.backupsOfExtension ;
        //                    }
        //                }else{$scope.vm.backupsOfExtension = ""; }
        //            }
        //        });
        //    }
        //}
        function slideDown() {
            $scope.vm.slideFlag = !$scope.vm.slideFlag;
            $(".senior_div").slideToggle();
            if ($scope.vm.slideFlag) {
                $(".senior_div").css('overflow', 'visible');
            }
        }

        /**
         * 校验标题和扩展问重复
         */
        function chackTitleAndextEnsionQuestion(title, ensionQuestionTitle) {
            console.log(title);
            console.log(ensionQuestionTitle);
            if (title != "") {
                if (title == ensionQuestionTitle) {
                    return false;
                } else {
                    return true;
                }
            }
            if (ensionQuestionTitle != "") {
                if (ensionQuestionTitle == title) {
                    return false;
                } else {
                    return true;
                }
                return false;
            }
        }

        ////根據 標題 生成 bot 跟 扩展问
        //function getBotAndExtensionByTitle(){
        //    if($scope.vm.title){
        //        httpRequestPost("/api/ms/elementKnowledgeAdd/byTitleGetClassify",{
        //            "title" :  $scope.vm.title,
        //            "applicationId": APPLICATION_ID ,
        //            "knowledgeId" : $scope.vm.knowledgeId
        //        },function(data){
        //            console.log(data);
        //            if(data.status == 500){    //标题打标失败
        //                $scope.vm.titleTip = "知识标题重复";
        //                $scope.$apply()
        //            }else if(data.status == 10002){
        //                $scope.vm.titleTip = data.info;
        //                $scope.$apply()
        //            } else if(data.status == 200){
        //                getExtension($scope.vm.title,"60",1) ; //生成扩展问
        //                $scope.$apply(function(){
        //                    //標題打标结果
        //                    $scope.vm.knowledgeTitleTag = data.data.knowledgeTitleTagList ;
        //                    $scope.vm.botClassfy = [];   //reset 标题生成bot
        //                    //添加校验是否添加校验  获取所有bot 验证是否重复
        //                    var allBot = angular.copy($scope.vm.creatSelectBot) ;
        //                    angular.forEach(data.data.classifyList, function (item) {
        //                        var botResult = $scope.master.isBotRepeat(item.id,item.fullPath,item.type,allBot) ;
        //                        if(botResult != false){
        //                            $scope.vm.botClassfy.push(botResult);
        //                        }
        //                        $scope.vm.frameCategoryId = item.id;
        //                    });
        //                });
        //            }
        //        },function(error){
        //            console.log(error)
        //        });
        //    }else{
        //        $scope.vm.titleTip = "知识标题不能为空"
        //    }
        //}
        //  主页保存 获取参数
        function getParams() {
            var params = {
                "applicationId": APPLICATION_ID,
                "knowledgeId": $scope.vm.knowledgeId,
                "userId": USER_ID,
                "sceneId": SCENE_ID,
                "knowledgeType": 107,
                "knowledgeTitle": $scope.vm.title,      //知识标题
                "knowledgeExpDateStart": $scope.vm.isTimeTable ? $scope.vm.timeStart : null,  //开始时间
                "knowledgeExpDateEnd": $scope.vm.isTimeTable ? $scope.vm.timeEnd : null,     //结束时间
                //"knowledgeTitleTag" : $scope.vm.knowledgeTitleTag,    //标题打标生成的name
                "knowledgeUpdater": USER_LOGIN_NAME, //操作人
                "knowledgeCreator": USER_LOGIN_NAME,  //操作人
                "knowledgeOrigin": $scope.vm.knowledgeOrigin
            };
            var obj = {};
            obj.knowledgeContent = getTableParams();
            obj.channelIdList = $scope.vm.channel;
            if (!$scope.vm.dimensionArr.id.length) {
                $scope.vm.dimensionArr = angular.copy($scope.vm.dimensionsCopy)
            }
            ;
            obj.dimensionIdList = $scope.vm.dimensionArr.id.length ? $scope.vm.dimensionArr.id : $scope.vm.dimensionsCopy.id;
            obj.knowledgeRelatedQuestionOn = $scope.vm.question;   //显示相关问
            obj.knowledgeBeRelatedOn = $scope.vm.tip; //在提示
            obj.knowledgeCommonOn = $scope.vm.tail;   //弹出评价小尾巴
            //obj.knowledgeRelevantContentList = $scope.vm.appointRelativeGroup;  //业务扩展问
            $scope.vm.scanContent = new Array(obj);
            params.knowledgeContents = angular.copy($scope.vm.scanContent);
            params.extensionQuestions = new Array({
                "extensionQuestionTitle": $scope.vm.strikeValue.id,
                "extensionQuestionType": $scope.vm.strikeNumber,
                "extensionQuestionName": $scope.vm.strikeValue.name
            });
            params.classificationAndKnowledgeList = $scope.vm.botClassfy.concat($scope.vm.creatSelectBot);
            return params
        }

        //限制一个知识多次保存
        var limitTimer;

        function save() {
            checkSave(function () {
                if (!$scope.vm.limitSave) {
                    $timeout.cancel(limitTimer);
                    $scope.vm.limitSave = true;
                    limitTimer = $timeout(function () {
                        $scope.vm.limitSave = false;
                    }, 180000);
                    $scope.vm.data = getParams();
                    var api = $scope.vm.knowledgeId ? "/api/ms/recommendMarketingKnowledge/editKnowledge" : "/api/ms/recommendMarketingKnowledge/addKnowledge";
                    httpRequestPost(api, getParams(), function (data) {
                        //console.log(data);
                        if (data.status == 200) {
                              console.log($stateParams)
                                    if($stateParams.data==''){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("新增知识已进入审核列表", {time:2000})
                                    }else if($stateParams.data&&angular.fromJson($stateParams.data).knowledgeBase.statusId==4){
                                        $state.go('knowledgeManagement.custOverview');
                                        layer.msg("编辑知识已进入审核列表", {time:2000})
                                    }
                                    else{
                                        $state.go('knowledgeManagement.custOverview');
                                    } 
                        } else if (data.status == 500) {
                            layer.msg(data.data);
                            $timeout.cancel(limitTimer);
                            $scope.$apply(function () {
                                $scope.vm.limitSave = false;
                            });
                            console.log($scope.vm.limitSave)
                        }
                    }, function (err) {
                        $timeout.cancel(limitTimer);
                        $scope.$apply(function () {
                            $scope.vm.limitSave = false;
                        });
                    });
                }
            })
        }

        function scan() {
            checkSave(function () {
                var obj = {};
                var params = getParams();
                //console.log(params);
                obj.params = params;
                obj.editUrl = "knowledgeManagement.recommendKnow";
                obj.knowledgeType = 107;
                obj.knowledgeId = $scope.vm.knowledgeId;
                if ($scope.vm.knowledgeId) {
                    //编辑
                    obj.api = "/api/ms/recommendMarketingKnowledge/editKnowledge";
                    params.knowledgeId = $scope.vm.knowledgeId;
                } else {
                    //新增
                    obj.api = "/api/ms/recommendMarketingKnowledge/addKnowledge"
                }
                $window.knowledgeScan = obj;
                var url = $state.href('knowledgeManagement.knowledgeScan');
                $window.open(url, '_blank');
            })
        };

        /* *********************              高级选项           **************************/ //

        //选择渠道
        function selectChannel(channelId) {
            if ($scope.vm.channel.inArray(channelId)) {
                $scope.vm.channel.remove(channelId);
            } else {
                $scope.vm.channel.push(channelId);
            }
        }

        //检验扩展问 (标题 类型)是否重复
        //function checkExtensionByTitle(item){
        //    var result ;
        //    //所有标题以及手动打标生成的扩展问
        //    var arr = $scope.vm.extensionByTitleTag.concat($scope.vm.extensions);
        //    if(!arr.length){
        //        result = true ;
        //    }else{
        //        var len = arr.length;
        //        angular.forEach(arr,function(val){
        //            if(val.extensionQuestionTitle == item.extensionQuestionTitle && val.extensionQuestionType == item.extensionQuestionType){
        //                len-=1 ;
        //                //console.log(val.extensionQuestionTitle == item.extensionQuestionTitle);
        //                result = false ;
        //            }
        //            if(len==arr.length){
        //                result = true ;
        //            }
        //        })
        //    }
        //    return  result ;
        //}
//        提交 检验参数
        function checkSave(callBack) {
            var params = getParams();
            console.log(params);
            if (!params.knowledgeTitle) {
                layer.msg("知识标题不能为空，请填写");
            } else {
                //判断出发要素是否存在于bot 中
                var isBotStrikeRepeat = false;
                angular.forEach(params.classificationAndKnowledgeList, function (item, index) {
                    if (params.extensionQuestions[0].extensionQuestionName == item.className.join("/")) {
                        isBotStrikeRepeat = true;
                        layer.msg("触发要素与BOT路径有重复请,返回修改");
                        return;
                    }
                });

                //httpRequestPost("/api/ms/recommendMarketingKnowledge/checkKnowledgeTitle",{
                //    "title" :  $scope.vm.title,
                //    "applicationId" : APPLICATION_ID,
                //    "knowledgeId" : $scope.vm.knowledgeId
                //},function(data) {
                //    if(!data.data){
                //        layer.msg("知识标题重复,请返回修改")
                //    }else{
                if (!params.classificationAndKnowledgeList.length) {
                    layer.msg("知识类目不能为空，请选择分类");
                    return false;
                } else if (isBotStrikeRepeat) {

                } else if (!params.knowledgeContents[0].channelIdList.length) {
                    layer.msg("渠道不能为空");
                    return false;
                } else if ($scope.vm.tableList.data.listTable[0].length <= 1 || $scope.vm.tableList.data.listTable.length <= 1) {
                    layer.msg("请完善表格知识");
                    return false;
                } else {
                    callBack();
                    //return true
                }
                //}
                //},function(err){console.log(err)})
            }

        }

        // 添加时候 存储对象
        //function saveScan(){
        //    var url = $state.go('custServScenaOverview.manage',{scanData:getParams()});
        //    window.open(url, '_blank');
        //}
//*************************************************************************
        function addAppoint(item, arr) {
            if (arr.indexOf(item) == -1) {
                arr.push(item)
            }
            $scope.vm.appointRelative = null;  //清楚title
            $scope.vm.appointRelativeList = [];  //清除 列表

        }

        // 動態加載 title
        $scope.$watch("vm.appointRelative", function (title) {
            //console.log(title);
            if (title) {
                $timeout(getAppointRelative(title), 300)
            }
        });

        function getAppointRelative(title) {
            httpRequestPost("/api/ms/recommendMarketingKnowledge/getKnowledgeTitle", {
                "title": title
            }, function (data) {
                if (data.status == 200) {
                    $scope.vm.appointRelativeList = data.data;
                    $scope.$apply()
                } else {
                }
                //console.log(data);
            }, function (err) {
                console.log("获取指定相关知识失败")
            });
        }

//******************* 2017/8/15  BEGIN   推荐知识对接修改 *******************//
        void function () {
            $scope.vm.allRelateTitle = {
                id: [],
                name: []
            };
            httpRequestPostParam("api/ms/recommendMarketingKnowledge/findKnowledgeTitle", {
                "applicationId": APPLICATION_ID,
                "knowledgeTitle": "",
                "knowledgeTypeList": "103"
            }, function (data) {
                if (data.status == 200 && data.data.length > 0) {
                    angular.forEach(data.data, function (item_all, index_all) {
                        $scope.vm.allRelateTitle.name.push(item_all.knowledgeTitle);
                        $scope.vm.allRelateTitle.id.push(item_all.knowledgeId);
                    });
                }
            })
        }();
        function bind(e, cur) {
            e = e || window.event;
            var srcObj = e.srcElement ? e.srcElement : e.target;
            var type = new Array("103");
            console.log(type.length);
            $(srcObj).on("input", function () {
                var val = $(srcObj).val();
                httpRequestPostParam("api/ms/recommendMarketingKnowledge/findKnowledgeTitle", {
                    "applicationId": APPLICATION_ID,
                    "knowledgeTitle": val,
                    "knowledgeTypeList": "103"
                }, function (data) {
                    if (data.status == 200 && data.data.length > 0) {
                        var html = "";
                        angular.forEach(data.data, function (item) {
                            html += "<li data-option='" + item.knowledgeId + "'>" + item.knowledgeTitle + "</li>"
                        });
                        $(srcObj).next().html(html);
                        console.log(html);
                        $(srcObj).next().on("click", "li", function () {
                            // $(this) 在 $apply 里边 会变 所有需要在外面赋值变量 ；
                            var title = $(this).html();
                            var id = $(this).attr("data-option");
                            $scope.$apply(function () {
                                $scope.vm.connectKnowCopy[cur].appoint.relatedTitle = title;
                                $scope.vm.connectKnowCopy[cur].appoint.relatedId = id;
                            });
                            console.log($(this).html(), $(this).attr("data-option"), $scope.vm.connectKnowCopy, cur);
                            $(srcObj).next().html("");
                        });
                        $(srcObj).on("blur", function () {
                            $timeout(function () {
                                $(srcObj).next().html("")
                            }, 200)
                        })
                    }

                }, function () {
                });
            });
        }

        //判断关联知识 是否 存在
        function isAppointKnowRight() {
            var result = true;
            console.log($scope.vm.connectKnowCopy);
            angular.forEach($scope.vm.connectKnowCopy, function (item, index) {
                if (item.item) {
                    var indexTitle = $scope.vm.allRelateTitle.name.indexOf(item.appoint.relatedTitle) ;
                    var indexId = $scope.vm.allRelateTitle.id.indexOf(item.appoint.relatedId) ;
                    if (item.appoint.relatedTitle && !item.appoint.relatedId) {
                        //var indexTitle = $scope.vm.allRelateTitle.name.indexOf(item.appoint.relatedTitle) ;
                        //var indexId = $scope.vm.allRelateTitle.id.indexOf(item.appoint.relatedId) ;
                        if(indexTitle!=-1 && indexId==-1){
                            $scope.vm.connectKnowCopy[index].appoint.relatedId = $scope.vm.allRelateTitle.id[indexTitle]
                        }else{
                            result = false;
                            layer.msg('请重新选择 "' + item.item + '" 的相关知识',{time:2000})
                        }
                    }else if(!item.appoint.relatedTitle ){
                        $scope.vm.connectKnowCopy[index].appoint.relatedId = "" ;
                        $scope.vm.connectKnowCopy[index].appoint.relatedTitle = "" ;
                    }else{
                        //var indexTitle = $scope.vm.allRelateTitle.name.indexOf(item.appoint.relatedTitle) ;
                        //var indexId = $scope.vm.allRelateTitle.id.indexOf(item.appoint.relatedId) ;
                        if(indexTitle!=-1 && indexId!=-1 &&indexTitle==indexId){
                        }else{
                            result = false ;
                            layer.msg('请重新选择 "' + item.item + '" 的相关知识',{time:2000})
                        }
                    }
                }else{
                    $scope.vm.connectKnowCopy[index].appoint.relatedId = "" ;
                    $scope.vm.connectKnowCopy[index].appoint.relatedTitle = "" ;
                }
            });
            if (result) {
                ngDialog.closeAll(1)
            }
            //httpRequestPostParam("api/ms/recommendMarketingKnowledge/findKnowledgeTitle",{
            //    "applicationId": APPLICATION_ID,
            //    "knowledgeTitle": title,
            //    "knowledgeTypeList": "103"
            //},function(data){
            //    if(data.status == 200 && data.data.length>0){
            //        var len = data.data.length ;
            //        angular.forEach(data.data,function(item){
            //            len -=1 ;
            //            //html+="<li data-option='"+ item.knowledgeId+"'>"+item.knowledgeTitle+"</li>"
            //            if(item.knowledgeTitle == title){
            //                ngDialog.closeAll(1) ;
            //                return ;
            //            }
            //        }) ;
            //        if(len == 0){
            //            layer.msg("添加相关知识不存在")
            //        }
            //    }else{
            //        layer.msg("添加相关知识不存在")
            //    }
            //})
        }

//        function isTitleRepeat(callBack){
//            httpRequestPost("/api/ms/recommendMarketingKnowledge/checkKnowledgeTitle",{
//                "title" :  $scope.vm.title,
//                "applicationId" : APPLICATION_ID,
//                "knowledgeId" : $scope.vm.knowledgeId
//            },function(data) {
//                if(!data.data){
//                    layer.msg("知识标题重复,请返回修改")
//                }else{
//                   callBack()
//                }
//                //if(callBack){
//                //    callBack()
//                //}
//                console.log(data);
//            },function(err){console.log(err)})
//        }
//*******************2017/8/15  END    推荐知识对接修改 *******************//
    }

]);
// Source: app/static/knowledgeManagement/js/directive/auto.js

knowledge_static_web.directive("autoComplete", function($compile,$timeout,$interval) {
    //fanhui   {id : [],name : []}
    return {
        //restrict: 'AE', //attribute or element
        //
        scope: {
            source: '=',
            result : '=',
            width : '='
            //bindAttr: '='
        },
        template:'<div class="miles-autoBar">' +
        '<div class="miles-container" style="height: auto;">' +
        '<div class="miles-resultItem L" ng-if="result.name" ng-repeat="val in result.name track by $index">' +
            '<i class="miles-remove" ng-click="removeItem($index,val)">x</i>' +
            '<span>{{val}}</span>' +
        '</div>' +
        '<input class="miles-autoInput L"  id="input" name="input" style="width:100%;" ng-focus="flag=true" type="text"/>' +
        '</div>' +
        '<label for="input"><ul ng-if="source.name&&source.name.length" class="miles-dropDown" ng-show="flag">' +
        '<li class="miles-item" ng-repeat="item in source.name track by $index" ng-click="addItem($index,item)">{{item}}</li>'+
        '</ul></label>' +
        '</div>',
        replace: true,
        //require: 'ngModel',
        link: function ($scope, elem, attr, ctrl) {
            $scope.search = " ";
            $scope.flag = false;
            //$scope.$apply(function(){
            var result = {};
            result.id = [];
            result.name = [];
            var source = {};
            source.id = [];
            source.name = [];
            var timer = $interval(function(){
                  if($scope.source){
                      $interval.cancel(timer);
                      angular.forEach($scope.source,function(item){
                          source.name.push(item.dimensionName);
                          source.id.push(item.dimensionId);
                          $scope.source = source;
                      });
                      //console.log($scope.result);
                      if($scope.result&&$scope.source.name){
                          //console.log($scope.result);
                          angular.forEach($scope.result,function(item){
                              $scope.source.name.remove(item.dimensionName);
                              $scope.source.id.remove(item.dimensionId);
                              result.name.push(item.dimensionName);
                              result.id.push(item.dimensionId)
                          });
                          $scope.result = result
                      }
                      //});
                      $scope.addItem = function(index,item){
                          $scope.result.name.push(item);
                          $scope.result.id.push($scope.source.id[index]);
                          $scope.source.name.splice(index,1);
                          $scope.source.id.splice(index,1);
                          $("#input").val("")
                      };
                      $scope.removeItem = function(index,item){
                          $scope.source.name.push(item);
                          $scope.source.id.push($scope.result.id[index]);
                          $scope.result.name.splice(index,1);
                          $scope.result.id.splice(index,1);
                          $("#input").val("")
                      };
                      $(document).on("click",function(event){
                          var event = event || window.event;
                          if($(event.target).attr('class')!= "miles-autoInput L"){
                              $scope.$apply(function(){
                                  $scope.flag = false;
                              })
                          }else{
                              $scope.flag = true;
                              angular.element(elem).find(".miles-autoInput").focus();
                          }
                          $("#input").val("")
                      });
                  }
              },100);
            console.debug($scope);
        }
    };
}).directive("tagAutoComplete", function($compile,$timeout,$interval) {
    ///输入  class 不重复   结果  返回
    return {
        restrict: 'AE', //attribute or element
        //
        scope: {
            source: '=',
            result : '=',
            width : '=' ,
        },
        template:'<input >' ,
        replace: true,
        //require: 'ngModel',
        link: function ($scope, elem, attr , ctrl) {
            $timeout(function(){
                $(elem).tagEditor({
                    initialTags:$scope.result,  //默认标签
                   //delimiter: ', ', /* space and comma */
                    //autocomplete: {delay: 0, position: {collision: 'flip'}},
                    forceLowercase: false ,
                    //placeholder: '输入内容点击enter添加您的标签 ...'
                    onChange: function(field, editor, tags) {
                        $scope.result = tags ;
                    },
                    beforeTagSave: function(field, editor, tags, tag, val) {
                        //保存之前的
                        //console.log(tags)
                    },
                    beforeTagDelete: function(field, editor, tags, val) {
                        //console.log(tags)
                    }
                });
            },0)
    }
    }
});


// Source: app/static/knowledgeManagement/js/directive/emotion.js
/**
 * Created by 41212 on 2017/7/15.
 */
knowledge_static_web.directive('emotion',function(){
    return{
        restrict:'EA',
        scope:{
            title:'=expanderTitle',
            value : '='      // 1  true   0  false
        },
        template: '<div class="b_box" ng-click="toggle()" ng-class="value?\'open1\':\'close1\'" style="float:left;margin-right:10px;">'+
        '<div class="s_box"  ng-class="value?\'open2\':\'close2\'"></div>'+
        '</div>',
        link:function(scope,element,attrs){
            //scope.$apply(function () {
            $('.emotion').qqFace({
                id : 'facebox',

                assign:'emotion-container',       //赋值对象

                path:'app/libs/qqFace/arclist/'	//表情存放的路径

            });

        }
    }
})
// Source: app/static/knowledgeManagement/js/directive/factorCheck.js
///**
// * Created by 41212 on 2017/4/11.
// */
//
//knowledge_static_web.directive("factorBox", function($parse) {
//    return {
//        restrict:'EA',
//        scope:{
//            defaults:'=',   // 1  true   0  false
//            //item  : '@'
//        },
//        // item  arr
//        template:
//        '<div class="my-checkbox" ng-click="toggle()">'+
//        '<label ng-class="defaults?\'\':\'my-checkbox-on\'"></label>'+
//        '</div>',
//        link:function(scope,element,attrs){
//            //scope.flag=true;
//            //attrs.arr = $parse(attrs.arr);
//            //scope.arr = $parse(attrs.arr);
//
//            scope.toggle=function toggle(){
//                //if(scope.flag){
//                //    console.log(typeof attrs.arr);
//                //    attrs.arr.push(attrs.item)
//                //}else{
//                //    attrs.arr.remove(attrs.item)
//                //};
//                scope.defaults = scope.defaults?0:1;;
//
//
//            }
//        }
//    }
//});

// Source: app/static/knowledgeManagement/js/directive/gateway_menu.js
/**
 * Created by mileS on 2017/4/12.
 */

knowledge_static_web.directive("gatewayMenu", function () {
    return {
        restrict: "AE",
        scope: {},
        link: function ($scope, elem, attrs) {
            elem.click(function () {
                $('.popup_span').show();
                if (attrs.gatewayMenu == 'file')
                    $(".import_from_txt").css('visibility', 'visible');
                else if (attrs.gatewayMenu == 'single')
                    $(".add_single_popup").css('visibility', 'visible');
                else if (attrs.gatewayMenu == 'adapter')
                    $(".jr_Agent").show();
            })
        }
    }
});

knowledge_static_web.directive('plupload', ['$timeout',"$cookieStore","$state",
    function ($timeout,$cookieStore,$state) {
    return {
        restrict: 'A',
        link: function ($scope, iElm, iAttrs, controller) {
            var uploader = new plupload.Uploader({
                runtimes: 'html4,html5,flash,silverlight',
                browse_button: 'pickfiles',
                url: 'noturl',
                //container: document.getElementById('filelist'),
                //container: $('#filelist'),
                multi_selection: true,
                filters: {
                    max_file_size: '10mb',
                    mime_types: [{
                        title: "Know File",
                        extensions: "docx"
                    }]
                },
                flash_swf_url: '/plupload/Moxie.swf',
                silverlight_xap_url: '/plupload/Moxie.xap',
                init: {
                    PostInit: function () {
                        $('#uploadfiles').click(function () {
                            var params = {
                                //这里设置上传参数
                                templateId:$scope.targetId,
                                requestId:"String",
                                //设置用户信息
                                userName: USER_LOGIN_NAME
                            };
                            if ($scope.processMethod == true) {
                                if (!$scope.targetId || $scope.targetId == null) {
                                     layer.msg("请选择加工模板");
                                    return;
                                }
                            }
                            uploader.setOption('multipart_params', params);
                            uploader.setOption('url', '/api/ms/knowledgeDocumentation/createDocumentation');
                            uploader.start();
                            return false;
                        });

                        $('#reset').click(function () {
                            if (uploader.files.length > 0) {
                                for (var i = uploader.files.length; i > 0; i--) {
                                    uploader.removeFile(uploader.files[i - 1]);
                                }
                            }
                            $scope.$apply($scope.resetUploadPOJO());
                        })
                    },

                    FilesAdded: function (up, files) {
                        plupload.each(files, function (file) {

                                if(file.name.length>=24){
                                    layer.msg("文件名称过长,请返回修改") ;
                                    up.removeFile(file);
                                }else{
                                    //$scope.$apply(function(){
                                        $('#file_container').append('<div class="file_con" id="' + file.id + '"style="overflow:hidden;padding: 0px;">' +
                                            '<span  class="name">' + file.name + '</span>' +
                                            '<b class="progress" style="font-size: 14px;line-height: 33px;margin-left: 15px; height: inherit; width: 40px;">0%</b>' +
                                            '<span class="size"> (' + plupload.formatSize(file.size) + ') </span>' +
                                            '</div>');
                                    //}) ;
                                    //if (up.files.length > 1) {
                                    //    up.removeFile(file);
                                    //}
                                }
                            //document.getElementById('file_container').innerHTML += '<div class="file_con" id="' + file.id + '"style="overflow:hidden"><span  class="name">' + file.name + '</span><b class="progress">0%</b><span class="size"> (' + plupload.formatSize(file.size) + ') </span></div>';

                        });
                    },
                    FilesRemoved: function (up, files) {
                        plupload.each(files, function (file) {
                            if (up.files.length <= 0) {
                                //document.getElementById('file_container').innerHTML = '';
                                $('#file_container').html('');
                            }
                        });
                    },

                    UploadProgress: function (up, file) {
                        //alert(up) ;
                        //document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = '<span>' + file.percent + "%</span>";
                        $('#' + file.id).find('b').html('<span>' + file.percent + '%</span>');
                    },

                    Error: function (up, err) {
                        console.log("Error #" + err.code + ": " + err.message);
                    },

                    UploadComplete: function (uploader, files) {
                        //alert("success")
                    },

                    FileUploaded: function (uploader, files, res) {
                        $state.reload()
                        //$scope.vm.queryKnowDocList();
                        $('#file_container').html('');
                        //$scope.vm.resetUploadPOJO();
                        $('.template_inpt').val("");
                        if (res.status == 200){
                            $('.popup_wrap').hide();
                            $('.popup_span').hide();
                            $(".import_from_txt").css('visibility', 'hidden');
                            $(".add_single_popup").css('visibility', 'hidden');
                        }
                    }
                }
            });
            uploader.init();
        }
    };
}]);

knowledge_static_web.directive('tempPlupload', ['$timeout',"$location","$state", function ($timeout,$location,$state) {
    return {
        restrict: 'A',
        //template : '<span></span>'  ,
        link: function ($scope, iElm, iAttrs, controller) {
            var uploader = new plupload.Uploader({
                runtimes: 'html4,html5,flash,silverlight',
                browse_button: 'tempickfile',
                url:'/api/ms/template/createTemplate',
                //container: 'temcontainer',
                max_file_count: 10,
                multi_selection: false,
                filters: {
                    max_file_size: '10mb',
                    mime_types: [{
                        title: "Know File",
                        extensions: "docx"
                    }]
                },
                flash_swf_url: '/plupload/Moxie.swf',
                silverlight_xap_url: '/plupload/Moxie.xap',
                init: {
                    PostInit: function () {
                        $('#temupload').on("click",function () {
                            if ($scope.vm.temName == null || $scope.vm.temName == '' || !$scope.vm.temName) {
                                 layer.msg("请输入模板名称");
                                return;
                            }
                            if ($scope.vm.temName.length > 20) {
                                 layer.msg("模板名称不能大于20字");
                                return;
                            }
                            if (!$scope.vm.temNameChecked) {
                                 layer.msg("模板名校验失败");
                                return;
                            }
                            if (uploader.files.length <= 0) {
                                 layer.msg("请选择上传文件");
                                return;
                            }
                            uploader.setOption('multipart_params', {
                                "type": $scope.vm.temType,
                                "templateName": $scope.vm.temName,
                                "requestId":"String",
                                //此处设置上传用户信息
                                "userId":USER_LOGIN_NAME
                            });
                            uploader.start() ;
                            return false;
                        });
                        $('#temreset').on("click",function () {
                            if (uploader.files.length > 0) {
                                for (var i = uploader.files.length; i > 0; i--) {
                                    uploader.removeFile(uploader.files[i - 1]);
                                }
                            }
                        })
                    },
                    FilesAdded: function (up, files) {
                        plupload.each(files, function (file) {
                           if(file.name.length>=24){
                               layer.msg("文件名称过长,请返回修改") ;
                               up.removeFile(file);
                           }else{
                               $scope.$apply(function(){
                                   $scope.vm.fileName = file.name  ;
                               }) ;
                               if (up.files.length > 1) {
                                   up.removeFile(file);
                               }
                           }
                        });
                    },

                    FilesRemoved: function (up, files) {
                        plupload.each(files, function (file) {
                            if (up.files.length <= 0) {
                                $scope.$apply(function(){
                                    $scope.vm.fileName = '未选择文件'  ;
                                }) ;
                            }
                        });
                    },
                    UploadProgress: function (up, file) {
                        $scope.$apply(function(){
                            $scope.vm.progress = file.percent  ;
                        }) ;
                    },
                    Error: function (up, err) {
                        $scope.$apply(function(){
                            $scope.vm.progress = 0  ;
                        }) ;
                        uploader.init();
                    },

                    UploadComplete: function (uploader, files) {

                    },
                    FileUploaded: function (uploader, files, res) {
                        if (res.status == 200) {
                            //var res = res.replace(/<.*?>/ig,"")
                            var response = JSON.parse(res.response.replace(/<.*?>/ig,""));
                            if (response.status == 200) {
                                layer.msg("模板文件上传成功，请添加规则");
                                $location.$$absUrl = $location.$$absUrl + response.data.templateId ;
                                $scope.$apply(function () {
                                    $scope.vm.isTempUpToolsShow = false;//隐藏保持相关按钮
                                    $scope.vm.templateId = response.data.templateId;
                                    $scope.storeParams($scope.temId);
                                })
                            } else {
                                $scope.$apply(function(){
                                    $scope.vm.progress = 0  ;
                                }) ;
                                uploader.removeFile(uploader.files[0]);
                                layer.msg("模板文件上传失败,请重新选择文件");
                            }
                        }
                    }
                }
            });
            uploader.init();
        }
    };
}]);

// knowledge_static_web.directive('sinPlupload', ['$timeout', function ($timeout) {
//     return {
//         restrict: 'A',
//         link: function ($scope, iElm, iAttrs, controller) {
//             var uploader = new plupload.Uploader({
//                 runtimes: 'html4,html5,flash,silverlight',
//                 browse_button: 'sinpickfile',
//                 url: '/back/knowaccess/docimport/docmanager/singleImport',
//                 // container: 'test',
//                 max_file_count: 1,
//                 multi_selection: false,
//                 filters: {
//                     max_file_size: '10mb',
//                     mime_types: [{
//                         title: "Know File",
//                         extensions: "doc,docx"
//                     }]
//                 },
//                 // flash_swf_url: '/plupload/Moxie.swf',
//                 // silverlight_xap_url: '/plupload/Moxie.xap',
//                 init: {
//                     PostInit: function () {
//                         //document.getElementById('sinupload').onclick = function() {
//                         $('#sinupload').click(function () {
//                             if (!$scope.sinKnowItemTitle || $scope.sinKnowItemTitle == '' || $scope.sinKnowItemTitle == null) {
//                                  layer.msg("知识条目标题不能为空");
//                                 return;
//                             }
//                             if (!$scope.sinKnowItemContent || $scope.sinKnowItemContent == '' || $scope.sinKnowItemContent == null) {
//                                  layer.msg("知识条目内容不能为空");
//                                 return;
//                             }
//                             uploader.setOption('multipart_params', {
//                                 title: $scope.sinKnowItemTitle,
//                                 content: $scope.sinKnowItemContent,
//                                 libraryId: $scope.uploadLibraryId,
//                                 ontologys: $scope.classifyId
//                             });
//                             if (uploader.files.length > 0) {
//                                 uploader.start();
//                             } else {
//                                 $scope.noFileSinUpload();
//                             }
//                             return false;
//                         });
//
//                         //document.getElementById('sinreset').onclick = function(){
//                         $('#sinreset').click(function () {
//                             if (uploader.files.length > 0) {
//                                 for (var i = uploader.files.length; i > 0; i--) {
//                                     uploader.removeFile(uploader.files[i - 1]);
//                                 }
//                             }
//                             $scope.$apply($scope.resetSinPOJO());
//                         })
//                     },
//
//                     FilesAdded: function (up, files) {
//                         plupload.each(files, function (file) {
//                             //document.getElementById('sincontainer').innerHTML = '<div class="file_con" id="' + file.id + '"style="overflow:hidden"><span  class="name">' + file.name + '</span><b class="progress">0%</b><span class="size"> </span></div>';
//                             $('#sincontainer').html('<span class="file_con" id="' + file.id + '"style="overflow:hidden"><span  class="name">' + file.name + '</span><b class="progress">0%</b><span class="size"> </span></span>');
//                             if (up.files.length <= 1) {
//                                 return;
//                             }
//                             up.removeFile(file);
//                         });
//                     },
//
//                     FilesRemoved: function (up, files) {
//                         plupload.each(files, function (file) {
//                             if (up.files.length <= 0) {
//                                 //document.getElementById('sincontainer').innerHTML = '';
//                                 $('#sincontainer').html('');
//                             }
//                         });
//                     },
//
//                     UploadProgress: function (up, file) {
//                         //document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = '<span>' + file.percent + "%</span>";
//                         $('#' + file.id).find('b').html('<span>' + file.percent + '%</span>');
//                     },
//
//                     Error: function (up, err) {
//                         console.log("Error #" + err.code + ": " + err.message);
//                     },
//
//                     UploadComplete: function (uploader, files) {
//
//                     },
//
//                     FileUploaded: function (uploader, files, res) {
//                         if (res.status == 200) {
//                             $('.popup_wrap').hide();
//                             $('.popup_span').hide();
//                             $(".import_from_txt").css('visibility', 'hidden');
//                             $(".add_single_popup").css('visibility', 'hidden');
//
//                             $scope.queryKnowDocList();
//                             //document.getElementById('sincontainer').innerHTML = '';
//                             $('#sincontainer').html('');
//                             $scope.resetSinPOJO();
//                         }
//                     }
//                 }
//             });
//             uploader.init();
//         }
//     };
// }]);

knowledge_static_web.directive("advanceMenu", function () {
    return {
        restrict: "AE",
        scope: {},
        link: function ($scope, elem, attrs) {
            elem.click(function (e) {
                var e = e || window.event;
                e.stopPropagation();
                if ($('.advan_search_div').is(':hidden')) {
                    $('.advan_search_div').show();
                    $('.advan_search').addClass('on');
                } else {
                    $('.advan_search_div').hide();
                    $('.advan_search').removeClass('on');
                }
            });
        }
    }
});

knowledge_static_web.directive("advansearchdiv", function () {
    return {
        restrict: "AE",
        scope: {},
        link: function ($scope, elem, attrs) {
            elem.click(function (e) {
                var e = e || window.event;

                $(this).show();
                e.stopPropagation();
            });
            $(document).click(function () {
                elem.hide();
            })
        }
    }
});


// src \app\static\knowledgeManagement\document_know_process\main_container.html
// For 选择模板名称
knowledge_static_web.directive("templateInput", function () {
    return {
        restrict: "AE",
        link: function ($scope, elem, attrs) {
            elem.click(function (e) {
                var ev = e || window.event;
                $('.template_con').show();
                ev.stopPropagation();
            }) ;
            $(document).click(function () {
                $('.template_con').hide();
            })
        }
    }
});
//模板选择 存储id
knowledge_static_web.directive("templateCon", function () {
    return {
        restrict: "AE",
        link: function ($scope, elem, attrs) {
            elem.click(function (e) {
                var ev = e || window.event;
                ev.stopPropagation();
            }) ;
            $scope.$on('onRenderFinish', function (event) {
                $('.template_con tbody tr').click(function () {
                    var value = $(this).find('td').eq(1).html();
                    var id = $(this).find('td').eq(3).html();
                    $('.template_inpt').val(value);
                    $scope.$parent.targetId = $scope.targetId = id;
                    $(this).parents('.template_con').hide();
                })
            });
        }
    }
});



//模板选择 关闭按钮
knowledge_static_web.directive("closeMenu", function () {
    return {
        restrict: "AE",
        scope: {},
        link: function ($scope, elem, attrs) {
            elem.click(function () {
                $('.popup_wrap').hide();
                $('.popup_span').hide();
                $(".import_from_txt").css('visibility', 'hidden');
                $(".add_single_popup").css('visibility', 'hidden');
            });
        }
    }
});

//================================================================================= no-use ==========================================================//
knowledge_static_web.directive("processMethodMenu", function () {
    return {
        restrict: "AE",
        link: function ($scope, elem, attrs) {
            var pFun = attrs.processMethodMenu;
            elem.click(function () {
                if ($scope.processMethod == false) {
                    $('#modelSelect').show();
                    $('#modelAdd').show();
                    $scope.queryTemplate();
                } else {
                    $('#modelSelect').hide();
                    $('#modelAdd').hide();
                }
            })
        }
    }
});
knowledge_static_web.directive("mouldShowMenu", function () {
    return {
        restrict: "AE",
        scope: {},
        link: function ($scope, elem, attrs) {
            elem.change(function () {
                if ($(this).val() == "模板加工") {
                    $(this).next().show();
                }
            })
        }
    }
});
knowledge_static_web.directive("onOff", function () {
    return {
        restrict: "AE",
        scope: {
            updateAdStatus: '&upfunction'
        },
        link: function ($scope, elem, attrs) {
            // var att = attrs.onOff.split(",");
            // var status = att[0];
            // var id = att[1]

            elem.click(function () {
                if ($(this).hasClass('on_off_active')) {
                    $(this).removeClass("on_off_active")
                } else {
                    $(this).addClass("on_off_active")
                }
                $scope.updateAdStatus();

            })
        }
    }
});


/**
 * ztree下拉树控件,文档上传，单条添加
 */
knowledge_static_web.directive("dropDownMenuByZtree", function () {
    return {
        restrict: "AE",
        scope: {
            // updoctype:'='
        },
        link: function ($scope, elem, attrs) {
            var setting = {
                check: {
                    enable: true,
                    chkboxType: {"Y": "", "N": ""}
                },
                view: {
                    dblClickExpand: false
                },
                data: {
                    simpleData: {
                        enable: true
                    }
                },
                callback: {
                    beforeClick: beforeClick,
                    onCheck: onCheck
                }
            };

            //  layer.msg(attrs.dropDownMenuByZtree);
            var split = attrs.dropDownMenuByZtree;
            var arr = split.split(",");
            var citySel = arr[0];
            var menuContent = arr[1];
            var treeDemo = arr[2];

            function beforeClick(treeId, treeNode) {
                var zTree = $.fn.zTree.getZTreeObj(treeDemo);
                zTree.checkNode(treeNode, !treeNode.checked, null, true);
                return false;
            }

            function onCheck(e, treeId, treeNode) {
                var zTree = $.fn.zTree.getZTreeObj(treeDemo);
                var nodes = zTree.getCheckedNodes(true);
                var selectLocation = '';
                //获取父节点-------------------------------------
                if (nodes != null && nodes != undefined && nodes.length > 0) {
                    for (var m = 0; m < nodes.length; m++) {
                        var curLocation = "";//当前位置
                        var allNode = nodes[m]['name'];//获取当前选中节点
                        var node = nodes[m].getParentNode();
                        getParentNodes(node, allNode);

                        var location = "";
                        var nodeArrs = curLocation.split("->");
                        for (var i = nodeArrs.length - 1; i >= 0; i--) {
                            location += nodeArrs[i] + "->";
                        }
                        location = location.substring(0, location.lastIndexOf("->"));
                        //  layer.msg(location);
                        selectLocation += location + ",";
                    }

                } else {
                    selectLocation = '';
                    $scope.$parent.classifyId = '';
                }

                function getParentNodes(node, allNode) {
                    if (node != null) {
                        allNode += "->" + node['name'];
                        var curNode = node.getParentNode();
                        getParentNodes(curNode, allNode);
                    } else {
                        //根节点
                        curLocation = allNode;
                    }
                };

                if (selectLocation.length > 0) selectLocation = selectLocation.substring(0, selectLocation.length - 1);

                if ($.trim(selectLocation) != '' && selectLocation != null) {
                    $scope.$parent.classifyId = selectLocation;
                }
                // console.log($scope.$parent.classifyId);
                //---------------------------------------

                var v = "";
                // var nodeId = "";
                for (var i = 0, l = nodes.length; i < l; i++) {
                    v += nodes[i].name + ",";
                    // nodeId += nodes[i].id + ",";
                }
                if (v.length > 0) v = v.substring(0, v.length - 1);
                // if (nodeId.length > 0 ) nodeId= nodeId.substring(0, nodeId.length-1);//节点id（oec的分类id）
                //文档导入
                var cityObj = $("#" + citySel);
                cityObj.attr("value", v);
                // if(nodeId.length > 0){
                //     $scope.$parent.classifyId = nodeId;
                //     console.log($scope.$parent.classifyId);
                // }

            }

            //展开节点(暂未使用）
            function expandNode(e) {
                var zTree = $.fn.zTree.getZTreeObj(treeDemo),
                    type = e.data.type,
                    nodes = zTree.getSelectedNodes();
                if (type.indexOf("All") < 0 && nodes.length == 0) {
                     layer.msg("请先选择一个父节点");
                }

                if (type == "expandAll") {
                    zTree.expandAll(true);
                } else if (type == "collapseAll") {
                    zTree.expandAll(false);
                } else {
                    var callbackFlag = $("#callbackTrigger").attr("checked");
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        zTree.setting.view.fontCss = {};
                        if (type == "expand") {
                            zTree.expandNode(nodes[i], true, null, null, callbackFlag);
                        } else if (type == "collapse") {
                            zTree.expandNode(nodes[i], false, null, null, callbackFlag);
                        } else if (type == "toggle") {
                            zTree.expandNode(nodes[i], null, null, null, callbackFlag);
                        } else if (type == "expandSon") {
                            zTree.expandNode(nodes[i], true, true, null, callbackFlag);
                        } else if (type == "collapseSon") {
                            zTree.expandNode(nodes[i], false, true, null, callbackFlag);
                        }
                    }
                }
            }

            elem.click(function () {
                // var cityObj = $("#"+citySel);
                // var cityOffset = $("#"+citySel).offset();
                $("#" + menuContent).css({left: "130px", top: "143px"}).slideDown("fast");
                $("body").bind("mousedown", onBodyDown);
            });

            function hideMenu() {
                $("#" + menuContent).fadeOut("fast");
                $("body").unbind("mousedown", onBodyDown);
            }

            function onBodyDown(event) {
                if (!(event.target.id == "menuBtn" || event.target.id == citySel || event.target.id == menuContent || $(event.target).parents("#" + menuContent).length > 0)) {
                    hideMenu();
                }

            }

            // $.fn.zTree.init($("#treeDemo"), setting, zNodes);
            //向控制器发送消息，进行菜单数据的获取
            $scope.$emit("menu", attrs["value"]);//此处attrs["value"]为ul中的value值，此处作为标记使用
            //接受控制器返回的菜单的消息
            $scope.$on("menuData", function (event, data) {
                $.fn.zTree.init($("#" + treeDemo), setting, data);//进行初始化树形菜单
                // $.fn.zTree.init($("#treeDemo2"), setting, data);//进行初始化树形菜单
                // $("#treeDemo_1_switch").bind("click", {type:"toggle"}, expandNode);
                // $("#collapseBtn").bind("click", {type:"collapse"}, expandNode);
            });
        }
    }
});



// Source: app/static/knowledgeManagement/js/directive/logininput.js

knowledge_static_web.directive("loginInput", function() {
    return {
        restrict: "AE",
        link: function(scope, elem, attrs) {
            elem.on("focus",function(e){
                $(this).parents(".login-fItem").addClass("focus");
            }).on("blur",function(){
                $(this).parents(".login-fItem").removeClass("focus");
            });
        }
    }     
})
.directive('switch',function(){
    return{
        restrict:'EA',
        scope:{
            title:'=expanderTitle',
            value : '='      // 1  true   0  false
        },

        template: '<div class="b_box" ng-click="toggle()" ng-class="value?\'open1\':\'close1\'" style="float:left;margin-right:10px;">'+
                            '<div class="s_box"  ng-class="value?\'open2\':\'close2\'"></div>'+
                   '</div>',
        link:function(scope,element,attrs){
            //scope.$apply(function () {
                scope.toggle=function toggle(){
                    scope.value = scope.value?0:1;
                };
            //});

        }
    }
})
.directive('switchTurn',function(){
        return{
            restrict:'EA',
            scope:{
                title:'=expanderTitle',
                value : '='      // 1  true   0  false
            },

            template: '<div class="b_box" ng-click="toggle()" ng-class="value==10001?\'open1\':\'close1\'" style="float:left;margin-right:10px;">'+
            '<div class="s_box"  ng-class="value==10001?\'open2\':\'close2\'"></div>'+
            '</div>',
            link:function(scope,element,attrs){
                //scope.$apply(function () {
                scope.toggle=function toggle(){
                    scope.value = (scope.value==10001?10002:10001)
                };
                //});

            }
        }
})

// Source: app/static/knowledgeManagement/js/directive/processKnowShow.js
/**
 * @Author : MILES .
 * @Create : 2017/11/6.
 * @Module : 流程知识显示隐藏右边的节点操作
 */
knowledge_static_web.directive("isOperationShow", function() {
    return {
        restrict: "AE",
        link: function(scope, elem, attrs) {
            elem.mouseover(function(){
                $(this).children("ul").show();
            }) ;
            elem.mouseleave(function(){
                //$(this).children("ul").stop().slideUp();
                $(this).children("ul").stop().hide();
            }) ;
        }
    }
})
.directive("isArrowShow", function() {
    return {
        restrict: "AE",
        link: function(scope, elem, attrs) {
            // 0=close 1=open 2=toggle
            elem.click(function(){
                if(attrs.isArrowShow=="0"){
                    $(".right_popup_div").hide();
                    $(".arrow").removeClass("act");
                }else if(attrs.isArrowShow=="1"){
                    $(".right_popup_div").show();
                    $(".arrow").addClass("act");
                }else if(attrs.isArrowShow=="2"){
                    if($(".right_popup_div").is(":hidden")){
                        $(".right_popup_div").show();
                        $(".arrow").addClass("act");
                    }else{
                        $(".right_popup_div").hide();
                        $(".arrow").removeClass("act");
                    }
                }
            });
        }
    }
})
// Source: app/static/knowledgeManagement/js/directive/strikeNum.js
/**
 * @Author : MILES .
 * @Create : 2017/9/9.
 * @Module :
 */
knowledge_static_web.directive("strikeNum", function() {
    return {
        restrict:'EA',
        require:'^ngModel',
        link: function (scope,element,attr,ngModelController) {
            function isNumber(oNum){

                if(!oNum) return false;

                var strP=/^\d+$/; //正整数

                if(!strP.test(oNum)) return false;

                return true;
            }
            var num = attr.strikeNum?attr.strikeNum:5;
            console.log(num)
            scope.$watch('vm.strikeNumber', function (val,oldVal) {//更新模板上的viewValue
                if(val<1){
                    scope.vm.strikeNumber = 1
                }else if(val>num){
                    scope.vm.strikeNumber = num
                }else{
                    if(!isNumber(val)){
                        scope.vm.strikeNumber = parseInt(val)
                    }
                    //scope.vm.strikeNumber = scope.vm.strikeNumber.replace(/^[0-9]*$/g,'')
                }
            }) ;
            //var rotateX= function (modelValue) {
            //    var modelValue=parseInt(modelValue)||0;
            //    var value="rotateX("+modelValue*3+"deg)";
            //    return {
            //        dis:value
            //    };
            //};
            //var rotateY= function (modelValue) {
            //    var modelValue=parseInt(modelValue)||0;
            //    var value="rotateY("+modelValue*3+"deg)"
            //    return {
            //        dis:value
            //    }
            //};
            //var rotateZ= function (modelValue) {
            //    var modelValue=parseInt(modelValue)||0;
            //    var value="rotateZ("+modelValue*3+"deg)";
            //    return {
            //        dis:value
            //    }
            //};
            ////scope.dis=30;
            //ngModelController.$formatters.push(rotateZ);//modelValue到viewValeu之间的通信。
            //ngModelController.$render= function () {//把viewModel渲染到模板中
            //    scope.dis=ngModelController.$viewValue.dis;
            //    $(element).find("span").css("-webkit-transform",scope.dis)
            //};
            //scope.$watch('dis', function () {//更新模板上的viewValue
            //    ngModelController.$setViewValue({
            //        dis:scope.dis
            //    })
            //})
        }
    }
})
// Source: app/static/knowledgeManagement/js/directive/upload.js
/**
 * Created by 41212 on 2017/4/14.
 */
//uploader    https://my.oschina.net/u/3354666/blog/858285
//    http://blog.csdn.net/lai_xu/article/details/49535847
knowledge_static_web.directive('myUpload', function (FileUploader) {
    var helper = {
        getType: function (name) {
            return '|' + name.slice(name.lastIndexOf('.') + 1) + '|';
        },
        /*
         type 类型
         closeMsg  true 关闭提示
         */
        isImage: function (type, closeMsg) {
            if ('|jpg|png|jpeg|bmp|gif|'.indexOf(type.toLowerCase()) !== -1) {
                return true;
            } else {
                if (!closeMsg) {
                    layer.alert("请确定文件格式为|jpg|png|jpeg|bmp|gif|", { icon: 7 });
                    return false;
                }
            }
        },
        isDoc: function (type, closeMsg) {
            if ('|doc|docx|txt|'.indexOf(type.toLowerCase()) !== -1) {
                return true;
            } else {
                if (!closeMsg) {
                    layer.alert("请确定文件格式为|doc|docx|txt|", { icon: 7 });
                    return false;
                }
            }
        },
        isVideo: function (type, closeMsg) {
            if ('|rm|rmvb|avi|mp4|3gp|'.indexOf(type.toLowerCase()) !== -1) {
                return true;
            } else {
                if (!closeMsg) {
                    layer.alert("请确定文件格式为|rm|rmvb|avi|mp4|3gp|", { icon: 7 });
                    return false;
                }
            }
        },
        isMp3: function (type, closeMsg) {
            if ('|mp3|'.indexOf(type.toLowerCase()) !== -1) {
                return true;
            } else {
                if (!closeMsg) {
                    layer.alert("请确定文件格式为|mp3|", { icon: 7 });
                    return false;
                }
            }
        },
        isZip: function (type, closeMsg) {
            if ('|zip|rar|'.indexOf(type.toLowerCase()) !== -1) {
                return true;
            } else {
                if (!closeMsg) {
                    layer.alert("请确定文件格式为|zip|rar|", { icon: 7 });
                    return false;
                }
            }
        },
        //检查尺寸是否符合规范
        uploadImgCheckedPx: function (f, w, h, msg, callback) {
            if (w && h) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    //判断图片尺寸
                    var img = null;
                    img = document.createElement("img");
                    document.body.appendChild(img);
                    img.style.visibility = "hidden";
                    img.src = this.result;
                    var imgwidth = img.naturalWidth;
                    var imgheight = img.naturalHeight;
                    if (imgwidth != w || imgheight != h) {
                        document.body.removeChild(img);
                        if (msg) {
                            msg += ">";
                        } else {
                            msg = "";
                        }
                        //询问框
                        layer.confirm(msg + "尺寸建议" + w + "x" + h + "，确定上传吗？", {
                            btn: ['确定', '取消'],
                            cancel: function () {
                                callback && callback(false);
                            }
                        }, function (index) {
                            layer.close(index);
                            callback && callback(true);
                        }, function () {
                            callback && callback(false);
                        });
                    } else {
                        callback && callback(true);
                    }
                };
                if (f)
                    reader.readAsDataURL(f);
            } else {
                callback && callback(true);
            }
        }
    };
    return {
        restrict: 'E',
        replace: true,
        scope: {
            filters: '@filters',
            response: '=response',
            size: '=size',
            callback: '@callback',
            width: '@width',
            height: '@height',
            msg: '@msg'
        },
        template: '<input type="file"  nv-file-select="" uploader="uploader" filters="{{filters}}" />',
        link: function (scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                scope.$apply(function () {
                    scope.selectedFile = changeEvent.target.files[0];
                    var type = helper.getType(scope.selectedFile.name);
                    if (helper.isImage(type, true)) {
                        helper.uploadImgCheckedPx(scope.selectedFile, scope.width, scope.height, scope.msg, function (state) {
                            if (state)
                                scope.uploader.uploadAll();
                            else
                                scope.uploader.clearQueue();
                        });
                    } else {
                        scope.uploader.uploadAll();
                    }
                });
            });
        },
        controller: function ($scope) {
            var uploader = $scope.uploader = new FileUploader({
                url: '/api/application/application/uploadHead',
                autoUpload: true,//自动上传
                removeAfterUpload: true,//文件上传成功之后从队列移除，默认是false
                queueLimit: 1// 最大上传文件数量
            });
            //文件限制提示语
            var showMsg = function (itemSize, maxSize) {
                if (itemSize / 1024 >= maxSize) {
                    layer.alert("文件大小必须小于" + (maxSize).toFixed(0) + "KB", { icon: 7 });
                    return false;
                }
                $scope.size = itemSize;
                return true;
            };
            // FILTERS
            uploader.filters.push({
                    name: 'imageFilter',
                    fn: function (item /*{File|FileLikeObject}*/, options) {
                        if (!showMsg(item.size, 4096)) {
                            return false;
                        }
                        var type = helper.getType(item.name);
                        return helper.isImage(type) && this.queue.length < 5;
                    }
                },
                {
                    name: 'docFilter',
                    fn: function (item /*{File|FileLikeObject}*/, options) {
                        if (!showMsg(item.size, 3072)) {
                            return false;
                        }
                        var type = helper.getType(item.name);
                        return helper.isDoc(type);
                    }
                },
                {
                    name: 'videoFilter',
                    fn: function (item /*{File|FileLikeObject}*/, options) {
                        if (!showMsg(item.size, 204800)) {
                            return false;
                        }
                        var type = helper.getType(item.name);
                        return helper.isVideo(type);
                    }
                },
                {
                    name: 'mp3Filter',
                    fn: function (item /*{File|FileLikeObject}*/, options) {
                        if (!showMsg(item.size, 20480)) {
                            return false;
                        }
                        var type = helper.getType(item.name);
                        return helper.isMp3(type);
                    }
                },
                {
                    name: 'zipFilter',
                    fn: function (item /*{File|FileLikeObject}*/, options) {
                        if (!showMsg(item.size, 20480)) {
                            return false;
                        }
                        var type = helper.getType(item.name);
                        return helper.isZip(type);
                    }
                });
            // CALLBACKS

            uploader.onWhenAddingFileFailed = function (item, filter, options) {
                console.info('onWhenAddingFileFailed', item, filter, options);
            };
            uploader.onAfterAddingFile = function (fileItem) {
                console.info('onAfterAddingFile', fileItem);
            };
            uploader.onAfterAddingAll = function (addedFileItems) {
                console.info('onAfterAddingAll', addedFileItems);
            };
            uploader.onBeforeUploadItem = function (item) {
                console.info('onBeforeUploadItem', item);
            };
            uploader.onProgressItem = function (fileItem, progress) {
                console.info('onProgressItem', fileItem, progress);
            };
            uploader.onProgressAll = function (progress) {
                console.info('onProgressAll', progress);
            };
            uploader.onSuccessItem = function (fileItem, response, status, headers) {
                console.info('onSuccessItem', fileItem, response, status, headers);
                if (response.indexOf("error") == -1) {
                    $scope.response = response;
                    if ($scope.callback) {
                        $scope.$emit($scope.callback, response);
                    }
                }
                else {
                    layer.alert(response, { icon: 2 });
                }
            };
            uploader.onErrorItem = function (fileItem, response, status, headers) {
                console.info('onErrorItem', fileItem, response, status, headers);
            };
            uploader.onCancelItem = function (fileItem, response, status, headers) {
                console.info('onCancelItem', fileItem, response, status, headers);
            };
            uploader.onCompleteItem = function (fileItem, response, status, headers) {
                console.info('onCompleteItem', fileItem, response, status, headers);
            };
            uploader.onCompleteAll = function () {
                console.info('onCompleteAll');
            };
        }
    };
});
// Source: app/static/knowledgeManagement/js/directive/uploadHandle.js

/**
 * Created by miles on 2017/5/27.
 *
 * webuploader  ====》》  指令
 */

knowledge_static_web.directive("uploaderFactor", ["$parse", function($parse) {
    return {
        restrict:'EA',
        scope:{
            accept:'=',
            server : '='   , //url
            //item  : '@'
            type : "="   ,   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
            isAuto : "=",
            selectBtn : "=",
            "tableList" : "="
        },
        template:
            '<span  id="picker" style="float:left">上传线下编辑场景知识</span><span class="f-14 pl-10" style="float:left;margin-top: 5px;">请先<a href="/api/ms/elementKnowledgeAdd/download?fileName=factor_template.xlsx"  class="c-primary">下载模板</a>进行填写</span>'
        ,
        link:function(scope,element,attrs){
            //var $list = angular.element("#thelist");
            var server = angular.copy(scope.server) ;
            var uploader = WebUploader.create({
                auto: true, // 选完文件后，是否自动上传
                // swf文件路径
                swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                server: "/api/ms/elementKnowledgeAdd/upload",
                //accept: {
                //    title: 'file',
                //    extensions: 'xls,xlsx',
                //    mimeTypes: 'file/*'
                //},
                // 选择文件的按钮。可选。
                // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                pick: '#picker',
                // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                //resize: false,
                //chunked: true,  // 分片上传大文件
                //chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                //thread: 100,// 最大上传并发数
                //// 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                //disableGlobalDnd: true,
                //
                //fileNumLimit: 1,
                //fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                //fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
            });
            uploader.on( 'fileQueued', function( file ) {
                console.log(file + "file  add success");
            });
            uploader.on( 'uploadProgress', function( file, percentage ) {
                var $li = $( '#'+file.id ),
                    $percent = $li.find('.progress .progress-bar');
                // 避免重复创建
                if ( !$percent.length ) {
                    $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                        '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                        '</div> ' +
                        '</div>').appendTo( $li ).find('.progress-bar');
                }
                $li.find('p.state').text('上传中');
                $percent.css( 'width', percentage * 100 + '%' );
                console.log(percentage);
            });
            uploader.on('uploadError', function (file) {
                console.log("上传失败")
            });
            uploader.on('uploadSuccess', function (file,response) {
                if(response.status == 500){
                    layer.msg("模板错误")
                }else{
                    scope.tableList = response ;
                    scope.$apply();
                }
                console.log(response)
            });

        }
    }
}])
    .directive("uploaderHandle2", ["$parse", function($parse) {
        return {
            restrict:'EA',
            scope:{
                accept:'=',
                server : '='   , //url
                //item  : '@'
                type : "="   ,   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
                isAuto : "=",
                selectBtn : "="
            },
            template:'<div id="uploader" class="wu-example upWrapper">'+
                //<!--用来存放文件信息-->
            '<div id="thelist" class="uploader-list upList"></div>'+
            '<div class="btns">'+
            '<div id="picker">上传线下编辑场景知识</div>' +
            '<button id="ctlBtn" clas="btn btn-default">开始上传</button>'+
            '</div>'+
            '</div>'
            ,
            link:function(scope,element,attrs){
                console.log(scope.selectBtn);
                var $list = angular.element("#thelist");
                var uploader = WebUploader.create({
                    auto: true, // 选完文件后，是否自动上传
                    // swf文件路径
                    swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                    formData : {title:"is Image  ====   uploader"}  ,   // 上传参数
                    // 文件接收服务端。
                    server: "/api/application/application/uploadHead",
                    accept: {
                        title: 'file',
                        extensions: 'xls,xlsx',
                        mimeTypes: 'file/*'
                    },
                    // 选择文件的按钮。可选。
                    // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                    pick: '#picker',
                    // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                    resize: false,
                    chunked: true,  // 分片上传大文件
                    chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                    thread: 100,// 最大上传并发数
                    // 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                    disableGlobalDnd: true,

                    fileNumLimit: 300,
                    fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                    fileSingleSizeLimit: 50 * 1024 * 1024    // 50 M   single
                });
                //// 当有文件被添加进队列的时候
                //uploader.on( 'fileQueued', function( file ) {
                //    $list.append( '<div id="' + file.id + '" class="item">' +
                //        '<h4 class="info">' + file.name + '</h4>' +
                //        '<p class="state">等待上传...</p>' +
                //        '</div>' );
                //});
                //// 文件上传过程中创建进度条实时显示。
                //uploader.on( 'uploadProgress', function( file, percentage ) {
                //    var $li = $( '#'+file.id ),
                //        $percent = $li.find('.progress .progress-bar');
                //    // 避免重复创建
                //    if ( !$percent.length ) {
                //        $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                //            '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                //            '</div>' +
                //            '</div>').appendTo( $li ).find('.progress-bar');
                //    }
                //    $li.find('p.state').text('上传中');
                //    $percent.css( 'width', percentage * 100 + '%' );
                //    console.log(percentage);
                //});
                ////文件上传成功
                //uploader.on('uploadSuccess', function (file) {
                //    $('#' + file.id).find('p.state').text('已上传');
                //});
                ////文件上传失败
                //uploader.on('uploadError', function (file) {
                //    $('#' + file.id).find('p.state').text('上传失败');
                //});
                ////文件上传完成
                //uploader.on('uploadComplete', function (file) {
                //    $('#' + file.id).find('.progress').fadeOut();
                //    //$("#editModal").fadeOut(2000, window.location.reload());
                //});
                //
                //$('#btnSave').bind('click', function () {
                //    var  name = $("#txtName").val();
                //    var  id = $("#txtId").val();
                //
                //    if (!name || name.length == 0) {
                //        alert("请填写名称");
                //        return false;
                //    }
                //    var obj = new Object();
                //    obj.name = name;
                //    obj.id = id;
                //    uploader.options.formData = obj;
                //    //  uploader.options.formData = { "name": name, "id": id, };
                //    if (state === 'uploading') {
                //        uploader.stop();
                //    } else {
                //        uploader.upload();
                //    }
                //});
            }
        }
    }])


knowledge_static_web.directive("uploaderHandle3", ["$parse",  "$cookieStore" ,
    function($parse,$cookieStore) {
        return {
            restrict:'EA',
            scope:{
                accept:'=',
                server : '='   , //url
                //item  : '@'
                type : "="   ,   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
                isAuto : "=",
                selectBtn : "=",
                "tableList" : "=" ,
                userId : "=" ,
                applicationId : "="
            },
            template:
                '<button  id="picker">选择文件</button>'
            ,
            link:function(scope,element,attrs){
                var userId = scope.userId ,
                    applicationId = scope.applicationId ;
                //var $list = angular.element("#thelist");
                var server = angular.copy(scope.server) ;
                var uploader = WebUploader.create({
                    auto: true, // 选完文件后，是否自动上传
                    // swf文件路径
                    swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                    formData : {"userId":userId,"applicationId":applicationId,"userName":$cookieStore.get("userName")}  ,   // 上传参数
                    // 文件接收服务端。
                    //server: "/api/application/application/uploadHead",

                    server: "/api/ms/chatKnowledge/upload",
                    //accept: {
                    //    title: 'file',
                    //    extensions: 'xls,xlsx',
                    //    mimeTypes: 'file/*'
                    //},
                    // 选择文件的按钮。可选。
                    // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                    pick: '#picker',
                    // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                    //resize: false,
                    //chunked: true,  // 分片上传大文件
                    //chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                    //thread: 100,// 最大上传并发数
                    //// 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                    //disableGlobalDnd: true,
                    //
                    //fileNumLimit: 1,
                    //fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                    //fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
                });
                uploader.on( 'fileQueued', function( file ) {
                    console.log(file + "file  add success");
                });
                uploader.on( 'uploadProgress', function( file, percentage ) {
                    var $li = $( '#'+file.id ),
                        $percent = $li.find('.progress .progress-bar');
                    // 避免重复创建
                    if ( !$percent.length ) {
                        $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                            '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                            '</div> ' +
                            '</div>').appendTo( $li ).find('.progress-bar');
                    }
                    $li.find('p.state').text('上传中');
                    $percent.css( 'width', percentage * 100 + '%' );
                    console.log(percentage);
                });
                uploader.on('uploadError', function (file) {
                    console.log("上传失败")
                });
                uploader.on('uploadSuccess', function (file,response) {
                    console.log(response) ;
                    if(response.status == 500){
                        layer.msg("模板错误")
                    }else if(response.status==10001){
                        layer.msg("导入失败")
                    }else {
                        layer.msg("导入成功")
                    }


                });

            }
        }
    }])

    /*
     $scope.accept = {
     //图片
     image: {
     title : 'Images',//标题
     extensions : 'gif,jpg,jpeg,bmp,png,ico',//允许上传文件的后缀
     mimeTypes : 'image/*'//允许的mimetype
     },
     //音视频
     video: {
     title : 'Videos',
     extensions : 'wmv,asf,asx,rm,rmvb,ram,avi,mpg,dat,mp4,mpeg,divx,m4v,mov,qt,flv,f4v,mp3,wav,aac,m4a,wma,ra,3gp,3g2,dv,vob,mkv,ts',
     mimeTypes : 'video/*,audio/*'
     },
     //flash
     flash: {
     title : 'Flashs',
     extensions : 'swf,fla',
     mimeTypes : 'application/x-shockwave-flash'
     },
     //办公文档，压缩文件等等
     file: {
     title : 'Files',
     extensions : 'zip,rar,ppt,pptx,doc,docx,xls,xlsx,pdf',
     mimeTypes : 'application/zip,application/x-rar-compressed,application/vnd.ms-powerpoint,application/vnd.openxmlformats-             officedocument.presentationml.presentation,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-   excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/pdf'
     }
     };
     */
// 实例化
//var uploader = WebUploader.create({
//    //指定选择文件的按钮容器
//    //multiple是否开启多文件上传，默认为true
//    pick : {
//        id : '#filePicker',
//        //label : '点击选择图片'
//        innerHTML: '点击选择' + $scope.selectType[items.type],
//        multiple: true
//    },
//    //指定拖拽的容器
//    dnd : '#uploader .queueList',
//    //启用通过截屏来粘贴图片
//    paste : document.body,
//    //指定接受哪些类型的文件
//    accept : items.accept[items.type],
//
//    // swf文件路径
//    swf : 'Uploader.swf',
//
//    disableGlobalDnd : true,
//    //是否分片
//    chunked : true,
//    //chunkSize: 700000,  //每个分片的大小，默认为5M
//    // server: 'http://webuploader.duapp.com/server/fileupload.php',
//    server : '../demo',
//    //文件最大数量
//    fileNumLimit : 30,
//    //验证文件总大小是否超出限制
//    fileSizeLimit : 5 * 1024 * 1024, // 200 M
//    //验证单个文件大小是否超出限制
//    fileSingleSizeLimit : 1 * 1024 * 1024
//    // 50 M
//});
    .directive("knowBatchUp", ["$parse", "ngDialog", "$cookieStore", "$state", "$timeout","$interval",
        function ($parse, ngDialog, $cookieStore, $state, $timeout,$interval) {
            return {
                scope:{
                    accept:'=',
                    server : '@'   , //url
                    //item  : '@'
                    type : "="   ,   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
                    isAuto : "=",
                    templateType : "=",
                    fileName : "="
                },
                template:   '<div style="overflow: hidden">'+
                                '<span style="float: left" id="picker">选择文件</span>' +
                                '<span style=" margin-left: 10px; float: left; color:#fff;line-height: 22px;" class="btn1 btn_green"  ng-click="upload()">上传</span>' +
                             '</div>',

                link: function (scope, element, attrs) {
                    $timeout(function () {
                        var uploader = WebUploader.create({
                            auto: false, // 选完文件后，是否自动上传
                            // swf文件路径
                            swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                            formData : {
                                "userId":USER_ID,
                                "applicationId":APPLICATION_ID
                                //"templateType": scope.templateType
                            }  ,   // 上传参数
                            // 文件接收服务端。
                            server: scope.server ,
                            accept: {
                                title: 'file',
                                extensions: 'xls,xlsx',
                                mimeTypes: 'file/*'
                            },
                            // 选择文件的按钮。可选。
                            // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                            pick : {
                                id : '#picker',
                                //label : '点击选择图片'
                                //innerHTML: '点击选择'
                                multiple: false
                            },
                            // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                            resize: false,
                            chunked: true,  // 分片上传大文件
                            chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                            thread: 100,// 最大上传并发数
                            // 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                            disableGlobalDnd: true,
                            fileNumLimit: 2,
                            fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                            fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
                        });
                        scope.upload = function(){
                            uploader.options.formData.templateType = scope.templateType ;
                            uploader.upload()
                        } ;
                        uploader.on( 'beforeFileQueued', function( file ) {
                            uploader.reset();
                        }) ;
                        uploader.on( 'fileQueued', function( file ) {
                            //uploader.reset();
                            //console.log(uploader.getfiles())
                            scope.$apply(function(){
                                scope.fileName=file.name;
                            })
                        });
                        //当validate不通过时，会以派送错误事件的形式通知
                        uploader.on('error', function (type) {
                            switch (type) {
                                case 'Q_EXCEED_NUM_LIMIT':
                                    layer.msg("错误：上传文件数量过多！");
                                    break;
                                case 'Q_EXCEED_SIZE_LIMIT':
                                    layer.msg("错误：文件总大小超出限制！");
                                    break;
                                case 'F_EXCEED_SIZE':
                                    layer.msg("错误：文件大小超出限制！");
                                    break;
                                case 'Q_TYPE_DENIED':
                                    layer.msg("错误：禁止上传该类型文件！");
                                    break;
                                case 'F_DUPLICATE':
                                    layer.msg("错误：请勿重复上传该文件！");
                                    break;
                                default:
                                    layer.msg('错误代码：' + type);
                                    break;
                            }
                        });
                        uploader.on('uploadProgress', function (file, percentage) {
                            //var $li = $('#' + file.id),
                            //    $percent = $li.find('.progress .progress-bar');
                            //// 避免重复创建
                            //if (!$percent.length) {
                            //    $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                            //        '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                            //        '</div> ' +
                            //        '</div>').appendTo($li).find('.progress-bar');
                            //}
                            //$li.find('p.state').text('上传中');
                            //$percent.css('width', percentage * 100 + '%');
                            //console.log(percentage);
                        });
                        uploader.on('uploadError', function (file,reason) {
                            console.log("上传失败");
                            layer.msg('请检查'+reason);
                            console.log(reason);         //失败原因;

                        });
                        //uploader.on('all', function (type) {
                        //    if (type === 'startUpload') {
                        //        state = 'uploading';
                        //    } else if (type === 'stopUpload') {
                        //        state = 'paused';
                        //    } else if (type === 'uploadFinished') {
                        //        state = 'done';
                        //    }
                        //
                        //    if (state === 'uploading') {
                        //        $btn.text('暂停上传');
                        //    } else {
                        //        $btn.text('开始上传');
                        //    }
                        //});
                        //
                        //$btn.on('click', function () {
                        //    if (state === 'uploading') {
                        //        uploader.stop();
                        //    } else {
                        //        uploader.upload();
                        //    }
                        //});
                        //        单个文件上传成功 之后 刷新数据列表
                        uploader.on('uploadSuccess', function (file, response) {
                            console.log(response) ;
                            if(response.status == 500){
                                layer.msg("模板错误")
                            }else if(response.status==10001){
                                layer.msg("导入失败")
                            }else {
                                layer.msg("导入成功")
                            }
                        });
                        //console.log(scope.templateType)
                        //scope.$watch("templateType",function(type){
                        //    console.log(uploader) ;
                        //    uploader.options.formData.templateType = type ;
                        //})
                    }, 0)
                }
            }
        }]) ;
// Source: app/static/knowledgeManagement/js/filter/channelAndDimension.js
/**
 * Created by 41212 on 2017/4/19.
 */
angular.module('knowledge_static_web').filter('channel', function () {
    return function (value,params) {
        var result;
        angular.forEach(params,function(item){
            if(value == item.channelCode){
                result = item.channelName
            }
        });
        return result
    };
})
.filter('dimension', function () {
    return function (value,params) {
        var result;
        angular.forEach(params,function(item){
            if(value == item.dimensionId){
                result = item.dimensionName
            }
        });
        return result
    };
});
// Source: app/static/knowledgeManagement/js/filter/channerFilter.js
/**
 * Created by 41212 on 2017/4/19.
 */
angular.module('knowledge_static_web').filter('channel', function () {
    return function (value,params) {
        var result;
        angular.forEach(params,function(item){
            if(value == item.channelCode){
                result = item.channelName
            }
        });
        return result
    };
});
angular.module('knowledge_static_web').filter('dimension', function () {
    return function (value,params) {
        var result;
        angular.forEach(params,function(item){
            if(value == item.dimensionId){
                result = item.dimensionName
            }
        });
        return result
    };
});
// Source: app/static/knowledgeManagement/js/filter/classType.js
/**
 * Created by 41212 on 2017/4/28.
 */
//SensitiveConcept(40, "敏感概念"),
//    StopConcept(41, "停用概念"),
//    ErrorCorrectionConcept(42, "纠错概念"),
//    ThesaurusConcept(43, "同义概念"),
//    CollectiveConcept(44, "集合概念"),
//    BusinessConcept(45, "业务概念"),
//    ForceSegmentConcept(46, "强制分词概念"),
//    SemanticExpressionConcept(47, "语义表达式概念"),
angular.module('knowledge_static_web').filter('classType', function () {
    return function (value) {
        switch(value){
            case 40 :
                return "敏感概念"
                break;
            case 41 :
                return "停用概念"
                break;
            case 42 :
                return "纠错概念"
                break;
            case 43 :
                return "同义概念"
                break;
            case 44 :
                return "集合概念"
                break;
            case 45 :
                return "业务概念"
                break;
            case 46 :
                return "强制分词概念"
                break ;
            case 47 :
                return "语义表达式概念"
                break
        }

    };
});
// Source: app/static/knowledgeManagement/js/filter/emotion.js
/**
 * Created by miles on 2017/7/15.
 * @For 表情添加
 */
angular.module('knowledge_static_web').filter('emotion', function () {
    return function (str) {
            //str = str.replace(/\</g,'&lt;');
            //
            //str = str.replace(/\>/g,'&gt;');

            str = str.replace(/\n/g,'<br/>');

            str = str.replace(/\[em_([0-9]*)\]/g,'<img src="/libs/qqFace/arclist/$1.gif" border="0" />');

            return str;
    }
}).filter('faceToString', function () {
    return function (face) {
        var regex = new RegExp('<img src="/libs/qqFace/arclist/([0-9]*).gif" border="0">', "g");
        face = face.replace(regex, "[em_$1]");
        //console.log(face)
        return face;
        //face = face.replace(/<img [^>]*src=['"][^'"]+(\d+).[gif,png][^>]*>/gi, "[em_$1]") ;
        //console.log(face) ;
        //return face;
    }
}).filter('toHtml',["$sce",function ($sce) {
    return function (text) {
        return $sce.trustAsHtml(text);
    };
}] );
// Source: app/static/knowledgeManagement/js/filter/numberToWord.filter.js
/**
 * Created by 41212 on 2017/4/28.
 */

angular.module('knowledge_static_web').filter('numberToWord', function () {
    return function (number) {
        var array = ["一", "二", "三", "四","五", "六", "七", "八", "九", "十"];
        var result = null ;
        if (number != '') {
            angular.forEach(array,function(item,index){
                if(index==(number-1)){
                    result = item;
                }
            })
        }
        return result
    }
});
// Source: app/static/knowledgeManagement/js/filter/processKnow.js
/**
 * @Author : MILES .
 * @Create : 2017/11/7.
 * @Module :
 */
// 标题名称
angular.module('knowledge_static_web').filter('showBotTitle', function () {
    return function (value,title) {
        var result ;
        if(title){
           result = title
        }else{
            httpRequestPostAsync("/api/ms/modeling/category/getcategoryfullname",{
                "categoryId":value
            },function(response){
                result = response.categoryFullName ;
            })
        }
        return result ;
    }
}).filter('showNodeName', function ($timeout) {
    return function (nodeNo,arr) {
            var result = null ;
            if(nodeNo != null ){
                nodeNo = parseInt(nodeNo) ;
                result = arr[nodeNo].nodeName ;
            }
            return result ;
    }
});

// Source: app/static/knowledgeManagement/js/server/docManageServer.js
/**
 * Created by dell on 2017/8/5.
 */
angular.module('knowledgeManagementModule').factory('KnowDocService',['$resource',function ($resource) {
    var knowDocService = {};
    knowDocService.queryKnowDocList = $resource('/api/ms/knowledgeDocumentation/queryDocumentationList', {}, {});
    knowDocService.queryDetailByDocId = $resource('/api/ms/knowledgeDocumentation/selectDocumentationKnowledge', {}, {});
    knowDocService.deleteKnowDoc = $resource('/api/ms/knowledgeDocumentation/deleteDocumentation', {}, {});
    return knowDocService;
}]).factory('DetailService',['$resource',function ($resource) {
    var detailService = {};
    //֪ʶ�ĵ�
    //��ѯ�ĵ�֪ʶ����
    detailService.queryKnowDocByDocId = $resource('/api/ms/knowledgeDocumentation/selectDocumentationById', {}, {});
    //��ѯ�ĵ�֪ʶ��
    detailService.queryDocKnowItems = $resource('api/ms/knowledgeDocumentation/selectDocumentationKnowledgeList', {}, {});
    //�����ĵ�ȫ��֪ʶ��
    detailService.ignoreDocKnowAll = $resource('api/ms/knowledgeDocumentation/ignoreDocumentationKnowledgeAll', {}, {});
    //�����ĵ�����֪ʶ��
    detailService.ignoreDocKnow = $resource('api/ms/knowledgeDocumentation/ignoreDocumentationKnowledge', {}, {});
    return detailService;
}]).factory('TemplateService',['$resource',function ($resource) {
    var templateService = {};
    templateService.queryTemplate = $resource('/api/ms/template/queryTemplate', {}, {});
    templateService.deleteTemplate = $resource('/api/ms/template/deleteTemplate', {}, {});
    templateService.queryRules = $resource('/api/ms/templateRule/queryAllRule', {}, {});
    templateService.queryTemplateById = $resource('/api/ms/template/queryTemplate', {}, {});
    templateService.generateRule = $resource('/api/ms/templateRule/getJuniorText', {}, {});
    templateService.getSimilarText = $resource('/api/ms/templateRule/getSimilarText', {}, {});
    templateService.optimizeText = $resource('/api/ms/templateRule/optimizeText', {}, {});
    templateService.queryTemplateContent = $resource('/api/ms/template/previewKnowDoc', {}, {});
    templateService.addWordRule = $resource('/api/ms/templateRule/addWordRule', {}, {});
    templateService.updateWordRule = $resource('/api/ms/templateRule/updateWordRule', {}, {});
    templateService.checkTemName = $resource('/api/ms/template/searchByTemplateName', {}, {});
    templateService.deleteRule = $resource('/api/ms/templateRule/deleteWordRule', {}, {});
    templateService.queryRuleById = $resource('/api/ms/templateRule/queryRuleById', {}, {});
    return templateService;
}])
// Source: app/static/knowledgeManagement/js/server/knowledgeAddServer.js
/**
 * Created by 41212 on 2017/4/24.
 */
//(function() {
angular.module("knowledgeManagementModule").service("knowledgeAddServer", knowledgeAddServer);
    knowledgeAddServer.$injector = ["$resource"];
    function knowledgeAddServer($resource) {
        var services = {
            getDimensions: getDimensions,
            getChannels : getChannels ,
            getFrame : getFrame    ,
            faqSave : faqSave,
            conceptGetExtensionByDialogTitle : conceptGetExtensionByDialogTitle,
            getDataServer : getDataServer
        };
        return services;


        //统一使用 方法
        //url, data, sucCallBack,falCallback, needToken, ajaxType,timeout,timeoutCall
        function getDataServer(url ,params, onSuccess, onError ,needToken, ajaxType,timeout,timeoutCall) {
            var url = url;
            var header = {
                'Accept': 'text/plain,text/html,application/json',
                'Content-Type': 'application/json'
            };
            var _resource = $resource(url, {}, {
                create: {
                    method: ajaxType?ajaxType:'POST',
                    params: {},
                    timeout: timeout?timeout:10000, //超时时间设置为10秒；
                    headers: header,
                    //interceptor: {
                    //    response: function (d) {
                    //        console.log(d);
                    //    },
                    //    responseError: function (d) {
                    //        console.log(d);
                    //    }
                    //}
                }
            });
            return _resource.create(JSON.stringify(params)).$promise.then(onSuccess, onError);
        }


        function getDimensions(params, onSuccess, onError) {
            var url = '/api/application/dimension/list';
            var _resource = $resource(url, {}, {
                create: {
                    method: 'POST',
                    params: {}
                }
            });
            return _resource.create(JSON.stringify(params)).$promise.then(onSuccess, onError);
        }
        function getChannels(params, onSuccess, onError) {
            var url = '/api/application/channel/listChannels';
            var _resource = $resource(url, {}, {
                create: {
                    method: 'POST',
                    params: {}
                }
            });
            return _resource.create(JSON.stringify(params)).$promise.then(onSuccess, onError);
        }
        //function faqSave(params, onSuccess, onError) {
        //    return $resource('/api/ms/faqKnowledge/addFAQKnowledge', {}, {});
        //}
        function faqSave(params, onSuccess, onError) {
            var url = '/api/ms/faqKnowledge/addFAQKnowledge';
            var _resource = $resource(url, {}, {
                create: {
                    method: 'POST',
                    params: {}
                }
            });
            return _resource.create(JSON.stringify(params)).$promise.then(onSuccess, onError);
        }

        function getFrame(id){
            return $resource("/api/ms/modeling/frame/listbyattribute", {}, {}).save();
        }

        function conceptGetExtensionByDialogTitle(params, onSuccess, onError) {
            var url = '/api/ms/conceptKnowledge/productExtensionQuestion';
            var _resource = $resource(url, {}, {
                create: {
                    method: 'POST',
                    params: {}
                }
            });
            return _resource.create(JSON.stringify(params)).$promise.then(onSuccess, onError);
        }
        //functtionqueryKnowDocByDocId = $resource('/api/knowledgeDocumentation/selectDocumentationById', {}, {});
    }
//}
// Source: app/static/knowledgeManagement/js/server/routeParamsFactory.js
/**
 * Created by 41212 on 2017/6/14.
 */
knowledge_static_web.factory('myService', function() {
    var savedData = {} ;
    function set(data) {
        savedData = data;
    }
    function get() {
        return savedData;
    }
    return {
        set: set,
        get: get
    }
});

// Source: app/static/login/js/controller/login_controller.js
/**
 * Created by Administrator on 2016/6/3
 * 控制器
 */
angular.module('loginModule').controller('loginController', [
    '$scope', '$location', 'localStorageService' ,"$state" ,"$cookieStore",
    function ($scope, $location, localStorageService, $state,$cookieStore) {
        $scope.vm = {
            userName: '',
            password: '',
            randomNumber: randomNumber(4),
            randomNumberValue: "",
            randomNumberChange : randomNumberChange,
            login: login,
            keyLogin : keyLogin
        };
        //设置 背景样式
       document.getElementsByTagName("body")[0].style.cssText = "background: url(../../images/images/log-bg.jpg) repeat";
       function keyLogin(e){
           var srcObj = e.srcElement ? e.srcElement : e.target;
           var keycode = window.event?e.keyCode:e.which;
            if(keycode==13){//回车
                srcObj.blur() ;
                login();
                srcObj.focus() ;
            }
        }
        //改变验证码
        function randomNumberChange(){
            $scope.vm.randomNumber = randomNumber(4)
        }
         //登陆
        function login(){
            //$state.go("materialManagement.chatKnowledgeBase",{userPermission : "['超级管理员','初级管理员']"});
            if($scope.vm.randomNumberValue.length==0){
                console.log($scope.vm.randomNumberValue);
                layer.msg("验证码不能为空");
                setRandomNumber();
            }else if($scope.vm.randomNumberValue!=$scope.vm.randomNumber){
                layer.msg("验证码错误");
                setRandomNumber();
            }else if($scope.vm.userName == ""){
                layer.msg("用户名不能为空");
                setRandomNumber();
            }else if($scope.vm.password == ""){
                layer.msg("密码不能为空");
                setRandomNumber();
            }else{
                httpRequestPost("/api/user/userLogin",{
                    "userLoginName":$scope.vm.userName,
                    "userPassword":$scope.vm.password
                },function(data){
                    if(data.status==10006){
                        // cookie  userId userName
                        $cookieStore.put("userId" , data.data.userId);
                        $cookieStore.put("userLoginName" , $scope.vm.userName);
                        $cookieStore.put("userName" , data.data.userName);
                        $cookieStore.put("permissionId",data.data.permissionId)
                        $state.go("admin");
                    }else if(data.status==10007){
                        setRandomNumber();
                        layer.msg("用户名或密码错误");
                    }else if(data.status == 10002){
                        setRandomNumber();
                        layer.msg("该用户已停用!");
                    }
                    //console.log(data)
                },function(err){
                    setRandomNumber();
                    layer.msg("登陆失败");
                    //console.log(err)
                });
            }
        }
        function setRandomNumber(){
            $scope.vm.randomNumberValue = "";
            $scope.vm.randomNumber = randomNumber(4);
            //$scope.$apply()
        }

        //  随机产生四位验证码
        function randomNumber(number){
            var rnd="";
            for(var i=0;i<number;i++){
                rnd+=Math.floor(Math.random()*10);
            }
                return rnd;
        }
    }
])

// Source: app/static/materialManagement/js/controller/addTwMes_controller.js
/**
 * Created by mileS on 2017/7/21.
 * 控制器
 */
angular.module('materialManagement').controller('addTwMesController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams","$timeout",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$timeout) {
        $state.go("materialManagement.addtemes");
        $scope.vm = {
            title:'',
            author:'',
            selectMat:selectMat,

        };
        function selectMat(){
            var dialog = ngDialog.openConfirm({
                template:"/static/materialManagement/pictureLibrary/selectImage2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                    }
                }
            });
        }


    }
]);


// Source: app/static/materialManagement/js/controller/conceptChat_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('materialManagement').controller('conceptChatController', [
    '$scope',"$state","ngDialog","$stateParams" ,"$cookieStore",
    function ($scope,$state,ngDialog,$stateParams,$cookieStore) {
        $state.go("materialManagement.conceptChat");
        //console.log( $stateParams.scanDataList.extendedQuestionArr[0]);    //edit    -----taglist
        var paraOfData = $stateParams.scanDataList?angular.fromJson($stateParams.scanDataList):"" ;
        $scope.vm = {
            userName :  paraOfData?paraOfData.chatKnowledgeModifier:$cookieStore.get("userName"),
            standardQuestion :  paraOfData?paraOfData.standardQuestion:null,   //标准问
            extendedQuestion : "",    //扩展问
            extendedQuestionArr : paraOfData?paraOfData.extendedQuestionArr:[],  //扩展问数组
            chatKnowledgeId : paraOfData?paraOfData.chatKnowledgeId:null,
            remove : remove ,
            weight : "60" ,         //  权重
            addExtension : addExtension ,  //添加扩展
            contentVal : "",
            contentArr : paraOfData?paraOfData.contentArr:[] ,
            addContentDialog : addContentDialog,// 添加知识内容
            save : save,
            scan : scan,
            scanData : $stateParams.scanData,
            type : paraOfData?paraOfData.type:1
        };

        //擴展問
        function addExtension(){
            if($scope.vm.extendedQuestion.length==0||$scope.vm.extendedQuestion==""){
                layer.msg("扩展不能为空");
            }else if(checkRepeat($scope.vm.extendedQuestion , $scope.vm.extendedQuestionArr ,"chatQuestionContent")){
                layer.msg("扩展问题重复，请重新输入");
            }else{
                httpRequestPost("/api/ms/chatKnowledge/checkConceCptChatQuestion",{
                    "chatQuestionContent" : $scope.vm.extendedQuestion,
                    "applicationId" :  APPLICATION_ID
                },function(data){
                    if(data.status == 200){
                        var obj = {};
                        //检验标签重复
                        // if($scope.vm.extendedQuestionArr.length){
                        //     var len = data.data.length;
                        //     var lenArr = $scope.vm.extendedQuestionArr.length;
                        //     angular.forEach(data.data,function(input){
                        //         angular.forEach($scope.vm.extendedQuestionArr,function(item){
                        //             angular.forEach(item.tagList,function(val){
                        //                 if(val == input) {
                        //                     len -= 1;
                        //                 }
                        //             });
                        //             if(len!=data.data.length){
                        //                 lenArr -= 1;
                        //                 layer.msg("扩展问题重复，请重新输入");
                        //                 return false
                        //             };
                        //         });
                        //         if(lenArr != $scope.vm.extendedQuestionArr.length){
                        //             layer.msg("扩展问题重复，请重新输入");
                        //             return false
                        //         }else{
                        //             obj.chatQuestionContent = data.data;
                        //             obj.chatQuestionContent = angular.copy($scope.vm.extendedQuestion) ;
                        //             obj.tagList = data.data;
                        //             obj.chatQuestionType = angular.copy($scope.vm.weight);
                        //             $scope.vm.extendedQuestionArr.push(obj);
                        //             $scope.vm.extendedQuestion = "";
                        //         }
                        //     });
                        // }else{
                            obj.chatQuestionContent = data.data;
                            obj.chatQuestionContent = angular.copy($scope.vm.extendedQuestion) ;
                            obj.tagList = data.data;
                            obj.chatQuestionType = angular.copy($scope.vm.weight);
                            $scope.vm.extendedQuestionArr.push(obj);
                            $scope.vm.extendedQuestion = "";
                            $scope.$apply();
                       // }

                    }else{
                        layer.msg("扩展问重复")
                    }
                },function(err){
                    console.log(err)
                })
            }
        }
        function addContentDialog(item,index){
            if(item){
                $scope.vm.contentVal = item.chatKnowledgeContent
            }
            var dialog = ngDialog.openConfirm({
                template:"/static/materialManagement/faq/addContentDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(item){
                            var val = angular.copy( $scope.vm.contentVal ) ;
                            $scope.vm.contentArr[index].chatKnowledgeContent = val ;
                            $scope.vm.contentVal = "" ;
                        }else{
                            addContent()  ;
                        }
                    }else{
                        $scope.vm.contentVal = "" ;
                    }
                }
            });
        }
        function addContent(){
            if($scope.vm.contentVal.length==0||$scope.vm.contentVal==""){
                layer.msg("扩展不能为空");
            }else if(checkRepeat($scope.vm.contentVal , $scope.vm.contentArr ,"chatKnowledgeContent")){
                layer.msg("扩展问题重复，请重新输入");
            }else{
                httpRequestPost("/api/ms/chatKnowledge/checkChatKnowledgeContent",{
                    "chatKnowledgeContent" : $scope.vm.contentVal
                },function(data){
                    console.log(data);
                    if(data.status == 10000){
                        var obj = {};
                        obj.chatKnowledgeContent = angular.copy($scope.vm.contentVal);
                        $scope.vm.contentArr.push(obj);
                        $scope.vm.contentVal = "";
                        $scope.$apply();
                    }else{
                        layer.msg("扩展问重复")
                    }
                },function(err){
                    console.log(err)
                })
            }

        }
        //刪除
        function remove(item,arr){
            arr.remove(item);
        }
        //预览
        function scan(){
            if(check()){
            var params = {
                chatKnowledgeId : $scope.vm.chatKnowledgeId?$scope.vm.chatKnowledgeId:null,
                standardQuestion : $scope.vm.standardQuestion,
                extendedQuestionArr : $scope.vm.extendedQuestionArr,
                contentArr : $scope.vm.contentArr,
                chatKnowledgeModifier : $scope.vm.userName,
                //editUrl : "materialManagement.conceptChat",
                chatKnowledgeSource : "101"
            };
            $state.go("materialManagement.chatKnowledgeBasePreview",{scanData:angular.toJson(params)});
        }
        }
        //保存  0 无验证   1  需要验证
        function save(){
            if(check()){
                httpRequestPost("/api/ms/chatKnowledge/addConceCptChatKnowledge",{
                    "chatKnowledgeId" : $scope.vm.chatKnowledgeId?$scope.vm.chatKnowledgeId:null,
                    "applicationId": APPLICATION_ID,
                    "chatKnowledgeModifier": $scope.vm.userName,
                    "userId" : USER_ID ,
                    "chatKnowledgeTopic": $scope.vm.standardQuestion,
                    "chatQuestionList" : $scope.vm.extendedQuestionArr,
                    "chatKnowledgeContentList" : $scope.vm.contentArr
                },function(data){
                    if(data.data==10004){
                        layer.msg("标准问重复")
                    }else{
                        $state.go("materialManagement.chatKnowledgeBase");
                    }
                },function(err){
                    console.log(err);
                })
            }
        }
        //    判断重复
        function checkRepeat(val , arr ,prop){
            var result;
            if(arr.length==0){
                result = 0;
            }else{
                console.log(val)
                for(var i=0;i<arr.length;i++){
                    if(arr[i].chatQuestionContent==val){
                         result = 1;
                         
                    }
                }
                // angular.forEach(arr,function(item){
                //     console.log(item)
                //     if(item[prop]==val){
                //         console.log(item[prop])
                //         result = 1
                //     }else{
                //         result = 0
                //     }
                // })
            }
            return result
        }
        //验证 所有数据是否合格
        function check(){
            if($scope.vm.standardQuestion==null || $scope.vm.standardQuestion.length==0){
                layer.msg("标准问不能为空");
                return false
            }else if($scope.vm.contentArr.length==0){
                layer.msg("知识内容不能为空");
                return false
            }else{
                return true
            }
        }
    }
]);
// Source: app/static/materialManagement/js/controller/faqChat_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */
angular.module('materialManagement').controller('faqChatController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams) {
        $state.go("materialManagement.faqChat");
        var paraData = $stateParams.scanDataList?angular.fromJson($stateParams.scanDataList):"" ;
        $scope.vm = {
            userName :  paraData?paraData.chatKnowledgeModifier:$cookieStore.get("userName"),
            standardQuestion :  paraData?paraData.standardQuestion:null,   //标准问
            extendedQuestion : "",    //扩展问
            extendedQuestionArr : paraData?paraData.extendedQuestionArr:[],  //扩展问数组
            remove : remove ,
            weight : "60" ,         //  权重
            addExtension : addExtension ,  //添加扩展
            chatKnowledgeId : paraData?paraData.chatKnowledgeId:null,
            contentVal : "",
            contentArr : paraData?paraData.contentArr:[] ,
            addContentDialog : addContentDialog,// 添加知识内容
            save : save ,
            scan : scan,
            scanData : $stateParams.scanData,
            type : $stateParams.scanData?$stateParams.scanData.type:1
        };

        //擴展問
        function addExtension(){
            if($scope.vm.extendedQuestion.length==0||$scope.vm.extendedQuestion==""){
                layer.msg("扩展不能为空",{time:1000});
            }else if(checkRepeat($scope.vm.extendedQuestion , $scope.vm.extendedQuestionArr ,"chatQuestionContent")){
                layer.msg("扩展问题重复，请重新输入",{time:1000});
            }else{
                httpRequestPost("/api/ms/chatKnowledge/checkFAQChatQuestion",{
                    "chatQuestionContent" : $scope.vm.extendedQuestion
                },function(data){
                    console.log(data);
                    if(data.status == 10000){
                        var obj = {};
                        obj.chatQuestionContent = angular.copy($scope.vm.extendedQuestion);
                        obj.chatQuestionType = angular.copy($scope.vm.weight);
                        $scope.vm.extendedQuestionArr.push(obj);
                        $scope.vm.extendedQuestion = "";
                        $scope.$apply();
                        console.log($scope.vm.extendedQuestionArr)
                    }else{
                        layer.msg("扩展问重复",{time:1000})
                    }
                },function(err){
                    console.log(err)
                })

            }
        }
        function addContentDialog(item,index){
            if(item){
                $scope.vm.contentVal = item.chatKnowledgeContent
            }
            var dialog = ngDialog.openConfirm({
                template:"/static/materialManagement/faq/addContentDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if(item){
                            var val = angular.copy( $scope.vm.contentVal ) ;
                            $scope.vm.contentArr[index].chatKnowledgeContent = val ;
                            $scope.vm.contentVal = "" ;
                        }else{
                            addContent()  ;
                        }
                    }else{
                        $scope.vm.contentVal = "" ;
                    }
                }
            });
        }
        function addContent(){
            if($scope.vm.contentVal.length==0||$scope.vm.contentVal==""){
                layer.msg("扩展不能为空",{time:1000});
            }else if(checkRepeat($scope.vm.contentVal , $scope.vm.contentArr ,"chatKnowledgeContent")){
                layer.msg("扩展问题重复，请重新输入");
            }else{
                httpRequestPost("/api/ms/chatKnowledge/checkChatKnowledgeContent",{
                    "chatKnowledgeContent" : $scope.vm.contentVal
                },function(data){
                    //console.log(data);
                    if(data.status == 10000){
                        var obj = {};
                        obj.chatKnowledgeContent = angular.copy($scope.vm.contentVal);
                        $scope.vm.contentArr.push(obj);
                        $scope.vm.contentVal = "";
                        $scope.$apply();
                    }else{
                        layer.msg("扩展问重复")
                    }
                },function(err){
                    console.log(err)
                })
            }
        }
       //刪除
        function remove(item,arr){
            arr.remove(item);
        }
        //预览
        function scan(){
            if(check()){    // 方便测试  后期放开
                var params = {
                    chatKnowledgeId : $scope.vm.chatKnowledgeId?$scope.vm.chatKnowledgeId:null,
                    standardQuestion : $scope.vm.standardQuestion,
                    extendedQuestionArr : $scope.vm.extendedQuestionArr,
                    contentArr : $scope.vm.contentArr,
                    chatKnowledgeModifier : $scope.vm.userName,
                    //editUrl : "materialManagement.faqChat",
                    chatKnowledgeSource : "100"
                };
                $state.go("materialManagement.chatKnowledgeBasePreview",{scanData:angular.toJson(params)});
            }
        }
        //保存  0 无验证   1  需要验证
        function save(){
                if(check()){
                    httpRequestPost("/api/ms/chatKnowledge/addFAQChatKnowledge",{
                        "chatKnowledgeId" : $scope.vm.chatKnowledgeId?$scope.vm.chatKnowledgeId:null,
                        "applicationId": APPLICATION_ID,
                        "chatKnowledgeModifier": $scope.vm.userName,
                        "userId":USER_ID,
                        "chatKnowledgeTopic": $scope.vm.standardQuestion,
                        "chatQuestionList" : $scope.vm.extendedQuestionArr,
                        "chatKnowledgeContentList" : $scope.vm.contentArr,
                        "knoweledgeId" : $scope.vm.knoweledgeId
                    },function(data){
                        if(data.data==10004){
                            layer.msg("标准问重复",{time:1000})
                        }else{
                            $state.go("materialManagement.chatKnowledgeBase");
                        }
                    },function(err){console.log(err)})
                }
            }

        //    判断重复
        function checkRepeat(val , arr ,prop){
            var result;
            if(arr.length==0){
                result = 0;
            }else{
                angular.forEach(arr,function(item){
                    if(item[prop]==val){
                        result = 1
                    }else{
                        result = 0
                    }
                })
            }
            return result
        }
        //验证 所有数据是否合格
        function check(){
            if($scope.vm.standardQuestion==null || $scope.vm.standardQuestion.length==0){
                layer.msg("标准问不能为空",{time:1000});
                return false
            }else if($scope.vm.contentArr.length==0){
                layer.msg("知识内容不能为空",{time:1000});
                return false
            }else{
                return true
            }
        }
    }
]);


// Source: app/static/materialManagement/js/controller/materialManagementPre_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */

angular.module('materialManagement').controller('chatKnowledgeBasePreController', [
    '$scope',"$state","$stateParams", "$window",
    function ($scope,$state,$stateParams,$window) {
        $state.go("materialManagement.chatKnowledgeBasePreview");
        $scope.vm = {
            scanData : angular.fromJson($stateParams.scanData),
            save : save ,
            edit : edit , 
            editUrl : angular.fromJson($stateParams.scanData).chatKnowledgeSource=="101"?"materialManagement.conceptChat":"materialManagement.faqChat"
        };
        function save(){
            var params = $scope.vm.scanData ;
            console.log(params) ;
            //if(check(params)){
                var api ;
                switch(params.chatKnowledgeSource){
                    case "100" :
                        api = "/api/ms/chatKnowledge/addFAQChatKnowledge";
                        break ;
                    case  "101":
                        api = "/api/ms/chatKnowledge/addConceCptChatKnowledge" ;
                        break ;
                }
                //if(params.chatKnowledgeSource == 101){
                //    api = "/api/ms/chatKnowledge/addConceCptChatKnowledge" ;
                //}else if(params.chatKnowledgeSource == 100){
                //    api = "/api/ms/chatKnowledge/addFAQChatKnowledge";
                //}
                httpRequestPost(api,{
                    "chatKnowledgeId" : params.chatKnowledgeId?params.chatKnowledgeId:null,
                    "applicationId": APPLICATION_ID ,
                     "userId"  : USER_ID ,
                    //"chatKnowledgeModifier": params.chatKnowledgeModifier,
                    "chatKnowledgeTopic": params.standardQuestion,
                    "chatQuestionList" : params.extendedQuestionArr,
                    "chatKnowledgeContentList" : params.contentArr
                },function(data){
                    if(data.data==10004){
                        layer.msg("标准问重复") ;
                        $state.go($scope.vm.editUrl,{scanDataList: $stateParams.scanData});
                    }else{
                        $state.go("materialManagement.chatKnowledgeBase");
                    }
                }) ;
            //}
        }
        function edit(){
            console.log(angular.fromJson($stateParams.scanData).type);
            $state.go($scope.vm.editUrl,{scanDataList: $stateParams.scanData});
        }
        //验证 所有数据是否合格
        //function check(params){
        //    if(params.standardQuestion==null || params.standardQuestion.length==0){
        //        layer.msg("标准问不能为空,请返回填写");
        //        return false
        //    }else if(params.extendedQuestionArr.length==0){
        //        layer.msg("扩展问不能为空,请返回填写");
        //        return false;
        //    }else if(params.contentArr.length==0){
        //        layer.msg("知识内容不能为空,请返回填写");
        //        return false
        //    }else{
        //        return true
        //    }
        //}
    }
]);
// Source: app/static/materialManagement/js/controller/materialManagement_controller.js
/**
 * Created by mileS on 2016/6/3.
 * 控制器
 */

angular.module('materialManagement').controller('chatKnowledgeBaseController', [
    '$scope',"$state", "$cookieStore","$timeout","$window","$location",
    function ($scope,$state,$cookieStore,$timeout,$window,$location) {
        $state.go("materialManagement.chatKnowledgeBase");
        $scope.vm = {
            title : "" ,           //知识标题
            search : search,  //查询
            exportExcel:exportExcel,//知识导出
            seeDtails:seeDtails,//标题预览
            //searchList : "",   //查询数据结果
            paginationConf : ""  ,//分页条件
            pageSize : 5  , //默认每页数量
            getType : 0 ,    // 默认请求 0    查找 1
//刪除知识
            getDel : getDel,
            delKnowledge : delKnowledge,
            delArr : [],
//高级查询
            searchHeighFlag : false ,
            "chatKnowledgeModifier": "",
            "modifyTimeType": 0,
            "chatKnowledgeTopic": "",
            "chatQuestionContent": "",
            selectTimeType : selectTimeType
        };
        //$.Huimodalalert('我是消息框，2秒后我自动滚蛋！',2000)
        function getDel(ev,id){
            var  self =$(ev.target);
            if(self.prop("checked")){
                $scope.vm.delArr.push(id)
            }else{
                $scope.vm.delArr.remove(id)
            }
        }
        function delKnowledge(){
            console.log($scope.vm.delArr) ;
            if(!$scope.vm.delArr.length){
                layer.msg("请选择要删除的知识")
            }else{
                layer.confirm('是否确定删除该条知识？', {
                    btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/chatKnowledge/deleteConceCptChatKnowledge",{
                        "applicationId": APPLICATION_ID,
                        "ids":$scope.vm.delArr
                    },function(){
                        layer.msg("删除成功") ;
                        $state.reload();
                    })
                });
            }
        }
        $scope.$watch("vm.searchHeighFlag",function(val){
            if(val){
                $('.advanced_search').slideDown();

            }else{
                $('.advanced_search').slideUp();
            }
        });
// 时间   1   仅三天   2  近七天   3  近一个月
        function search(index){
            $scope.vm.getType = 1;
            $scope.vm.searchHeighFlag = false ;
            console.log($scope.vm.chatQuestionContent);
            httpRequestPost("/api/ms/chatKnowledge/queryChatKnowledge",{
                "chatKnowledgeTopic": $scope.vm.chatKnowledgeTopic,
                "chatKnowledgeModifier": $scope.vm.chatKnowledgeModifier,
                "modifyTimeType":  $scope.vm.modifyTimeType,
                "chatQuestionContent": $scope.vm.chatQuestionContent,
                "index": (index-1)*$scope.vm.pageSize,
                "pageSize":$scope.vm.pageSize,
            },function(data){
                if(data.data==10005){
                    $scope.$apply(function(){
                        $scope.vm.delArr = [] ;
                        $scope.vm.listData = data.data.objs;
                        $scope.vm.paginationConf.totalItems = 0 ;
                        layer.msg("查询无此相关知识")
                    });
                }else{
                    $scope.$apply(function(){
                        $scope.vm.delArr = [] ;
                        $scope.vm.listData = data.data.objs;
                        $scope.vm.paginationConf = {

                            currentPage: index,//当前页
                            totalItems: data.data.total, //总条数
                            pageSize: $scope.vm.pageSize,//第页条目数
                            pagesLength: 8,//分页框数量
                        };
                        $scope.vm.title = null;
                    });
                }

            },function(err){})
        }

        /**
         * 知识导出
         */
        function exportExcel(){
            var urlParams =
                "?applicationId="+APPLICATION_ID+"&chatKnowledgeTopic="+$scope.vm.chatKnowledgeTopic+"&chatKnowledgeModifier="+$scope.vm.chatKnowledgeModifier +
                "&chatQuestionContent="+$scope.vm.chatQuestionContent;
            var url = "/api/ms/chatKnowledge/exportExcel"+urlParams  ;//请求的url
            $window.open(url,"_blank") ;
        }
        function selectTimeType(type){
            $scope.vm.modifyTimeType = type;
        }
         getData(1) ;
        //请求列表
        function getData(index){
            $scope.vm.getType = 0 ;
            httpRequestPost("/api/ms/chatKnowledge/queryChatKnowledge",{
                "applicationId": APPLICATION_ID,
                "index" :(index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.delArr = [] ;
                $scope.vm.listData = data.data.objs;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 8,//分页框数量
                };
                $scope.$apply();
            },function(err){
                console.log(err)
            })
        }

        //分页 查询
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    if($scope.vm.getType==1 ){
                        search(current)
                    }else if($scope.vm.getType==0){
                        getData(current);
                    }
                }, 100)
            }
        });
        //点击标题预览内容
        function seeDtails(data){
            console.log(data);
            var params = {
                standardQuestion : data.chatKnowledgeTopic,
                extendedQuestionArr :data.chatQuestionList,
                contentArr : data.chatKnowledgeContentList,
                applicationId: APPLICATION_ID,
                //chatKnowledgeModifier : data.chatKnowledgeModifier,
                chatKnowledgeId : data.chatKnowledgeId,
                chatKnowledgeSource:data.chatKnowledgeSource,   //类型 101  概念      100 faq
                editUrl : data.chatKnowledgeSource==100?"materialManagement.faqChat":"materialManagement.conceptChat",
                //type : data.chatKnowledgeSource
            };
            $state.go("materialManagement.chatKnowledgeBasePreview",{scanData:angular.toJson(params)});
        }
    }
]);
// Source: app/static/materialManagement/js/controller/pictureLibrary_controller.js
/**
 * Created by mileS on 2017/7/21.
 * 控制器
 */
angular.module('materialManagement').controller('pictureLibraryController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams","$timeout",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$timeout) {
        $state.go("materialManagement.pictureLibrary");
        $scope.vm = {
            getPicList : getPicList , //获取图片列表
            imageList : [] ,        //所有图片列表
            removeImg : removeImg , //刪除
            pictureName:"",
            paginationConf : {
                                pageSize: 8,//第页条目数
                                pagesLength: 10,//分页框数量
                             }

        };
        getPicList(1) ;
        function getPicList(index){
            httpRequestPost("/api/ms/picture/queryPicture",{
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "fileName":$scope.vm.pictureName
            },function(data){
                if(data.status == 200){
                    $scope.$apply(function(){
                        $scope.vm.imageList = data.data ;
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = data.data.total/$scope.vm.paginationConf.pageSize ;
                        console.log($scope.vm.paginationConf)
                    })
                }
            },function(err){
                console.log(err)
            }) ;
        }
        function removeImg(item,index){
            layer.confirm('确认删除该图片？', {
                btn: ['确定','取消'] //按钮
            }, function(){
                httpRequestPost("/api/ms/picture/deletePicture",{
                    "fileurl": item.pictureUrl,
                    "pictureId": item.pictureId
                },function(data){
                    if(data.status == 200){ 
                        layer.msg("图片删除成功") ;
                        getPicList(1)
                    }else if(data.status == 500){
                        layer.msg("图片删除失败") ;
                    }
                },function(err){
                    console.log(err)
                }) ;
            }, function(){
            });
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getPicList(current);
                }, 100)

            }
        },true);
    }
]);


// Source: app/static/materialManagement/js/controller/speechLibrary_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */ 
angular.module('materialManagement').controller('speechLibraryController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams","$timeout",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$timeout) {
        $state.go("materialManagement.speechLibrary");
        $scope.vm = {
            getVoiceList : getVoiceList , //获取图片列表
            voiceList : [] ,        //所有声音列表
            removeVoice : removeVoice , //刪除
            paginationConf : {
                pageSize: 9,//第页条目数
                pagesLength: 10,//分页框数量
            } ,
            uploadSpeech :uploadSpeech,
            voiceTitle :"",
            isUploadStart : false
        };
        getVoiceList(1) ;
        function getVoiceList(index){
            httpRequestPost("/api/ms/voiceManage/queryVioce ",{
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize
            },function(data){
                if(data.status == 200){
                    $scope.$apply(function(){
                        $scope.vm.voiceList = data.data ;
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = data.data.total/$scope.vm.paginationConf.pageSize ;
                        console.log($scope.vm.paginationConf)
                    })
                }
            },function(err){
                console.log(err)
            }) ;
        }
        function removeVoice(item,index){

            layer.confirm('确认删除该语音？', {
                btn: ['确定','取消'] //按钮
            }, function(){
                httpRequestPost("/api/ms/voiceManage/deleteVoice",{
                    "voiceUrl": item.voiceUrl,
                    "voiceId": item.voiceId
                },function(data){
                    if(data.status == 200){
                        layer.msg("语音删除成功") ;
                        getVoiceList(1) ;
                    }else if(data.status == 500){
                        layer.msg("语音删除失败") ;
                    }
                },function(err){
                    console.log(err)
                }) ;
            }, function(){
            });
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getVoiceList(current);
                }, 100)

            }
        },true);
        function uploadSpeech(callback){
            var dialog = ngDialog.openConfirm({
                template: "/static/materialManagement/speechLibrary/speechLibraryDialog.html",
                width:"900px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    $scope.vm.isUploadStart = false ;
                    //if (e === 1) {
                    //
                    //} else {
                    //
                    //}
                }
            });
        }
    }
]);


// Source: app/static/materialManagement/js/controller/videoLibrary_controller.js
/**
 * Created by mileS on 2017/6/3.
 * 控制器
 */ 
angular.module('materialManagement').controller('videoLibraryController', [
    '$scope',"$state","ngDialog", "$cookieStore","$stateParams","$timeout","$window",
    function ($scope,$state,ngDialog,$cookieStore,$stateParams,$timeout,$window) {
        $state.go("materialManagement.videoLibrary");
        $scope.vm = {
            getVoiceList : getVoiceList , //获取列表
            videoList : [] ,        //所有视频列表
            removeVoice : removeVoice , //刪除
            batchDeleteVideo:batchDeleteVideo ,//批量删除
            changeName:changeName,           //修改视频名称
            exportExcel:exportExcel,     //文件导出
            paginationConf : {
                pageSize: 5,//第页条目数
                pagesLength: 10,//分页框数量
            } ,
            videoTitle :"",
            isSelectAll : false,
            selectAll : selectAll,
            selectSingle:selectSingle,
            videoIds : [],
            videoName:'',     
            videoSearchName:'',   
            uploadSpeech :uploadSpeech,
            isUploadStart : false,
            uploadParemeter : {           //进度条；
                            queueNumber : 0,            //添加语音的数量，
                            uploadNumber : 0,           //上传的数量;
                            process :"0%"               //上传进度
                        }  
                    };
        getVoiceList(1) ;
        function getVoiceList(index){
            httpRequestPost("/api/ms/videoManage/queryVideo",{
                "index": (index-1)*$scope.vm.paginationConf.pageSize,
                "pageSize": $scope.vm.paginationConf.pageSize,
                "videoName":$scope.vm.videoSearchName
            },function(data){
                if(data.status == 200){
                    console.log(data)
                    $scope.$apply(function(){
                        $scope.vm.videoList = data.data ;
                        $scope.vm.paginationConf.currentPage =index ;
                        $scope.vm.paginationConf.totalItems =data.data.total ;
                        $scope.vm.paginationConf.numberOfPages = data.data.total/$scope.vm.paginationConf.pageSize;
                    })
                }
            },function(err){
                console.log(err)
            }) ;
        }
        //单个删除
        function removeVoice(videoId){
            layer.confirm('确认删除该视频？', {
                btn: ['确定','取消'] //按钮
            }, function(){
                httpRequestPost("/api/ms/videoManage/deleteVideo",{
                    "videoId":videoId
                },function(data){
                    if(data.status == 200){
                        layer.msg("视频删除成功") ;
                        getVoiceList(1) ;
                    }else if(data.status == 500){
                        layer.msg("视频删除失败") ;
                    }
                },function(err){
                    console.log(err)
                }) ;
            }, function(){
            });
        }
       
           //全选
        function selectAll(){
            if($scope.vm.isSelectAll){
                $scope.vm.isSelectAll = false;
                $scope.vm.videoIds = [];
            }else{
                $scope.vm.isSelectAll=true;
                $scope.vm.videoIds=[];
                angular.forEach($scope.vm.videoList.objs,function (val) {
                    $scope.vm.videoIds.push(val.videoId);
                })
            }
            console.log($scope.vm.videoIds);
        }
        //单选
        function selectSingle(id){
            if($scope.vm.videoIds.inArray(id)){
                $scope.vm.videoIds.remove(id);
                $scope.vm.isSelectAll = false;
            }else{
                $scope.vm.videoIds.push(id);

            }
            if($scope.vm.videoIds.length==$scope.vm.videoList.objs.length){
                $scope.vm.isSelectAll = true;
            }
            console.log( $scope.vm.videoIds);
        }
        //全选清空
        function initBatchTest(){
            $scope.vm.isSelectAll=false;
            $scope.vm.videoIds=[];

        }    
      //批量删除
        function batchDeleteVideo(){
            if($scope.vm.videoIds.length==0){
                layer.msg("请选择删除的视频") ;
            }else{
                layer.confirm('确认删除该视频？', {
                btn: ['确定','取消'] //按钮
                }, function(){
                    httpRequestPost("/api/ms/videoManage/batchDeleteVideo",{
                        "videoIds":$scope.vm.videoIds
                    },function(data){
                        if(data.status == 200){ 
                            
                            layer.msg("视频删除成功") ;
                            getVoiceList(1) ;
                             $scope.vm.isSelectAll = false;
                        }else if(data.status == 500){
                            layer.msg("视频删除失败") ;
                        }
                    },function(err){
                        console.log(err)
                    }) ;
                }, function(){
                });
            }
            
        } 

        //Excel导出
         function exportExcel(){
            var urlParams =
                "?applicationId="+APPLICATION_ID;
            var url = "/api/ms/videoManage/exportVideo"+urlParams  ;//请求的url
            $window.open(url,"_blank") ;
        }


        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getVoiceList(current);
                }, 100)

            }
        },true);

        //修改视频名称
        function changeName(callback){
           console.log(callback)
            $scope.vm.videoName = callback.videoName;
            $scope.vm.videoId = callback.videoId;
            var dialog = ngDialog.openConfirm({
                template: "/static/materialManagement/videoLibrary/video_change_name.html",
                width:"400px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    if(e === 1){
                        updateVideo();
                    }else{

                    }
                }
            });
        }
        function updateVideo(){
            httpRequestPost("/api/ms/videoManage/updateVideoName",{
                videoId : $scope.vm.videoId,
                videoName : $scope.vm.videoName
            },function(data){
                if(data.status==200){
                    getVoiceList(1);
                }else if(data.status==500){
                    layer.msg('名称根寻失败');
                }
            },function(error){
                console.log(error);
            });
        }


        //视频上传
        function uploadSpeech(callback){
            var dialog = ngDialog.openConfirm({
                template: "/static/materialManagement/videoLibrary/video_libraryDialog.html",
                width:"900px",
                scope: $scope,
                closeByNavigation: false,
                overlay: true,
                closeByDocument: false,
                closeByEscape: true,
                showClose: true,
                preCloseCallback: function (e) {    //关闭回掉
                    $scope.vm.isUploadStart = false ;
                    //if (e === 1) {
                    //
                    //} else {
                    //
                    //}
                }
            });
        }
    }
]);


// Source: app/static/materialManagement/js/directive/imgUpload.js
/**
 * Created by miles on 2017/7/16.
 *
 * 图片上传  ====》》  指令
 */
knowledge_static_web.directive("imgUpload", ["$parse","$state", function($parse,$state) {
    return {
        restrict:'EA',
        template:
            '<span  id="picker" style="float:left">上传图片</span>'
        ,
        link:function(scope,element,attrs){
            var uploader = WebUploader.create({
                auto: true, // 选完文件后，是否自动上传
                // swf文件路径
                swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                server: "/api/ms/picture/upload",
                //accept: {
                //    title: 'Images',
                //    extensions: 'jpg,,png',
                //    mimeTypes: 'image/*'
                //
                //},
                pick: '#picker',
            });
            uploader.on( 'fileQueued', function( file ) {
                console.log(file + "file  add success");
            });
            uploader.on( 'uploadProgress', function( file, percentage ) {

            });
            uploader.on('uploadError', function (file) {
                console.log("上传失败")
            });
            uploader.on('uploadSuccess', function (file,response) {
                if(response.status == 500){
                    layer.msg("模板错误")
                }else{
                    layer.msg("上传成功");
                    $state.reload() ;
                }
                console.log(response)
            });

        }
    }
}])
// Source: app/static/materialManagement/js/directive/uploader.js
/**
 * Created by 41212 on 2017/5/23.
 */
// 聊天知识库 上传
knowledge_static_web.directive("uploaderBase", ["$parse",  "$cookieStore" ,"$state",
    function($parse,$cookieStore,$state) {
    return {
        restrict:'EA',
        scope:{
            accept:'=',
            server : '='   , //url
            //item  : '@'
            type : "="   ,   //image：图片 video：音视频  flash：flash   file：办公文档，压缩文件等等
            isAuto : "=",
            selectBtn : "=",
            "tableList" : "=" ,
        },
        template:
            '<div  id="picker" style="height:30px;font-size:14px;">批量导入</div>'
        ,
        link:function(scope,element,attrs){
            //var $list = angular.element("#thelist");
            var uploader = WebUploader.create({
                auto: true, // 选完文件后，是否自动上传
                // swf文件路径
                swf: 'Uploader.swf',
                formData : {
                    "userId":USER_ID,
                    "applicationId":APPLICATION_ID,
                    "userName":USER_NAME
                }  ,   // 上传参数
                // 文件接收服务端。
                //server: "/api/application/application/uploadHead",
                server: "/api/ms/chatKnowledge/upload",
                //accept: {
                //    title: 'file',
                //    extensions: 'xls,xlsx',
                //    mimeTypes: 'file/*'
                //},
                // 选择文件的按钮。可选。
                // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                pick: '#picker',
                // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                //resize: false,
                //chunked: true,  // 分片上传大文件
                //chunkRetry: 10, // 如果某个分片由于网络问题出错，允许自动重传多少次？
                //thread: 100,// 最大上传并发数
                //// 禁掉全局的拖拽功能。这样不会出现文件拖进页面的时候，把文件打开。
                //disableGlobalDnd: true,
                //
                //fileNumLimit: 1,
                //fileSizeLimit: 200 * 1024 * 1024,    // 200 M    all
                //fileSingleSizeLimit: 5 * 1024 * 1024    // 50 M   single
            });
            uploader.on( 'fileQueued', function( file ) {
                console.log(file + "file  add success");
            });
            uploader.on( 'uploadProgress', function( file, percentage ) {
                var $li = $( '#'+file.id ),
                    $percent = $li.find('.progress .progress-bar');
                // 避免重复创建
                if ( !$percent.length ) {
                    $percent = $('<div class="progress progress-striped active" style="height: 50px;background: red; width: 200px;">' +
                        '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                        '</div> ' +
                        '</div>').appendTo( $li ).find('.progress-bar');
                }
                $li.find('p.state').text('上传中');
                $percent.css( 'width', percentage * 100 + '%' );
                console.log(percentage);
            });
            uploader.on('uploadError', function (file) {
                console.log("上传失败")
            });
            uploader.on('uploadSuccess', function (file,response) {
                   console.log(response) ;
                if(response.status == 500){
                     layer.msg("模板错误")
                 }else if(response.status==10001){
                    layer.msg("导入失败")
                 }else {
                    layer.msg("导入成功",{time : 2000});
                    $state.reload();
                }
            });

        }
    }
}])

// Source: app/static/materialManagement/js/directive/videoUpload.js
/**
 * Created by miles on 2017/7/16.
 *
 * 语音上传  ====》》  指令
 */
knowledge_static_web.directive("videoUpload", ["$parse","$state","$timeout", "ngDialog",
    function($parse,$state,$timeout,ngDialog) {
    return {
        restrict:'EA',
        template:
            '<span  id="picker" style="float:left">选择视频</span><br/><br/>'+
             '<p ng-repeat="item in fileNames">{{item}}</p>'
        ,
        link:function(scope,element,attrs){
            scope.fileNames = [] ;
            $timeout(function(){
                var uploader = WebUploader.create({
                    auto: false, // 选完文件后，是否自动上传
                    // swf文件路径
                    swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                    server: "/api/ms/videoManage/uploadVideo",
                    // formData:{
                    //     "name": scope.voiceTitle  ,
                    //     "modifierId":USER_ID,
                    //     "applicationId": APPLICATION_ID
                    // },

                    pick: '#picker',
                    fileNumLimit : 1,                //文件个数
                    fileSingleSizeLimit:10*1024*1024,   //设定单个文件大小
                    //只允许上传语音文件
                    accept: {
                        title: 'Video',
                        extensions: 'MP4,RMVB,WMV,AVI',
                        //mimeTypes: 'image/*'
                    }

                });
                uploader.on( 'fileQueued', function( file ) {
                    console.log(file) ;
                    if(file.ext != "mp4" &&  file.ext != "rmvb"&&  file.ext != "wmv"&&  file.ext != "avi"){
                        console.log(uploader) ;
                        return layer.msg("请选择格式为rmvb、wmb、avi、mp4类型的视频文件上传")
                    }
                    scope.$apply(function(){
                        scope.vm.isUploadStart = false ;
                        scope.fileNames.push(file.name) ;
                        console.log(scope.fileNames)
                    }) ;
                });
                //上传进度条；
                uploader.on( 'uploadProgress', function( file, percentage ) {
                    scope.vm.uploadParemeter.process = percentage * 100+'%';
                    $('progress .bar_span').css('width',percentage * 100+'%');

                });
                /**
                 * 验证文件格式以及文件大小
                 */
                uploader.on("error",function(type,file){
                    var file=file;
                    switch (type) {
                        case 'Q_EXCEED_NUM_LIMIT':
                            layer.msg("错误：上传文件数量过多！");
                             scope.$apply(function(){
                                scope.vm.isUploadStart = true ;
                                scope.fileNames.push(file.name) ;
                            }) ;
                           
                            break;
                        case 'Q_EXCEED_SIZE_LIMIT':
                            layer.msg("错误：文件总大小超出限制！");
                            break;
                        case 'F_EXCEED_SIZE':
                            layer.msg("文件大小不能超过10M");
                            break;
                        case 'Q_TYPE_DENIED':
                            layer.msg("请选择rmvb,wmv,avi,mp4类型视频文件上传");
                            break;
                        case 'F_DUPLICATE':
                            layer.msg("错误：请勿重复上传该文件！");
                            break;
                        default:
                            layer.msg("请检查"+type+"后重新上传");
                            break;
                    }

                });
                uploader.on('uploadError', function (file,reason) {
                    console.log("上传失败");
                    layer.msg('请检查'+reason);
                    console.log(reason);
                });

                uploader.on('uploadSuccess', function (file,response) {
                    if(response.status == 500){
                        scope.vm.isUploadStart = false ;
                        //layer.msg("模板错误")
                    }
                    if(response.status == 200){
                        ngDialog.closeAll();
                        layer.msg("上传成功");
                        $state.reload() ;
                    }
                    console.log(response);
                });
                //runtimeOrder : flash
                scope.$watch("vm.isUploadStart",function(val){
                    if(val && scope.vm.videoTitle){
                        if(!scope.vm.videoTitle){
                            layer.msg("请添加视频标题")
                        }else{
                            console.log(USER_LOGIN_NAME)
                            console.log(APPLICATION_ID)
                            uploader.options.formData = {
                                // "voiceName" : scope.vm.voiceTitle,
                                // "applicationId":APPLICATION_ID,
                                // "voiceUserName":USER_LOGIN_NAME

                                "videoName": scope.vm.videoTitle  ,
                                "videoUserName":USER_LOGIN_NAME,
                                "applicationId": APPLICATION_ID
                            } ;
                            uploader.upload() ;
                        }
                    }
                })
            },0)

        }
    }
}])
// Source: app/static/materialManagement/js/directive/voiceUpload.js
/**
 * Created by miles on 2017/7/16.
 *
 * 语音上传  ====》》  指令
 */
knowledge_static_web.directive("voiceUpload", ["$parse","$state","$timeout", "ngDialog",
    function($parse,$state,$timeout,ngDialog) {
    return {
        restrict:'EA',
        template:
            '<span  id="picker" style="float:left">选择语音</span><br/><br/>'+
             '<p ng-repeat="item in fileNames">{{item}}</p>'
        ,
        link:function(scope,element,attrs){
            scope.fileNames = [] ;
            $timeout(function(){
                var uploader = WebUploader.create({
                    auto: false, // 选完文件后，是否自动上传
                    // swf文件路径
                    swf: '/bower_components/webuploader-0.1.5/dist/Uploader.swf',
                    server: "/api/ms/voiceManage/uploadVoice",
                    pick: '#picker',
                });
                uploader.on( 'fileQueued', function( file ) {
                    console.log(file.ext) ;
                      if(file.ext != "mp3" &&  file.ext != "amr"){
                        console.log(uploader) ;
                        return layer.msg("请选择 mp4 或 amr 类型语音文件上传")
                    }
                    scope.$apply(function(){
                        scope.vm.isUploadStart = false ;
                        scope.fileNames.push(file.name) ;
                        //console.log(scope.fileName)
                    }) ;
                });
                uploader.on( 'uploadProgress', function( file, percentage ) {

                });
                uploader.on('uploadError', function (file) {
                    console.log("上传失败")
                });
                uploader.on('uploadSuccess', function (file,response) {
                    if(response.status == 500){
                        scope.vm.isUploadStart = false ;
                        //layer.msg("模板错误")
                    }else{
                        ngDialog.closeAll();
                        layer.msg("上传成功");
                        $state.reload() ;
                    }
                    console.log(response)
                });
                //runtimeOrder : flash
                scope.$watch("vm.isUploadStart",function(val){
                    if(val && scope.vm.voiceTitle){
                        if(!scope.vm.voiceTitle){
                            layer.msg("请添加语音标题")
                        }else{
                            uploader.options.formData = {
                                "voiceName" : scope.vm.voiceTitle
                            } ;
                            uploader.upload() ;
                        }
                    }
                })
            },0)

        }
    }
}])

// Source: app/static/myApplication/js/controller/AssociationManage_controller.js
/**
 * Description:关联管理控制js
 * Author: chengjianhua@ultrapower.com.cn
 * Date: 2017/4/28 16:30
 */
angular.module('myApplicationSettingModule').controller('AssociationManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout) {
        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"), //获取用户id
            applicationServiceData : "",   // 本应用服务列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //节点数据记录总数

            serviceIds : [], //当前选中的关联服务id
            relatedServiceIds : [], //当前选中的被关联的服务id
            searchWord : "", //检索词

            selectRelatedServiceId : selectRelatedServiceId, //选择被关联的服务
            selectServiceId : selectServiceId, //选择关联的服务

            addRelatedService : addRelatedService, //关联服务弹窗
            cancelRelatedService : cancelRelatedService, //取消关联服务弹窗
            listApplicationServiceData : listApplicationServiceData //分页查询本应用的服务
            

        };

        $scope.other = {
            applicationServiceData : "",   // 其他应用服务列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //节点数据记录总数
        };

        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listApplicationServiceData(1);
        //请求应用本身的服务列表
        function listApplicationServiceData(index){
            console.log("aa");
            httpRequestPost("/api/application/relation/listServiceRelation",{
                "applicationId": $scope.vm.applicationId,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize,
                "searchWord": $scope.vm.searchWord
            },function(data){
                $scope.vm.applicationServiceData = data.data;
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listApplicationServiceData(current);
                }, 100)

            }
        },true);
        //请求其他应用本身的服务列表
        function listOtherApplicationServiceData(index){
            httpRequestPost("/api/application/relation/listOtherApplicationService",{
                "applicationId": $scope.vm.applicationId,
                "index" : (index-1)*$scope.other.pageSize,
                "pageSize": $scope.other.pageSize
            },function(data){
                $scope.other.applicationServiceData = data.data;
                $scope.other.dataTotal =data.total;
                $scope.other.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout2 ;
        $scope.$watch('other.paginationConf.currentPage', function(current){
            if(current){
                if (timeout2) {
                    $timeout.cancel(timeout2)
                }
                timeout2 = $timeout(function () {
                    listOtherApplicationServiceData(current);
                }, 100)
            }
        },true);

        function addRelatedService(){
            if($scope.vm.serviceIds==null||$scope.vm.serviceIds.length==0){
                layer.msg("请选择服务");
            }else{
                listOtherApplicationServiceData(1);
                var dialog = ngDialog.openConfirm({
                    template:"/static/myApplication/applicationConfig/AssociationManageDialog.html",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){    //关闭回掉
                        if(e === 1){
                            if($scope.vm.relatedServiceIds==null||$scope.vm.relatedServiceIds.length==0){
                                layer.msg("请选择要关联的服务");
                            }else{
                                httpRequestPost("/api/application/relation/relatedService",{
                                    "applicationId" : $scope.vm.applicationId, //本应用的id
                                    "userId": $scope.vm.userId,
                                    "serviceIds" : $scope.vm.serviceIds, //当前选中的关联服务id
                                    "relatedServiceIds" : $scope.vm.relatedServiceIds //当前选中的被关联的服务id
                                },function(data){
                                    if(data.status==200){
                                        layer.msg("关联成功");
                                        listApplicationServiceData(1);
                                    }else{
                                        layer.msg("关联出错了");
                                    }
                                },function(){
                                    layer.msg("请求失敗");
                                })
                            }
                        }else{
                            $scope.vm.serviceIds=[]; //当前选中的关联服务id
                            $scope.vm.relatedServiceIds=[]; //当前选中的被关联的服务id
                        }
                    }
                });
            }

        }
        function cancelRelatedService(){
            if($scope.vm.serviceIds==null||$scope.vm.serviceIds.length==0){
                layer.msg("请选择要取消的服务");
            }else{
                var dialog = ngDialog.openConfirm({
                    template:"/static/myApplication/applicationConfig/AssociationManageDialog2.html",
                    scope: $scope,
                    closeByDocument:false,
                    closeByEscape: true,
                    showClose : true,
                    backdrop : 'static',
                    preCloseCallback:function(e){    //关闭回掉
                        if(e === 1){
                            httpRequestPost("/api/application/relation/cancelRelatedService",{
                                "serviceIds" : $scope.vm.serviceIds //当前选中的关联服务id
                            },function(data){
                                if(data.status==200){
                                    layer.msg("取消关联成功");
                                    listApplicationServiceData(1);
                                }else{
                                    layer.msg("取消关联出错了");
                                }
                            },function(){
                                layer.msg("请求失敗");
                            })
                        }
                    }
                });
            }

        }



        //选择被关联的服务id
        function selectRelatedServiceId(relatedServiceId){
            if($scope.vm.relatedServiceIds==null){
                $scope.vm.relatedServiceIds=[];
            }
            var index=$scope.vm.relatedServiceIds.inArray(relatedServiceId);
            if(index){
                $scope.vm.relatedServiceIds.remove(relatedServiceId);
            }else{
                $scope.vm.relatedServiceIds.push(relatedServiceId);
            }
        }

        //选择关联的服务id
        function selectServiceId(serviceId){
            //if($scope.vm.serviceIds==null){
            //    $scope.vm.serviceIds=[];
            //}
            $scope.vm.serviceIds=[];
            $scope.vm.serviceIds.push(serviceId);
            //var index=$scope.vm.serviceIds.inArray(serviceId);
            //if(!index){
            //    $scope.vm.serviceIds.push(serviceId);
            //}
        }

    }
]);
// Source: app/static/myApplication/js/controller/NewServiceRelease_controller.js
/**
 * Description:发布服务控制器
 * Author: chengjianhua@ultrapower.com.cn
 * Date: 2017/4/12 15:46
 */
angular.module('myApplicationSettingModule').controller('newServiceReleaseController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$stateParams","$cookieStore","$timeout",
    function ($scope,localStorageService, $state,ngDialog,$stateParams,$cookieStore,$timeout) {
        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            appName : "", //应用名称
            categoryIds : [], //分类id列表
            channels : [], //渠道id列表
            dimensionSelected : [], //选中的维度列表
            dimensionAll : [],//所有的维度列表
            dimensions: [], //选中的维度id
            //dimensionAll : "",//所有的维度列表
            nodeCode : "", //节点编号
            serviceId : $stateParams.serviceId, //服务id
            serviceName: "", //服务名称
            serviceStatus : 0, //服务状态
            serviceType : 0, //服务类型
            userId : $cookieStore.get("userId"), //获取用户id

            categoryData : "", //分类数据
            channelData : "", //渠道数据
            dimensionData : "", //维度数据
            typeData : "", //类型数据
            nodeData : "", //节点数据

            dialogTitle : "",  //对话框标题
            allowSubmit : 1, //是否允许提交

            selectChannel : selectChannel, //选择渠道
            selectType : selectType, //选择服务类型
            selectNode : selectNode, //选择节点

            listCategory : listCategory,  //弹出分类对话框
            listNodeData : listNodeData, //获取可用节点数据
            listChannelData : listChannelData, //获取渠道数据
            listTypeData : listTypeData,//获取发布类型数据
            listDimensionData : listDimensionData, //获取维度数据



            publish : publish, //发布服务
            cancelPublish : cancelPublish, //取消发布服务
            findServiceByServiceId : findServiceByServiceId, //根据服务id查询服务信息

            botRoot : "",     //根节点
            newCategoryIds : []  //选中的分类节点

        };
        listDimensionData(); //获取维度数据
        findServiceByServiceId(); //根据服务id查询服务信息

        listNodeData(); //获取可用节点数据
        listChannelData();  //获取渠道数据
        listTypeData();//获取发布类型数据


        //根据服务id查询服务信息
        function findServiceByServiceId(){
            if($stateParams.serviceId!=null){
                $scope.vm.dialogTitle="编辑服务";
                httpRequestPost("/api/application/service/findServiceById",{
                    "serviceId": $stateParams.serviceId
                },function(data){
                    if(data.status==200){
                        console.log(data)
                        $scope.vm.appName=data.data.appName;//应用名称
                        $scope.vm.categoryIds=data.data.categoryIds;//分类id列表
                        $scope.vm.newCategoryIds=data.data.categoryIds;//选中的分类初始化
                        $scope.vm.channels=data.data.channels;//渠道id列表
                        console.log("查询结果"+data.data.channels);
                        //$scope.vm.dimensions=data.data.dimensions;//维度id列表
                        $scope.vm.nodeCode=data.data.nodeCode;//节点编号
                        $scope.vm.serviceName=data.data.serviceName;//服务名称
                        $scope.vm.serviceStatus=data.data.serviceStatus;//服务状态
                        $scope.vm.serviceType=data.data.serviceType;//服务类型
                        $scope.vm.serviceId=data.data.serviceId;//服务id
                        $scope.$apply();
                        httpRequestPost("/api/application/node/findParentNodeInfo",{
                            "nodeCode" : data.data.nodeCode
                        },function(data){
                            if(data.status==200){
                                $scope.vm.nodeData.push(data.data);
                                $scope.$apply();
                            }else{
                                layer.msg("查询节点信息失败");
                            }
                        },function(){
                            layer.msg("请求失败");
                        })
                        httpRequestPost("/api/application/service/listDimensionByServiceId",{
                            "serviceId": $stateParams.serviceId
                        },function(data1){
                            if(data1.status==200){
                                var dimensionSelected=[];
                                angular.forEach(data1.data,function(dimensionId){
                                    angular.forEach($scope.vm.dimensionAll,function(dimension){
                                        if(dimensionId==dimension.dimensionId){
                                            dimensionSelected.push(dimension);
                                            //$scope.vm.dimensionAll.remove(dimension);
                                        }
                                    });
                                });
                                $scope.vm.dimensionSelected=dimensionSelected;
                                $scope.$apply();

                            }else{
                                layer.msg("查询失败");
                            }
                        },function(){
                            layer.msg("请求失败");
                        })
                    }else{
                        layer.msg("查询服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                })
            }else{
                $scope.vm.dialogTitle="发布新服务";
            }
        }

        //发布服务
        function publish(){
            console.log($scope.vm.allowSubmit);
            if($scope.vm.allowSubmit){  //服务名称验证没有错误
                $scope.vm.dimensions=$scope.vm.dimensionSelected.id;
                if($scope.vm.serviceId!=null){
                    console.log("渠道id"+$scope.vm.channels);

                    httpRequestPost("/api/application/service/editService",{
                        "applicationId": $scope.vm.applicationId,
                        "categoryIds" : $scope.vm.categoryIds, //分类id列表
                        "channels" : $scope.vm.channels, //渠道id列表
                        "dimensions" : $scope.vm.dimensions, //维度id列表
                        "nodeCode" : $scope.vm.nodeCode, //节点编号
                        "serviceName": $scope.vm.serviceName, //服务名称
                        "serviceType" : $scope.vm.serviceType, //服务类型
                        "userId" : $scope.vm.userId, //获取用户id
                        "serviceId" : $scope.vm.serviceId //服务id
                    },function(data){
                        if(data.status==200){
                            $state.go("setting.releaseMan");
                        }else{
                            layer.msg("新增发布服务失败");
                        }
                    },function(){
                        layer.msg("请求失败")
                    })
                }else{
                    httpRequestPost("/api/application/service/addAndPublishService",{
                        "applicationId": $scope.vm.applicationId,
                        "categoryIds" : $scope.vm.categoryIds, //分类id列表
                        "channels" : $scope.vm.channels, //渠道id列表
                        "dimensions" : $scope.vm.dimensions, //维度id列表
                        "nodeCode" : $scope.vm.nodeCode, //节点编号
                        "serviceName": $scope.vm.serviceName, //服务名称
                        "serviceType" : $scope.vm.serviceType, //服务类型
                        "userId" : $scope.vm.userId //获取用户id
                    },function(data){
                        if(data.status==200){
                            $state.go("setting.releaseMan");
                        }else{
                            layer.msg("新增发布服务失败");
                        }
                    },function(){
                        layer.msg("请求失败")
                    })
                }
            }
        }


        //取消发布服务
        function cancelPublish(){
            $state.go("setting.releaseMan");
        }

        //获取渠道数据
        function listChannelData(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId": $scope.vm.applicationId
            },function(data){
                if(data.status==200){
                    $scope.vm.channelData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询渠道失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }



        //获取发布类型数据
        function listTypeData(){
            httpRequestPost("/api/application/service/listServiceType",{
            },function(data){
                if(data.status==200){
                    $scope.vm.typeData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询服务类型失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //获取可用节点数据
        function listNodeData(){
            httpRequestPost("/api/application/node/listNoUsingNode",{
            },function(data){
                if(data.status==200){
                    $scope.vm.nodeData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询可用节点失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }


        //弹出分类对话框
        function listCategory(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationRelease/NewServiceReleaseDialog.html",
                
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        $scope.vm.categoryIds=$scope.vm.newCategoryIds;
                    }
                }
            });
            $timeout(function(){
                relationBot()
            },200)
        }

        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channels==null){
                $scope.vm.channels=[];
            }
            var index=$scope.vm.channels.inArray(channelId);
            if(index){
                $scope.vm.channels.remove(channelId);
            }else{
                $scope.vm.channels.push(channelId);
            }
        }



        //选择服务类型
        function selectType(serviceType){
            $scope.vm.serviceType=serviceType;
        }
        //选择节点
        function selectNode(nodeCode){
            $scope.vm.nodeCode=nodeCode;
        }


        //获取维度
        function  listDimensionData(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensionAll = data.data;
                    $scope.$apply();

                }
            },function(err){
                layer.msg("获取维度失败，请刷新页面")
            });

        }





////////////////////////////////////// ///          Bot     /////////////////////////////////////////////////////
        function relationBot(){
            //{
            //    "categoryApplicationId": "360619411498860544",
            //    "categoryPid": "root"
            //}
            getBotRoot();
            //    getDimensions();
            //    getChannel();
            //点击 root 的下拉效果
            function  knowledgeBot(ev){
                var ele = ev.target;
                $timeout(function(){
                    $(ele).next().slideToggle();
                },200)
            }

            //获取root 数据
            function getBotRoot(){
                httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId": $scope.vm.applicationId,
                    "categoryPid": "root"
                },function(data){
                    //console.log(data);
                    $scope.vm.botRoot = data.data;
                    $scope.$apply()
                },function(){
                   layer.msg("获取BOT分类失败")
                });
            }
            //点击更改bot ids
            $(".aside-navs-cont").on("click",".botSelect",function(){
                var self = angular.element(this);
                var id = self.attr("data-option");
                if(self.prop("checked")){
                   $scope.vm.newCategoryIds.push(id);
                    $scope.$apply();
                    console.log($scope.vm.newCategoryIds);
                }else{
                    $scope.vm.newCategoryIds.remove(id);
                    $scope.$apply();
                    console.log($scope.vm.newCategoryIds);
                }
            });
            //点击下一级 bot 下拉数据填充以及下拉效果
            $(".aside-navs-cont").on("click",'.icon-jj',function(){
                var id = $(this).attr("data-option");
                console.log("点击的节点："+id);
                var that = $(this);
                if(!that.parent().parent().siblings().length){
                    that.css("backgroundPosition","0% 100%");
                    httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                        "categoryApplicationId": $scope.vm.applicationId,
                        "categoryPid": id
                    },function(data){
                        if(data.data){
                            var  html = '<ul class="menus">';
                            for(var i=0;i<data.data.length;i++){
                                var checkbox="";
                                if($scope.vm.categoryIds!=null){
                                    //判断选中的分类是否为空
                                    checkbox = $scope.vm.categoryIds.inArray(data.data[i].categoryId);
                                }
                                html+= '<li>' +
                                    '<div class="slide-a">'+
                                    ' <a class="ellipsis" href="javascript:;">'+
                                    '<i class="icon-jj" data-option="'+data.data[i].categoryId+'"></i>'+
                                    '<input type="checkbox" class="botSelect" ';
                                if(checkbox){
                                    html+=' checked ';
                                }
                                html+='data-option="'+data.data[i].categoryId+'"/>'+
                                '<span>'+data.data[i].categoryName+'</span>'+
                                    '</a>' +
                                    '</div>' +
                                    '</li>'
                            }
                            html+="</ul>";
                            $(html).appendTo((that.parent().parent().parent()));
                            that.parent().parent().next().slideDown()
                        }
                    },function(err){
                        alert(err)
                    });
                }else{
                    if(that.css("backgroundPosition")=="0% 0%"){
                        that.css("backgroundPosition","0% 100%");
                        that.parent().parent().next().slideDown()
                    }else{
                        that.css("backgroundPosition","0% 0%");
                        that.parent().parent().next().slideUp()
                    }
                }
            });
        }
////////////////////////////////////////           Bot     //////////////////////////////////////////////////////
    }

]).directive('checkServiceName', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                $http({
                    method: 'POST',
                    url: '/api/application/service/checkName',
                    data:{
                        serviceName: scope.vm.serviceName,
                        serviceId : scope.vm.serviceId
                    }
                }).success(function(data){
                    if(data.data){
                        c.$setValidity('unique', true);
                        scope.vm.allowSubmit=1;
                    }else{
                        c.$setValidity('unique', false);
                        scope.vm.allowSubmit=0;
                    }
                }).error(function(data){
                    c.$setValidity('unique', false);
                    scope.vm.allowSubmit=0;
                })
            });
        }
    }
});
// Source: app/static/myApplication/js/controller/addAdmin_controller.js
/**
 * Created by 41212 on 2017/3/23.
 */
angular.module('myApplicationModule').controller('addAdminController', [
    '$scope', "$state", "$stateParams",
    function ($scope,$state, $stateParams) {
        $state.go("admin.manage",{userPermission:$stateParams.userPermission});

    }
]);
// Source: app/static/myApplication/js/controller/admin_controller.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('myApplicationModule').controller('myApplicationController', [
    '$scope',  "$state", "$stateParams",
    function ($scope,  $state ,$stateParams) {
                //console.log("state"+$stateParams.userPermission);
        $state.go("myApplication.manage",{userPermission:$stateParams.userPermission});

    }
]);
// Source: app/static/myApplication/js/controller/applicationInfor_controller.js
/**
 * Description:应用信息控制器
 * Author: chengjianhua@ultrapower.com.cn
 * Date: 2017/4/10 17:16
 */
angular.module('myApplicationSettingModule').controller('applicationInforController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$rootScope","$timeout",
    function ($scope,localStorageService, $state, ngDialog,$cookieStore,$rootScope,$timeout) {
        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),   //用户id
            userName : $cookieStore.get("userLoginName"), //获取用户id
            serviceData : "",   // 发布服务列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 3 , //默认每页数量
            dataTotal: "", //发布服务数据记录总数

            sceneId : "", //场景id
            applicationName : "", //应用名称
            applicationNewName : "", //应用新名称
            applicationDescription : "", //应用描述
            applicationCreateTime : "",//创建时间
            applicationLisence : "", //应用序列号
            statusId : "", //应用状态

            knowledgeTypeNum : "",//知识类型数量
            exchangeModeNum : "", //交互方式数量
            businessFrameNum : "", //业务框架数量

            allowSubmit : 1, //是否允许提交


            findApplicationInfo : findApplicationInfo, //查找应用信息
            findSceneInfo : findSceneInfo, //查看场景信息
            listServiceData : listServiceData, //查看服务列表信息
            publishService : publishService,  //发布服务
            startService : startService, //上线服务
            stopService : stopService, //下线服务
            restartService : restartService, //重启服务

            editName : editName,    //编辑应用
            deleteApplication: deleteApplication, //删除应用
            stopAllServices : stopAllServices //下线应用的所有服务

        };

        findApplicationInfo(); //查看应用的基本信息

        findSceneInfo(); //查看场景信息
        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listServiceData(1);
        //请求服务列表
        function listServiceData(index){
            httpRequestPost("/api/application/service/listServiceByPage",{
                "applicationId": $scope.vm.applicationId,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.serviceData = data.data;
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总页数
                    pageSize: $scope.vm.pageSize,//分页框的分组单位
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listServiceData(current);
                }, 100)

            }
        },true);


        //发布服务
        function publishService(serviceId){
            httpRequestPost("/api/application/service/publishService",{
                "serviceId": serviceId,
                "applicationId": $scope.vm.applicationId,
                "userId" : $scope.vm.userId, //获取用户id
                "userName" : $scope.vm.userName //获取用户名称
            },function(data){
                if(data.status==200){
                    layer.msg("发布服务成功");
                    listServiceData(1);
                }else{
                    layer.msg("发布服务失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //上线服务
        function startService(serviceId){
            layer.confirm("确认上线？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/startService",{
                    "serviceId": serviceId
                },function(data){
                    if(data.status==200){
                        layer.msg("上线服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("上线服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }
        //下线服务
        function stopService(serviceId){
            layer.confirm("确认下线？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/stopService",{
                    "serviceId": serviceId
                },function(data){
                    if(data.status==200){
                        layer.msg("下线服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("下线服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //重启服务
        function restartService(serviceId){
            layer.confirm("确认重启？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/restartService",{
                    "serviceId": serviceId
                },function(data){
                    if(data.status==200){
                        layer.msg("重启服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("重启服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //查看应用信息
        function findApplicationInfo(){
            httpRequestPost("/api/application/application/findApplication",{
                "applicationId": $scope.vm.applicationId
            },function(data){
                if(data.status==200){
                    $rootScope.applicationName = data.data.applicationName;
                    $cookieStore.put('applicationName',data.data.applicationName);
                    $scope.vm.sceneId =data.data.sceneId; //场景id
                    $scope.vm.applicationName =data.data.applicationName;//应用名称
                    $scope.vm.applicationNewName = data.data.applicationName; //待编辑的新应用名称
                    $scope.vm.applicationDescription =data.data.applicationDescription;//应用描述
                    $scope.vm.applicationCreateTime =data.data.applicationCreateTime;//创建时间
                    $scope.vm.statusId =data.data.statusId; //应用状态
                    $scope.vm.applicationLisence = data.data.applicationLisence;  //应用序列号
                    $scope.$apply();
                }else{
                    layer.msg("查询失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

            //查看场景信息
        function findSceneInfo(){
            httpRequestPost("/api/application/application/findSceneInfo",{
                "applicationId": $scope.vm.applicationId
            },function(data){
                if(data.status==200){
                    $scope.vm.knowledgeTypeNum =data.data.knowledgeTypeNum; //知识类型数量
                    $scope.vm.exchangeModeNum =data.data.exchangeModeNum;//交互方式数量
                    $scope.vm.businessFrameNum =data.data.businessFrameNum;//业务框架数量
                    $scope.$apply();
                }else{
                    layer.msg("查询失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }


        //编辑应用的名称
        function editName(){
            $scope.vm.applicationNewName = $scope.vm.applicationName ; //待编辑的新应用名称
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationInfor/applicationInforDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if ($scope.vm.allowSubmit){
                            httpRequestPost("/api/application/application/updateApplication",{
                                "applicationId": $scope.vm.applicationId,
                                "sceneId" : $scope.vm.sceneId,
                                "applicationName" : $scope.vm.applicationNewName,
                                "applicationDescription" : $scope.vm.applicationDescription,
                                "applicationLisence" : $scope.vm.applicationLisence ,
                                "userId" : $scope.vm.userId
                            },function(data){
                                if(data.status==200){
                                    findApplicationInfo();
                                }else{
                                    layer.msg("修改失败");
                                }
                            },function(){
                                layer.msg("请求失败");
                            })
                        }
                    }else{
                        $scope.vm.applicationNewName="";
                    }
                }
            });
        }

        //下线应用的所有服务
        function stopAllServices(){
            layer.confirm("确认下线所有服务？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/stopAllService",{
                    "applicationId": $scope.vm.applicationId
                },function(data){
                    if(data.status==200){
                        layer.msg("下线所有服务成功");
                        listServiceData(1);
                        findApplicationInfo(); //查看应用的基本信息
                    }else{
                        layer.msg("下线所有服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });

        }

        //删除应用
        function deleteApplication(){
            layer.confirm("确认删除当前应用？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/deleteAllServices",{
                    "applicationId": $scope.vm.applicationId,
                    "userId" : $scope.vm.userId, //获取用户id
                    "userName" : $scope.vm.userName //获取用户名称
                },function(data){
                    if(data.status==200){
                        layer.msg("删除成功");
                        $state.go("admin.manage");
                    }else{
                        layer.msg("删除失败");
                    }
                },function(){
                    console.log("请求失败");
                }) ;
                //var dialog = ngDialog.openConfirm({
                //    template:"/static/myApplication/applicationInfor/applicationInforDialog2.html",
                //    scope: $scope,
                //    closeByDocument:false,
                //    closeByEscape: true,
                //    showClose : true,
                //    backdrop : 'static',
                //    preCloseCallback:function(e){    //关闭回掉
                //        if(e === 1){
                //            httpRequestPost("/api/application/service/deleteAllServices",{
                //                "applicationId": $scope.vm.applicationId
                //            },function(data){
                //                if(data.status==200){
                //                    layer.msg("删除成功");
                //                    $state.go("admin.manage");
                //                }else{
                //                    layer.msg("删除失败");
                //                }
                //            },function(){
                //                layer.msg("请求失败");
                //            })
                //        }
                //    }
                //});
            },function(){
                console.log("cancel");
            });
        }
    }
]).directive('checkName', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                $http({
                    method: 'POST',
                    url: '/api/application/application/checkName',
                    data:{
                        applicationId: scope.vm.applicationId,
                        applicationName: scope.vm.applicationNewName
                    }
                }).success(function(data){
                    if(data.data){
                        c.$setValidity('unique', true);
                        scope.vm.allowSubmit=1;
                    }else{
                        c.$setValidity('unique', false);
                        scope.vm.allowSubmit=0;
                    }
                }).error(function(data){
                    c.$setValidity('unique', false);
                    scope.vm.allowSubmit=0;
                })
            });
        }
    }
});
// Source: app/static/myApplication/js/controller/botApply.js
/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('myApplicationModule').controller('botApplyController', [
    '$scope', 'localStorageService','$timeout',"$state" ,"$stateParams","ngDialog","$cookieStore",'$interval',function ($scope,localStorageService,$timeout,$state,$stateParams,ngDialog,$cookieStore,$interval) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            botSelectValue:"root",
            categoryNode:"node",
            categoryEdge:"edge",
            botRoot : "",     //根节点
            knowledgeBotVal:"",  //bot 内容
            botLibrarySelectValue:"root",
            botLibraryRoot : "",     //根节点
            knowledgeBotLibraryVal:"",  //bot 内容
            clearColor:clearColor,
            clearColorLibrary:clearColorLibrary,
            applyCategory:applyCategory,
            botInfo:null,  //bot信息
            deleteBot:deleteBot,
            categoryId: "",
            categoryTypeId: 163,
            botSelectType:163,
            categorySceneId: 0,
            categoryAttributeName: "edge",
            categoryName: "",
            categoryPid: "",
            categoryApplicationId: "",
            categoryLeaf: 1,
            botLibraryInfo:null,  //bot信息
            addBotLibrary:addBotLibrary, //添加点击时间
            editBotLibrary:editBotLibrary,
            deleteBotLibrary:deleteBotLibrary,
            categoryLibraryId: "",
            categoryLibraryTypeId: 163,
            botLibrarySelectType:163,
            categoryLibrarySceneId: 0,
            categoryLibraryAttributeName: "edge",
            categoryLibraryName: "",
            categoryLibraryPid: "",
            categoryLibraryDescribe: "",
            categoryLibraryLeaf: 1,
            reloadBotLibrary:reloadBotLibrary,
            reloadBot:reloadBot,
            disableAttributeTypeForApply:disableAttributeTypeForApply,
            repeatCheckForCategory:repeatCheckForCategory,
            categoryNameNullOrBeyondLimit:"类目名称为空或超过长度限制50",
            notContainHtmlLabel:"不能包含HTML标签",
            categoryDescribeBeyondLimit:"描述超过长度限制2000",
            responseView:responseView,
            searchNodeForBot:searchNodeForBot,
            recursionForBot:recursionForBot,
            autoHeightForBot:autoHeightForBot,
            locationForBot:locationForBot,
            suggestionValue:"",
            suggestionData:"",
            winHeight:0
        };

        var categoryApplicationId = $cookieStore.get("applicationId");
        var categoryModifierId = $cookieStore.get("userId");
        var categorySceneId = $cookieStore.get("sceneId");

        autoHeightForBot();

        function autoHeightForBot(){
            var $win = $(window);
            var winHeight = $win.height()*0.75;
            $scope.vm.winHeight=winHeight+5;
            $(".libraryFt").attr("style","width: 450px;height: "+winHeight+"px;overflow-y: auto;background: #fff;float: left;");
            $(".library_mid").attr("style","width: 200px;height: "+winHeight+"px;background: #fff;padding: 50px 20px;");
            $(".libraryRth").attr("style","width: 670px;height: "+winHeight+"px;overflow-y: auto;background: #fff;float: right;padding: 30px;");
        }

        var params = {
            "categoryName":$("#category-autocomplete").val(),
            "categoryAttributeName":"node",
            "categorySceneId":categorySceneId
        };
        //类目查找自动补全
        $('#category-autocomplete').autocomplete({
            serviceUrl: "/api/ms/modeling/categorylibrary/searchbycategoryname",
            type:'POST',
            params:params,
            paramName:'categoryName',
            dataType:'json',
            transformResult:function(data){
                var result = new Object();
                var array = [];
                if(data.data){
                    for(var i=0;i<data.data.length;i++){
                        array[i]={
                            data:data.data[i].categoryId,
                            value:data.data[i].categoryName
                        }
                    }
                }
                result.suggestions = array;
                return result;
            },
            onSelect: function(suggestion) {
                searchNodeForBot(suggestion);
                $scope.vm.suggestionValue=suggestion.value;
                $scope.vm.suggestionData=suggestion.data;
            }
        });
        $interval(function(){
            if(nullCheck($scope.vm.suggestionData)==true){
                var suggestion = new Object();
                suggestion.value=$scope.vm.suggestionValue;
                suggestion.data=$scope.vm.suggestionData;
                if(locationForBotFlag(suggestion)){
                    locationForBot(suggestion);
                    $scope.vm.suggestionValue="";
                    $scope.vm.suggestionData="";
                }
            }
        },2000);
        function locationForBot(suggestion){
            var currentNodeId = suggestion.data;
            var initHeight = 0;
            var sum = $("#library").find("i").length;
            $.each($("#library").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    var offset = 0;
                    if(scrollHeight-100>0){
                        offset = (((initHeight+1)/sum)*(scrollHeight-100));
                    }
                    $(".libraryFt").animate({
                        scrollTop:offset+"px"
                    },800);
                    return false;
                }else{
                    initHeight++;
                }
            });
        }
        function locationForBot(suggestion){
            var currentNodeId = suggestion.data;
            var initHeight = 0;
            var sum = $("#library").find("i").length;
            $.each($("#library").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    var offset = 0;
                    if(scrollHeight-100>0){
                        offset = (((initHeight+1)/sum)*(scrollHeight-100));
                    }
                    $(".libraryFt").animate({
                        scrollTop:offset+"px"
                    },800);
                    return false;
                }else{
                    initHeight++;
                }
            });
        }
        function locationForBotFlag(suggestion){
            var currentNodeId = suggestion.data;
            var flag = false;
            var sum = $("#library").find("i").length;
            $.each($("#library").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    if(sum>=10 && scrollHeight>=$scope.vm.winHeight){
                        flag = true;
                    }else if(sum<10){
                        flag = true;
                    }
                    return false;
                }
            });
            return flag;
        }
        //搜寻节点
        function searchNodeForBot(suggestion){
            var currentNodeId = suggestion.data;
            var firstNode = $("#library").find("i").filter(":eq(0)");
            if($(firstNode).css("backgroundPosition")=="0% 0%"){
                appendLibraryTree(firstNode);
            }else if($(firstNode).parent().parent().next()==null){
                appendLibraryTree(firstNode);
            }
            if($(firstNode).attr("data-option")==currentNodeId){
                clearColorLibrary();
                $scope.vm.knowledgeBotLibraryVal = $(firstNode).next().html();
                $scope.vm.botLibrarySelectValue = $(firstNode).next().attr("data-option");
                $scope.vm.botSelectType = $(firstNode).next().attr("type-option");
                $scope.vm.categoryLibraryAttributeName = $(firstNode).next().attr("node-option");
                $(firstNode).next().attr("style","color:black;font-weight:bold;");
                $scope.$apply();
            }else{
                recursionForBot(suggestion,firstNode);
            }
        }
        function recursionForBot(suggestion,node){
            var list = $("#library").find("li");
            var flag = false;
            $.each(list,function(index,value){
                if($(value).attr("data-option")==$(node).attr("data-option")){
                    var currNode = $(value).find("i").filter(":eq(0)");
                    if($(currNode).attr("data-option")==suggestion.data){
                        clearColorLibrary();
                        $scope.vm.knowledgeBotLibraryVal = $(currNode).next().html();
                        $scope.vm.botLibrarySelectValue = $(currNode).next().attr("data-option");
                        $scope.vm.botSelectType = $(currNode).next().attr("type-option");
                        $scope.vm.categoryLibraryAttributeName = $(currNode).next().attr("node-option");
                        $(currNode).next().attr("style","color:black;font-weight:bold;");
                        $scope.$apply();
                        flag = true;
                        //跳出
                        return true;
                    }else{
                        if(flag==true){
                            return true;
                        }
                        //展开
                        if($(currNode).css("backgroundPosition")=="0% 0%"){
                            appendLibraryTree(currNode);
                        }else if($(currNode).parent().parent().next()==null){
                            appendLibraryTree(currNode);
                        }
                        //递归
                        recursionForBot(suggestion,currNode);
                    }
                }
            });
        }
        //加载业务树
        initBot();
        initBotLibrary();
        //获取root 数据
        function initBot(){
            $("#category").empty();
            httpRequestPostAsync("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId": categoryApplicationId,
                "categoryPid": "root"
            },function(data){
                var html =  '<ul class="menus show">';
                for(var i=0;data.data != null && i<data.data.length;i++){
                    html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                        '<div class="slide-a">'+
                        '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                        '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                        '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' type-option="'+data.data[i].categoryTypeId+'" node-option="'+data.data[i].categoryAttributeName+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                        '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[i])+'><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                        '</a>' +
                        '</div>' +
                        '</li>';
                }
                html+='</ul>';
                $("#category").append(html);
                var firstNode = $("#category").find("i").filter(":eq(0)");
                if($(firstNode).css("backgroundPosition")=="0% 0%"){
                    appendTree(firstNode);
                }else if($(firstNode).parent().parent().next()==null){
                    appendTree(firstNode);
                }
            },function(){
            });
        }
        function initBotLibrary(){
            $("#library").empty();
            httpRequestPost("/api/ms/modeling/categorylibrary/listbycategorypid",{
                "categoryPid": "root",
                "categorySceneId": categorySceneId,
            },function(data){
                var html =  '<ul class="menus show">';
                for(var i=0;data.data != null && i<data.data.length;i++){
                    html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                        '<div class="slide-a">'+
                        '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                        '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                        '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' node-option="'+data.data[i].categoryAttributeName+'" type-option="'+data.data[i].categoryTypeId+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                        '&nbsp;<p class="treeEdit" bot-info='+toCategoryLibraryString(data.data[i])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                        '</a>' +
                        '</div>' +
                        '</li>';
                }
                html+='</ul>';
                $("#library").append(html);
                var firstNode = $("#library").find("i").filter(":eq(0)");
                if($(firstNode).css("backgroundPosition")=="0% 0%"){
                    appendLibraryTree(firstNode);
                }else if($(firstNode).parent().parent().next()==null){
                    appendLibraryTree(firstNode);
                }
            },function(){
            });
        }
        //节点样式转换
        function nodeStyleSwitch(attrType){
            if(attrType=="edge"){
                return "style='color:#ED7D31;'";
            }else{
                return "";
            }
        }
        //显示节点描述
        function categoryDescribeView(describeStr){
            if(nullCheck(describeStr)==true){
                return "title='"+describeStr+"'";
            }
            return "";
        }
        $("#category").on("click","span",function(){
            clearColor();
            $scope.vm.knowledgeBotVal = $(this).html();
            $scope.vm.botSelectValue = $(this).attr("data-option");
            $scope.vm.categoryAttributeName = $(this).attr("node-option");
            if($scope.vm.categoryAttributeName=="node"){
                $(this).attr("style","color:black;font-weight:bold;");
            }else if($scope.vm.categoryAttributeName=="edge"){
                $(this).attr("style","color:#ED7D31;font-weight:bold;");
            }
            $scope.$apply()
        });
        $("#library").on("click","span",function(){
            clearColorLibrary();
            $scope.vm.knowledgeBotLibraryVal = $(this).html();
            $scope.vm.botLibrarySelectValue = $(this).attr("data-option");
            $scope.vm.botSelectType = $(this).attr("type-option");
            $scope.vm.categoryLibraryAttributeName = $(this).attr("node-option");
            if($scope.vm.categoryLibraryAttributeName=="node"){
                $(this).attr("style","color:black;font-weight:bold;");
            }else if($scope.vm.categoryLibraryAttributeName=="edge"){
                $(this).attr("style","color:#ED7D31;font-weight:bold;");
            }
            $scope.$apply()
        });
        //点击下一级 bot 下拉数据填充以及下拉效果
        $("#category").on("click",'i',function(){
            appendTree(this);
        });
        $("#library").on("click",'i',function(){
            appendLibraryTree(this);
        });
        //加载子树
        function appendTree(obj){
            var id = $(obj).attr("data-option");
            var that = $(obj);
            if(!that.parent().parent().siblings().length){
                that.css("backgroundPosition","0% 100%");
                httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId": categoryApplicationId,
                    "categoryPid": id
                },function(data){
                    if(data.data){
                        var html = '<ul class="menus">';
                        for(var i=0;i<data.data.length;i++){
                            html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                                '<div class="slide-a">'+
                                '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' type-option="'+data.data[i].categoryTypeId+'" node-option="'+data.data[i].categoryAttributeName+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[i])+'><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                        }
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent().parent()));
                        that.parent().parent().next().slideDown();
                    }
                },function(err){
                });
            }else{
                if(that.css("backgroundPosition")=="0% 0%"){
                    that.css("backgroundPosition","0% 100%");
                    that.parent().parent().next().slideDown();
                }else{
                    that.css("backgroundPosition","0% 0%");
                    that.parent().parent().next().slideUp();
                }
            }
        }
        function appendLibraryTree(obj){
            var id = $(obj).attr("data-option");
            var that = $(obj);
            if(!that.parent().parent().siblings().length){
                that.css("backgroundPosition","0% 100%");
                httpRequestPostAsync("/api/ms/modeling/categorylibrary/listbycategorypid",{
                    "categoryPid": id
                },function(data){
                    if(data.data){
                        var html = '<ul class="menus">';
                        for(var i=0;i<data.data.length;i++){
                            html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                                '<div class="slide-a">'+
                                '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' node-option="'+data.data[i].categoryAttributeName+'" type-option="'+data.data[i].categoryTypeId+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryLibraryString(data.data[i])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                        }
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent().parent()));
                        that.parent().parent().next().slideDown();
                    }
                },function(err){
                });
            }else{
                if(that.css("backgroundPosition")=="0% 0%"){
                    that.css("backgroundPosition","0% 100%");
                    that.parent().parent().next().slideDown();
                }else{
                    that.css("backgroundPosition","0% 0%");
                    that.parent().parent().next().slideUp();
                }
            }
        }
        //清除已选颜色
        function clearColorLibrary(){
            $.each($("#library").find("span"),function(index,value){
                if($(this).attr("node-option")=="node"){
                    $(this).attr("style","");
                }else if($(this).attr("node-option")=="edge"){
                    $(this).attr("style","color:#ED7D31;");
                }
            });
        }
        //清除已选颜色
        function clearColor(){
            $.each($("#category").find("span"),function(index,value){
                if($(this).attr("node-option")=="node"){
                    $(this).attr("style","");
                }else if($(this).attr("node-option")=="edge"){
                    $(this).attr("style","color:#ED7D31;");
                }
            });
        }
        //自动转换图标类型
        function styleSwitch(type,leaf,attrType){
            var styleHidden = "display: inline-block;";
            if(leaf==0){
                styleHidden="display:none;";
            }
            if(attrType=="node"){
                return "style='"+styleHidden+"position: relative;top: -1px;margin-right: 2px;width: 15px;height: 15px;vertical-align: middle;background-position: left top;background-repeat: no-repeat;background-image: url(../../images/images/aside-nav-icon.png);'";
            }
            var style ='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-rq.png);"';
            switch (type){
                case 161:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-sx.png);"';break;
                case 160:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-lc.png);"';break;
                case 162:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-dy.png);"';break;
            }
            return style;
        }
        //套用
        function applyCategory(){
            if(applyValid()==false){
                return;
            }
            httpRequestPost("/api/ms/modeling/categorylibrary/applycategorybyid",{
                "categoryId": $scope.vm.botLibrarySelectValue,
                "categoryPid": $scope.vm.botSelectValue,
                "categoryApplicationId": categoryApplicationId,
                "categoryModifierId": categoryModifierId
            },function(data){
                if(responseView(data)==true){
                    initBot();
                }
            },function(err){
            });
        }
        //套用验证
        function applyValid(){
            //rule edge->node
            if($scope.vm.botLibrarySelectValue=="root"){
                layer.msg("请选择要套用的bot节点");
                return false;
            }
            if($scope.vm.categoryAttributeName==$scope.vm.categoryLibraryAttributeName){
                if($scope.vm.categoryAttributeName=="edge"){
                    layer.msg("关系以下必须添加节点");
                }else{
                    layer.msg("节点以下必须添加关系");
                }
                return false;
            }
            return true;
        }
        $("#category").on("click",".delete",function(){
            $scope.vm.botInfo = $(this).parent().attr("bot-info");
            botInfoToCategoryAttribute();
            deleteBot();
        });
        $("#library").on("click",".edit",function(){
            $scope.vm.botLibraryInfo = $(this).parent().attr("bot-info");
            botLibraryInfoToCategoryAttribute();
            editBotLibrary();
        });
        $("#library").on("click",".delete",function(){
            $scope.vm.botLibraryInfo = $(this).parent().attr("bot-info");
            botLibraryInfoToCategoryAttribute();
            deleteBotLibrary();
        });
        function deleteBot(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationDevelopment/deleteCategory.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        httpRequestPost("/api/ms/modeling/category/deletebycategoryid",{
                            "categoryId": $scope.vm.categoryId,
                            "categoryApplicationId": $scope.vm.categoryApplicationId,
                            "categoryPid": $scope.vm.categoryPid,
                            "categoryLeaf": $scope.vm.categoryLeaf
                        },function(data){
                            if(responseView(data)==true){
                                //重新加载
                                reloadBot(data,1);
                            }
                        },function(err){
                        });
                    }else{
                    }
                }
            });
        }
        //属性填充
        function botInfoToCategoryAttribute(){
            if($scope.vm.botInfo){
                var category = JSON.parse($scope.vm.botInfo);
                $scope.vm.botSelectValue=category.categoryId;
                $scope.vm.categoryId=category.categoryId;
                $scope.vm.categoryTypeId=category.categoryTypeId;
                $scope.vm.categorySceneId=category.categorySceneId;
                $scope.vm.categoryAttributeName=category.categoryAttributeName;
                $scope.vm.categoryName=category.categoryName;
                $scope.vm.categoryPid=category.categoryPid;
                $scope.vm.categoryApplicationId=category.categoryApplicationId;
                $scope.vm.categoryLeaf=category.categoryLeaf;
            }
        }
        //属性填充
        function botLibraryInfoToCategoryAttribute(){
            if($scope.vm.botLibraryInfo){
                var category = JSON.parse($scope.vm.botLibraryInfo);
                $scope.vm.botLibrarySelectValue=category.categoryId;
                $scope.vm.categoryLibraryId=category.categoryId;
                $scope.vm.categoryLibraryTypeId=category.categoryTypeId;
                $scope.vm.categoryLibrarySceneId=category.categorySceneId;
                $scope.vm.categoryLibraryAttributeName=category.categoryAttributeName;
                $scope.vm.categoryLibraryName=category.categoryName;
                $scope.vm.categoryLibraryPid=category.categoryPid;
                if(nullCheck(category.categoryDescribe)==true){
                    $scope.vm.categoryLibraryDescribe=underlineToWhiteSpace(category.categoryDescribe);
                }
                $scope.vm.categoryLibraryLeaf=category.categoryLeaf;
            }
        }
        //局部加载 type:0->添加 1:删除 2:修改
        function reloadBot(data,type){
            if(type!=0){
                $.each($(".aside-navs").find("li"),function(index,value){
                    if($(value).find("i").attr("data-option")==$scope.vm.categoryId){
                        var currPid = $(value).attr("data-option");
                        var length = $(value).parent().find("li").length-1;
                        //删除以后判断 子级以下是否还有节点 如果没有隐藏下拉开关
                        if(length==0 && type==1){
                            $(value).parent().prev().find("i").attr("style","display:none");
                        }
                        //移除指定元素
                        $(value).remove();
                    }
                });
            }

            if(type==1){
                return;
            }

            if($scope.vm.botSelectValue=="root"){
                initBot();
            }else{
                var count=0;
                $.each($(".aside-navs").find("i"),function(index,value){
                    if(type==2){
                        if($(value).attr("data-option")==data.data[0].categoryPid){
                            count++;
                            var html = '<li data-option="'+data.data[0].categoryPid+'">' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[0].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[0].categoryTypeId,data.data[0].categoryLeaf,data.data[0].categoryAttributeName)+' data-option="'+data.data[0].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[0].categoryAttributeName)+' node-option="'+data.data[0].categoryAttributeName+'" type-option="'+data.data[0].categoryTypeId+'" data-option="'+data.data[0].categoryId+'" title="'+data.data[0].categoryName+'">'+subStringWithTail(data.data[0].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[0])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                            //按照修改时间排序 把数据添加到前面
                            $(value).parent().parent().next().append(html);
                        }
                    }else if(type==0){
                        if($(value).attr("data-option")==data.data[0].categoryPid){
                            count++;
                            var html = '<li data-option="'+data.data[0].categoryPid+'">' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[0].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[0].categoryTypeId,data.data[0].categoryLeaf,data.data[0].categoryAttributeName)+' data-option="'+data.data[0].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[0].categoryAttributeName)+' node-option="'+data.data[0].categoryAttributeName+'" type-option="'+data.data[0].categoryTypeId+'" data-option="'+data.data[0].categoryId+'" title="'+data.data[0].categoryName+'">'+subStringWithTail(data.data[0].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[0])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                            //按照修改时间排序 把数据添加到前面
                            var obj = $(value).parent().parent().next();
                            var sty = styleSwitch(data.data[0].categoryTypeId,1,data.data[0].categoryAttributeName);
                            sty = sty.substring(7,sty.length-1);
                            if($(value).parent().parent().next()!=null){
                                var len = $(value).parent().parent().next().find("li").length;
                                if(len>0){
                                    $(value).parent().parent().next().append(html);
                                }else{
                                    $(value).parent().parent().next().append(html);
                                    $(value).attr("style",sty);
                                }
                            }else{
                                var htmlAppend='<ul class="menus show">'+html+'</ul>';
                                $(value).parent().parent().parent().append(htmlAppend);
                                //加上子节点之后 把开关按钮显示
                                $(value).attr("style",sty);
                            }
                        }
                    }
                });
                if(count==0){
                    initBot();
                }
            }
        }
        function addBotLibrary(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationDevelopment/addCategoryLibrary.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e===1){
                        if(lengthCheck($("#categoryLibraryNameAdd").val(),0,50)==false){
                            $("#addErrorView").html($scope.vm.categoryNameNullOrBeyondLimit);
                            return false;
                        }
                        if(isHtmlLabel($("#categoryLibraryNameAdd").val())){
                            $("#addErrorView").html($scope.vm.notContainHtmlLabel);
                            return false;
                        }
                        if(repeatCheckForCategory("#addErrorView",0)==false){
                            return false;
                        }
                        if(nullCheck($("#categoryLibraryDescribe").val())==true){
                            if(lengthCheck($("#categoryLibraryDescribe").val(),0,2000)==false){
                                $("#describeErrorView").html($scope.vm.categoryDescribeBeyondLimit);
                                return false;
                            }else if(isHtmlLabel($("#categoryLibraryDescribe").val())) {
                                $("#describeErrorView").html($scope.vm.notContainHtmlLabel);
                                return false;
                            }else{
                                $scope.vm.categoryLibraryDescribe=$("#categoryLibraryDescribe").val();
                            }
                        }
                        httpRequestPost("/api/ms/modeling/categorylibrary/add",{
                            "categoryPid": $scope.vm.botLibrarySelectValue,
                            "categoryAttributeName": $scope.vm.categoryLibraryAttributeName,
                            "categoryName": $("#categoryLibraryNameAdd").val(),
                            "categoryTypeId": $("#categoryLibraryTypeIdAdd").val(),
                            "categoryModifierId": categoryModifierId,
                            "categoryDescribe": $scope.vm.categoryLibraryDescribe,
                            "categorySceneId": categorySceneId,
                            "categoryLeaf": 0
                        },function(data){
                            if(responseView(data)==true){
                                //重新加载
                                reloadBotLibrary(data,0);
                            }
                            $("#categoryLibraryDescribe").val('');
                        },function(err){
                        });
                    }else{
                    }
                }
            });
            if(dialog){
                $timeout(function () {
                    disableAttributeTypeForApply();
                    $("#categoryLibraryNameAdd").blur(function(){
                        if(lengthCheck($("#categoryLibraryNameAdd").val(),0,50)==false){
                            $("#addErrorView").html($scope.vm.categoryNameNullOrBeyondLimit);
                        }else if(isHtmlLabel($("#categoryLibraryNameAdd").val())){
                            $("#addErrorView").html($scope.vm.notContainHtmlLabel);
                        }else{
                            $("#addErrorView").html('');
                            repeatCheckForCategory("#addErrorView",0);
                        }
                    });
                }, 100);
            }
        }
        /**
         * 类目名称城府判断  0:添加时的重复判断 1:修改时的重复判断
         * @param type
         * @returns {boolean}
         */
        function repeatCheckForCategory(selector,type){
            var flag = false;
            var request = new Object();
            if(type==1){
                request.categoryId=$scope.vm.categoryLibraryId;
                request.categoryPid=$scope.vm.categoryLibraryPid;
                request.categoryAttributeName=$("#categoryLibraryName").val();
                request.categoryName=$("#categoryLibraryName").val();
                request.categorySceneId=categorySceneId;
            }else{
                request.categoryPid=$scope.vm.botLibrarySelectValue;
                request.categoryAttributeName=$("#categoryLibraryNameAdd").val();
                request.categoryName=$("#categoryLibraryNameAdd").val();
                request.categorySceneId=categorySceneId;
            }
            httpRequestPostAsync("/api/ms/modeling/categorylibrary/repeatcheck",request,function(data){
                if(responseWithoutView(data)==false){
                    if (data) {
                        $(selector).html(data.info);
                    }
                }else{
                    flag = true;
                }
            },function(err){
            });
            return flag;
        }
        function editBotLibrary(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationDevelopment/editCategoryLibrary.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e===1){
                        if(lengthCheck($("#categoryLibraryName").val(),0,50)==false){
                            $("#editErrorView").html($scope.vm.categoryNameNullOrBeyondLimit);
                            return false;
                        }
                        if(isHtmlLabel($("#categoryLibraryName").val())){
                            $("#editErrorView").html($scope.vm.notContainHtmlLabel);
                            return false;
                        }
                        if(repeatCheckForCategory("#editErrorView",1)==false){
                            return false;
                        }
                        if(nullCheck($("#categoryLibraryDescribe").val())==true){
                            if(lengthCheck($("#categoryLibraryDescribe").val(),0,2000)==false){
                                $("#describeErrorView").html($scope.vm.categoryDescribeBeyondLimit);
                                return false;
                            }else if(isHtmlLabel($("#categoryLibraryDescribe").val())){
                                $("#describeErrorView").html($scope.vm.notContainHtmlLabel);
                                return false;
                            }else{
                                $scope.vm.categoryLibraryDescribe=$("#categoryLibraryDescribe").val();
                            }
                        }
                        httpRequestPost("/api/ms/modeling/categorylibrary/updatebycategoryid",{
                            "categoryId": $scope.vm.categoryLibraryId,
                            "categoryPid": $scope.vm.categoryLibraryPid,
                            "categoryAttributeName": $scope.vm.categoryLibraryAttributeName,
                            "categoryName": $("#categoryLibraryName").val(),
                            "categoryTypeId": $("#categoryLibraryTypeId").val(),
                            "categoryModifierId": categoryModifierId,
                            "categoryDescribe": $scope.vm.categoryLibraryDescribe,
                            "categorySceneId": categorySceneId,
                            "categoryLeaf": $scope.vm.categoryLibraryLeaf
                        },function(data){
                            if(responseView(data)==true){
                                //重新加载
                                reloadBotLibrary(data,2);
                            }
                            $("#categoryLibraryDescribe").val('')
                        },function(err){
                        });
                    }else{
                    }
                    //初始节点类型
                    //$scope.vm.categoryLibraryAttributeName="edge";
                }
            });
            if(dialog){
                $timeout(function () {
                    $("#categoryLibraryName").blur(function(){
                        if(lengthCheck($("#categoryLibraryName").val(),0,50)==false){
                            $("#editErrorView").html($scope.vm.categoryNameNullOrBeyondLimit);
                        }else if(isHtmlLabel($("#categoryLibraryName").val())){
                            $("#editErrorView").html($scope.vm.notContainHtmlLabel);
                        }else{
                            $("#editErrorView").html('');
                            repeatCheckForCategory("#editErrorView",1);
                        }
                    });
                    $("#categoryLibraryTypeId").empty();
                    var attrArr = [];
                    attrArr[0]={name:"默认",value:163};
                    attrArr[1]={name:"流程",value:161};
                    attrArr[2]={name:"划分",value:160};
                    attrArr[3]={name:"属性",value:162};
                    for(var index=0;index<attrArr.length;index++){
                        if($scope.vm.categoryLibraryAttributeName=="edge"){
                            $("#categoryLibraryTypeId").append('<option value='+attrArr[index].value+'>'+attrArr[index].name+'</option>');
                        }else{
                            if((attrArr[index].value==$scope.vm.botSelectType)>0){
                                $("#categoryLibraryTypeId").append('<option value='+attrArr[index].value+'>'+attrArr[index].name+'</option>');
                            }else{
                                $("#categoryLibraryTypeId").append('<option disabled="disabled" style="background-color: lightgrey;" value='+attrArr[index].value+'>'+attrArr[index].name+'</option>');
                            }
                        }
                    }
                    $("#categoryLibraryTypeId").val($scope.vm.botSelectType);
                }, 100);
            }
        }
        function deleteBotLibrary(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationDevelopment/deleteCategory.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        httpRequestPost("/api/ms/modeling/categorylibrary/deletebycategoryid",{
                            "categoryId": $scope.vm.categoryLibraryId,
                            "categoryPid": $scope.vm.categoryLibraryPid,
                            "categoryLeaf": $scope.vm.categoryLibraryLeaf
                        },function(data){
                            if(responseView(data)==true){
                                //重新加载
                                reloadBotLibrary(data,1);
                            }
                        },function(err){
                        });
                    }else{
                    }
                    //初始节点类型
                    $scope.vm.categoryLibraryAttributeName="edge";
                }
            });
        }
        //返回状态显示
        function responseView(data){
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                return true;
            }
            return false;
        }
        //返回状态显示
        function responseWithoutView(data){
            if(data==null){
                return false;
            }
            if(data.status==$scope.vm.success){
                return true;
            }
            return false;
        }
        //局部加载 type:0->添加 1:删除 2:修改
        function reloadBotLibrary(data,type){
            if(type!=0){
                $.each($("#library").find("li"),function(index,value){
                    if($(value).find("i").attr("data-option")==$scope.vm.botLibrarySelectValue){
                        //删除以后判断 子级以下是否还有节点 如果没有隐藏下拉开关
                        if(length==0 && type==1){
                            $(value).parent().prev().find("i").attr("style","display:none");
                        }
                        //移除指定元素
                        $(value).remove();
                    }
                });
            }

            if(type==1){
                return;
            }

            if($scope.vm.botLibrarySelectValue=="root"){
                initBotLibrary();
            }else{
                var count = 0;
                $.each($("#library").find("i"),function(index,value){
                    if(type==2){
                        if($(value).attr("data-option")==data.data[0].categoryPid){
                            count++;
                            var html = '<li data-option="'+data.data[0].categoryPid+'">' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[0].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[0].categoryTypeId,data.data[0].categoryLeaf,data.data[0].categoryAttributeName)+' data-option="'+data.data[0].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[0].categoryAttributeName)+' node-option="'+data.data[0].categoryAttributeName+'" type-option="'+data.data[0].categoryTypeId+'" data-option="'+data.data[0].categoryId+'"title="'+data.data[0].categoryName+'">'+subStringWithTail(data.data[0].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryLibraryString(data.data[0])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                            //按照修改时间排序 把数据添加到前面
                            $(value).parent().parent().next().append(html);
                        }
                    }else if(type==0){
                        if($(value).attr("data-option")==data.data[0].categoryPid){
                            count++;
                            var html = '<li data-option="'+data.data[0].categoryPid+'">' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[0].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[0].categoryTypeId,data.data[0].categoryLeaf,data.data[0].categoryAttributeName)+' data-option="'+data.data[0].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[0].categoryAttributeName)+' node-option="'+data.data[0].categoryAttributeName+'" type-option="'+data.data[0].categoryTypeId+'" data-option="'+data.data[0].categoryId+'"title="'+data.data[0].categoryName+'">'+subStringWithTail(data.data[0].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryLibraryString(data.data[0])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                            //按照修改时间排序 把数据添加到前面
                            var obj = $(value).parent().parent().next();
                            var nodeType = "edge";
                            if(data.data[0].categoryAttributeName=="node"){
                                nodeType = "edge";
                            }else if(data.data[0].categoryAttributeName=="edge"){
                                nodeType = "node";
                            }
                            var sty = styleSwitch(data.data[0].categoryTypeId,1,nodeType);
                            sty = sty.substring(7,sty.length-1);
                            if($(value).parent().parent().next()!=null){
                                var len = $(value).parent().parent().next().find("li").length;
                                if(len>0){
                                    $(value).parent().parent().next().append(html);
                                }else{
                                    $(value).parent().parent().next().append(html);
                                    $(value).attr("style",sty);
                                }
                            }else{
                                var htmlAppend='<ul class="menus show">'+html+'</ul>';
                                $(value).parent().parent().parent().append(htmlAppend);
                                $(value).attr("style",sty);
                            }
                        }
                    }
                });
                if(count==0){
                    initBotLibrary();
                }
            }
        }
        //禁用指定属性类型
        function disableAttributeTypeForApply(){
            $("#categoryLibraryTypeIdAdd").empty();
            var attrArr = [];
            attrArr[0]={name:"默认",value:163};
            attrArr[1]={name:"流程",value:161};
            attrArr[2]={name:"划分",value:160};
            attrArr[3]={name:"属性",value:162};
            for(var index=0;index<attrArr.length;index++){
                if($scope.vm.categoryLibraryAttributeName=="node"){
                    $("#categoryLibraryTypeIdAdd").append('<option value='+attrArr[index].value+'>'+attrArr[index].name+'</option>');
                }else{
                    if((attrArr[index].value==$scope.vm.botSelectType)>0){
                        $("#categoryLibraryTypeIdAdd").append('<option value='+attrArr[index].value+'>'+attrArr[index].name+'</option>');
                    }else{
                        $("#categoryLibraryTypeIdAdd").append('<option disabled="disabled" style="background-color: lightgrey;" value='+attrArr[index].value+'>'+attrArr[index].name+'</option>');
                    }
                }
            }
            $("#categoryLibraryTypeIdAdd").val($scope.vm.botSelectType);
        }
    }
]);89
// Source: app/static/myApplication/js/controller/channelManage_controller.js
/**
 * Created by mileS on 2017/3/28.
 */

angular.module('myApplicationSettingModule').controller('channelManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout) {
        //渠道管理
        $scope.vm = {
            channelData : "",   // 渠道数据
            paginationConf : ""  ,//分页条件
            pageSize : 3 , //默认每页数量
            channelDataTotal: "", //渠道数据记录总数
            addChannel : addChannel,  //添加渠道
            editChannel : editChannel, //编辑渠道
            delChannel : delChannel, //删除渠道
            changeChannel : changeChannel, //修改渠道状态
            channelName : "",  //渠道名称
            statusId : "",  //状态
            channelStatus : "",
            dialogTitle : "" //对话框标题
        };
        // 黑名单管理
        $scope.vmo = {
            blackListData : "",  //黑名单数据
            paginationConf : ""  ,//分页条件
            pageSize : 2 , //默认每页数量
            blackListDataTotal : "", //黑名单数据记录总数
            addBlacklist : addBlacklist, //添加黑名单
            delBlacklist : delBlacklist, //移除黑名单
            batchDelBlacklist : batchDelBlacklist, //批量移除黑名单
            channelList : "", //渠道列表
            blackListIdentify : "",  //黑名单标识
            blackListRemark : "", //黑名单备注
            channelId : "", //渠道id
            addBlackListCheck : addBlackListCheck,
            selectedList  : []  ,//已选择黑名单 ,
            isSelectedAll : false ,
            selectAll : selectAll , //全部加入黑名单
            selectSingle : selectSingle
        };
        //获取所有的渠道
        (function getChannelList(){
            httpRequestPost("api/application/channel/listChannels",{
                "applicationId": APPLICATION_ID
            },function(data){
                $scope.vmo.channelList = data.data;
            },function(){
                console.log("请求失败")
            })
        })();
        //获取状态列表
        (function getStatusList(){
            httpRequestPost("/api/application/channel/listStatus",{
                "applicationId": APPLICATION_ID
            },function(data){
                $scope.vm.channelStatus = data.data;
            },function(){
                console.log("请求失败")
            })
        })() ;
        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listChannelData(1);
        //请求渠道列表
        function listChannelData(index){
            httpRequestPost("/api/application/channel/listChannelByPage",{
                "applicationId": APPLICATION_ID,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.channelData = data.data;
                $scope.vm.channelDataTotal =data.total;
                console.log(Math.ceil(data.total/$scope.vm.pageSize))
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listChannelData(current);
                }, 100)
            }
        },true);
        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listBlackListData(1);
        //请求黑名单列表
        function listBlackListData(index){
            httpRequestPost("/api/application/channel/listBlackListByPage",{
                "applicationId": APPLICATION_ID,
                "index" : (index-1)*$scope.vmo.pageSize,
                "pageSize": $scope.vmo.pageSize
            },function(data){

                $scope.vmo.blackListData = data.data;
                $scope.vmo.blackListDataTotal =data.total;
                $scope.vmo.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vmo.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout2 ;
        $scope.$watch('vmo.paginationConf.currentPage', function(current){
            if(current){
                if (timeout2) {
                    $timeout.cancel(timeout2)
                }
                timeout2 = $timeout(function () {
                    initBlackList() ;
                    listBlackListData(current);
                }, 100)
            }
        },true);

        //添加渠道窗口
        function addChannel(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/channelManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if($scope.vm.channelName==null||$scope.vm.channelName==""){
                            layer.msg("渠道名称不能为空！");
                            return ;
                        }
                        httpRequestPost("/api/application/channel/addChannel",{
                            "applicationId": APPLICATION_ID,
                            "channelName": $scope.vm.channelName,
                            "statusId": $scope.vm.statusId.statusId,
                            "channelUpdateId": USER_ID
                        },function(data){          //类名重複
                            if(data.data===10002){
                                layer.msg("渠道重复！");
                                $scope.vm.channelName = "";
                            }else{
                                if(data.data===10001){
                                    layer.msg("添加出错了！");
                                }else{
                                    layer.msg("添加成功");
                                    //$state.reload();
                                    listChannelData(1);
                                }
                            }
                        },function(){
                            layer.msg("添加失敗");
                            $scope.vm.channelName = "";
                        })
                    }else{
                        $scope.vm.channelName = "";
                    }
                }
            });
        }


        //修改渠道
        function editChannel(item){
            $scope.vm.dialogTitle="编辑渠道";
            $scope.vm.channelName = item.channelName;
            console.log($scope.vm.channelStatus);
            for(var i in $scope.vm.channelStatus){
                if($scope.vm.channelStatus[i].statusId==item.statusId){//获取选中项.
                    $scope.vm.statusId =$scope.vm.channelStatus[i];
                    break;
                }
            }
            addDialog(singleEdit,item);
        }

        //编辑弹窗，添加公用
        function addDialog(callback,item){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/channelManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        callback(item)
                    }else{
                        $scope.vm.channelName = "";
                    }
                }
            });
        }

        //编辑事件
        function singleEdit(item){
            if($scope.vm.channelName==null||$scope.vm.channelName==""){
                layer.msg("渠道名称不能为空！");
                return ;
            }
            httpRequestPost("/api/application/channel/editChannel",{
                "channelId": item.channelId,
                "applicationId": APPLICATION_ID,
                "channelName": $scope.vm.channelName,
                "statusId": $scope.vm.statusId.statusId,
                "channelUpdateId": USER_ID
            },function(data){
                if(data.data==10002){
                    layer.msg("渠道名称重复");
                }else{
                    if(data.data==10000){
                        layer.msg("编辑成功");
                        //$state.reload();
                        listChannelData(1);
                    }else{
                        layer.msg("编辑失败")
                    }
                }
            },function(){
                console.log("编辑失败")
            })
        }

        //删除渠道
        function delChannel(channelId){
            httpRequestPost("/api/application/channel/delChannel",{
                "channelId": channelId
            },function(data){
                if(data.data==10000){
                    layer.msg("删除成功");
                    //$state.reload();
                    listChannelData(1);
                }else{
                    layer.msg("删除失败")
                }
            },function(){
                layer.msg("请求失败")
            })
        }

        //修改渠道状态
        function changeChannel(channelId,statusId){
            if(statusId == 50001){
                var dialog = ngDialog.openConfirm({
                    template: "/static/admin/updateChannel1.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {
                        if (e === 1) {
                            httpRequestPost("/api/application/channel/changeStatus",{
                                "channelId": channelId,
                                "applicationId": APPLICATION_ID
                            },function(data){
                                if(data.data===10000){
                                    layer.msg("状态修改成功");
                                    listChannelData(1);
                                }else if(data.status == 12008){
                                    layer.msg("存在是指使用该渠道，请修改知识后操作");
                                }else{
                                    layer.msg("状态修改失败")
                                }
                            },function(){
                                layer.msg("请求失败")
                            })
                        }
                    }
                });
            }else{
                var dialog = ngDialog.openConfirm({
                    template: "/static/admin/updateChannel.html",
                    scope: $scope,
                    closeByDocument: false,
                    closeByEscape: true,
                    showClose: true,
                    backdrop: 'static',
                    preCloseCallback: function (e) {
                        if (e === 1) {
                            httpRequestPost("/api/application/channel/changeStatus",{
                                "channelId": channelId
                            },function(data){
                                if(data.data===10000){
                                    layer.msg("状态修改成功");
                                    //$state.reload();
                                    listChannelData(1);
                                }else{
                                    layer.msg("状态修改失败")
                                }
                            },function(){
                                layer.msg("请求失败")
                            })
                        }
                    }
                });
            }
        }
        //全选
        function selectAll (){
            if(!$scope.vmo.isSelectedAll){
                $scope.vmo.isSelectedAll = true;
                $scope.vmo.selectedList = [];
                angular.forEach($scope.vmo.blackListData,function(item){
                    $scope.vmo.selectedList.push(item.blackListId);
                });
            }else{
                $scope.vmo.isSelectedAll = false;
                $scope.vmo.selectedList = [];
            }
        }
        // 黑名单单个添加删除
        function selectSingle(id){
            if($scope.vmo.selectedList.inArray(id)){
                $scope.vmo.selectedList.remove(id);
                $scope.vmo.isSelectedAll = false;
            }else{
                $scope.vmo.selectedList.push(id);
            }
            if($scope.vmo.selectedList.length==$scope.vmo.blackListData.length){
                $scope.vmo.isSelectedAll = true;
            }
            console.log($scope.vmo.selectedList)
        }
        //添加黑名单
        function addBlacklist(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/blacklistManageDialog.html",
                width:"500px" ,
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/api/application/channel/addBlackList",{
                            "applicationId": APPLICATION_ID,
                            "blackListIdentify": $scope.vmo.blackListIdentify,
                            "blackListRemark": $scope.vmo.blackListRemark,
                            "blackListUpdateId": USER_ID,
                            "channelId": $scope.vmo.channelId
                        },function(data){
                            $scope.vmo.blackListRemark = "" ,
                            $scope.vmo.isSelectedAll = false ;
                            $scope.vmo.blackListIdentify = "";
                            layer.msg("添加成功");
                            if($scope.vmo.selectedList.length == $scope.vmo.pageSize){
                                $scope.vmo.selectedList.pop() ;
                                $scope.vmo.isSelectedAll = false
                            }
                            listBlackListData(1) ;
                        },function(){
                            initBlackBackUp()
                        })
                    }else{
                        initBlackBackUp()
                    }
                }
            });
        }
        //檢測是否合理黑名单内容是否合理
        function addBlackListCheck(){
            if(!$scope.vmo.blackListIdentify){
                layer.msg("请填写正确的ip标识") ;
            }else{
                httpRequestPost("/api/application/channel/checkBlackList",{
                    "applicationId": APPLICATION_ID,
                    "blackListIdentify": $scope.vmo.blackListIdentify,
                    "channelId": $scope.vmo.channelId
                },function(data){          //类名重複
                    if(data.data===10002){
                        layer.msg("黑名单重复！");
                        initBlackBackUp()
                    }else{
                        if(data.data===10003){
                            layer.msg("黑名单IP不合法！");
                            initBlackBackUp()
                        }else{
                            ngDialog.closeAll(1) ;
                        }
                    }
                })
            }
        };
        //移除黑名单
        function delBlacklist(blackListId){
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    if(e === 1){
                        httpRequestPost("/api/application/channel/deleteBlackList",{
                            "applicationId": APPLICATION_ID,
                            "blackListId": blackListId
                        },function(data){
                            initBlackList() ;
                            layer.msg("移除成功");
                            listBlackListData(1);
                        },function(error){
                            console.log(error)
                        })
                    }
                }
            });
        }

        //批量移除黑名单
        function batchDelBlacklist(){
            if($scope.vmo.selectedList.length == 0){
                layer.msg("请选择要删除的黑名单!");
                return;
            }else{
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    if(e === 1){
                        httpRequestPost("/api/application/channel/batchDelBlackList",{
                            "applicationId": APPLICATION_ID,
                            "blackListIds": $scope.vmo.selectedList
                        },function(data){
                            if(data.data===10000){
                                initBlackList() ;
                                layer.msg("移除成功");
                                listBlackListData(1);
                            }else{
                                layer.msg("移除失败");
                            }
                        },function(error){
                            console.log(error)
                        })
                    }else{

                    }
                }
            });}
        }
        //黑名单列表选择删除
        function initBlackList(){
            $scope.vmo.selectedList = [] ;
            $scope.vmo.isSelectedAll = false
        }
        // 黑名单 添加 数据初始化
        function initBlackBackUp(){
            $scope.vmo.blackListIdentify = "";
            $scope.vmo.blackListRemark = "";
        }
    }
]);
// Source: app/static/myApplication/js/controller/chatPageConfig_controller.js
/**
 * Created by mileS on 2017/3/28.
 */
angular.module('knowledgeManagementModule').controller('chatPageConfigController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog", "$cookieStore","$timeout",
    function ($scope,localStorageService, $state,ngDialog, $cookieStore,$timeout) {
        $scope.vm = {
            listData : "",   // table 数据
            listKnoData : "", //知识数据
            listDataTotal : "", //总数
            pageSize : 5,
            indexV :1,
            listKnoDataTotal : "", //聊天知识库知识总数
            knowledgeId : "",
            knowledgeTitle : "",
            userId: $cookieStore.get("userId"),
            applicationId: $cookieStore.get("applicationId"),
            paginationConf : "", //分页条件
            paginationConf1 : "",
            deleteIds : [],
            selectAllCheck : false,
            hotQuestionTitle : "",
            knowledge : "",
            listDataLength : "",
            selectAllCheckDialog : false,         
            seleceAddAll : [],
            //knowledge : [],
            //========================方法=========================
            getData : getData, //返回知识列表数据
            addHotIssues : addHotIssues,  //添加方法
            toTop : toTop, //知识置顶
            move : move, //知识上移
            down : down,  //知识下移
            deleteKnowledge : deleteKnowledge, //删除知识
            selectAll : selectAll,
            selectSingle : selectSingle,
            findHotQuestion : findHotQuestion,
            findKnowledge : findKnowledge,
            selectAllDialog : selectAllDialog,
            selectSingleDialog : selectSingleDialog,
            deleteDialog : deleteDialog,

            setFlag : false   // 设置手动设置开关
        };

        function selectAllDialog(ev){
            //var self = $(ev.target);
            if(!$scope.vm.selectAllCheckDialog){
                $scope.vm.selectAllCheckDialog = true;
                $scope.vm.seleceAddAll = [];
                angular.forEach($scope.vm.listKnoData,function(item,index){
                    //console.log(item)
                    var obj = {};
                    obj.chatKnowledgeId = item.knowledgeId;
                    obj.chatKnowledgeTopic = item.knowledgeTitle;
                    obj.index = index;
                    $scope.vm.seleceAddAll.push(obj);
                    console.log(obj);
                });
            }else{
                $scope.vm.selectAllCheckDialog = false ;
                $scope.vm.seleceAddAll = [];
            }
            console.log( $scope.vm.seleceAddAll);
        }
        function deleteDialog(item){
            $scope.vm.seleceAddAll.remove(item);
            $(".selectAllBtnDialog").prop("checked",false);
            $(".selectSingle").eq(item.index).attr("checked",false);
        }

        function selectSingleDialog(ev,id,name,index){
            var self = $(ev.target);
            var prop = self.prop("checked");
            console.log(prop);
            var obj = {};
            console.log(id , name) ;
            obj.chatKnowledgeId = id;
            obj.chatKnowledgeTopic = name;
            obj.index = index;
            if(!prop){
                    angular.forEach($scope.vm.seleceAddAll,function(item,index){
                        if(id==item.chatKnowledgeId){
                            $scope.vm.seleceAddAll.splice(index,1)
                        }
                    });
                //$scope.vm.seleceAddAll.remove(obj);
                $(".selectAllBtnDialog").prop("checked",false)
            }else{
                $(".selectAllBtnDialog").prop("checked",false);
                $scope.vm.seleceAddAll.push(obj)
            }
        }

        function selectAll(){
            //var self = $(ev.target);
            if(!$scope.vm.selectAllCheck){
                $scope.vm.selectAllCheck = true;
                $scope.vm.deleteIds = [];
                angular.forEach($scope.vm.listData,function(item){
                    $scope.vm.deleteIds.push(item.hotQuestionId);
                });
            }else{
                $scope.vm.selectAllCheck = false
                $scope.vm.deleteIds = [];
            }
            console.log( $scope.vm.deleteIds)
        }
       // function selectSingle(ev,id){
       //     var self = $(ev.target);
       //     if(self.attr('checked')){
       //         self.attr('checked',false);
       //         $scope.vm.deleteIds.remove(id);
       //         $(".selectAllBtn").attr("checked",false)
       //     }else{
       //         $(".selectAllBtn").attr("checked",false)
       //         $scope.vm.deleteIds.push(id)
       //     }
       //     console.log( $scope.vm.deleteIds)
       // }
        function selectSingle(id){
            if($scope.vm.deleteIds.inArray(id)){
                $scope.vm.deleteIds.remove(id);
                $scope.vm.selectAllCheck = false;
            }else{
                $scope.vm.deleteIds.push(id);
            }
            if($scope.vm.deleteIds.length==$scope.vm.listData.length){
                $scope.vm.selectAllCheck = true;
            }
            console.log( $scope.vm.deleteIds);
        }
        //加载列表
        getData(1);
        function getData(index){
            httpRequestPost("/api/application/hotQuestion/getHotQuestionList",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
                applicationId:$scope.vm.applicationId
            },function(data){
                initChatPageConfig();
                console.log(data);
                //if(data.status == 10005){
                //    layer.msg("查询到记录为空");
                //    return;
                //}
                $scope.vm.listData = data.data.hotQuestionList;
                $scope.vm.listDataTotal = data.data.total;
                $scope.vm.listDataLength = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 8,//分页框数量
                };
                $scope.$apply()
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    initChatPageConfig();
                    getData(current);
                }, 100)
            }
        },true);
        //从聊天知识库查询知识
        function findKnowledge(index){
            httpRequestPost("/api/ms/knowledgeManage/overView/findKnowledgeByApplicationId",{
                applicationId:$scope.vm.applicationId,
                knowledgeTitle : $scope.vm.knowledge,
                pageSize : $scope.vm.pageSize,
                index : (index - 1)*$scope.vm.pageSize,
            },function(data){
                    initChatPageConfigDialog();    //7.20-add
                    if( data.data.total == 0){
                        layer.msg("查询记录为空") ;
                        $scope.vm.knowledge = "";
                    }
                        console.log(index ,data) ;
                        $scope.vm.listKnoData = data.data.objs;
                        $scope.vm.listKnoDataTotal = data.data.total;
                        $scope.vm.paginationConf1 = {
                            currentPage: index,//当前页
                            totalItems:data.data.total, //总条数
                            pageSize: $scope.vm.pageSize,//第页条目数
                            pagesLength: 8,//分页框数量
                        };
                        $scope.$apply()

            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout2 ;
        $scope.$watch('vm.paginationConf1.currentPage', function(current){
            if(current){
                if (timeout2) {
                    $timeout.cancel(timeout2)
                }
                timeout2 = $timeout(function () {
                    initChatPageConfigDialog();    //7.20-add
                    findKnowledge(current);

                }, 100)
            }
        },true);

        //删除知识
        function deleteKnowledge(){
            if($scope.vm.deleteIds == 0){
                layer.msg("请选择要删除的知识！");
                return;
            }
            var dialog = ngDialog.openConfirm({
                template : "/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback : function(e){
                    if(e === 1){
                        httpRequestPost("/api/application/hotQuestion/deleteHotQuestionByIds",{
                            applicationId :  $scope.vm.applicationId,
                            ids :  $scope.vm.deleteIds
                        },function(data){
                            //$state.reload();
                            if(data.status == 10013){
                                initChatPageConfig();
                                $scope.vm.selectAllCheck = false;
                                $state.reload();
                                layer.msg("删除成功");
                            }else{
                                layer.msg("删除失败")
                            }
                        },function(){
                            layer.msg("请求失败")
                        });
                    }
                }
            });
        }

        //查找知识
        function findHotQuestion(){
            //为空查询分页
            if($scope.vm.hotQuestionTitle == '' || $scope.vm.hotQuestionTitle == null){
                getData(1)
            }else {
                httpRequestPost("/api/application/hotQuestion/findHotQuestion", {
                    hotQuestionTitle: $scope.vm.hotQuestionTitle,
                    applicationId: $scope.vm.applicationId,
                }, function (data) {
                    if (data.status == 10005) {
                        $scope.vm.listData = "";
                        $scope.vm.listDataTotal = 0;
                        $scope.$apply();
                        layer.msg("没有查询到记录!")  ;
                        $scope.vm.listData = [];
                        $scope.vm.listDataTotal = 0;
                         return
                    }
                    $scope.vm.listData = data.data.hotQuestionList;
                    $scope.vm.listDataTotal = data.data.total;
                    $scope.$apply()
                }, function () {
                    layer.msg("请求失败")
                })
            }
        }

        //知识置顶
        function toTop(item){
            console.log(item.hotQuestionId);
            httpRequestPost("/api/application/hotQuestion/top",{
                applicationId : $scope.vm.applicationId,
                hotQuestionId : item.hotQuestionId,
                hotQuestionOrder : item.hotQuestionOrder,
            },function(data){
                //$state.reload();
                getData(1);
            },function(){
                layer.msg("请求失败")
            })
        }
        //知识上移
        function move(item){
            console.log(item.hotQuestionId);
            httpRequestPost("/api/application/hotQuestion/moveUp",{
                applicationId : $scope.vm.applicationId,
                hotQuestionId : item.hotQuestionId,
                hotQuestionOrder : item.hotQuestionOrder,
            },function(data){
                //$state.reload();
                getData(1);
            },function(){
                layer.msg("请求失败")
            })
        }

        //知识下移
        function down(item){
            console.log(item.hotQuestionId);
            httpRequestPost("/api/application/hotQuestion/moveDown",{
                applicationId : $scope.vm.applicationId,
                hotQuestionId : item.hotQuestionId,
                hotQuestionOrder : item.hotQuestionOrder,
            },function(data){
                //$state.reload();
                getData(1);
            },function(){
                layer.msg("请求失败")
            })
        }
        //添加知识
        function addHotIssues(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/chatPageConfigDialog.html",
                width:'660px',
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        console.log($scope.vm.seleceAddAll);
                        httpRequestPost("/api/application/hotQuestion/batchAdd",{
                            applicationId : $scope.vm.applicationId,
                            userId :  $scope.vm.userId,
                            hotKnowledgeList : $scope.vm.seleceAddAll
                        },function(data){
                            //$state.reload();
                            getData(1);
                            if(data.status == 10012){
                                layer.msg("该知识已经存在,请重新添加!")
                            }
                        },function(){
                            layer.msg("请求失败")
                        })
                        //保存的同时清空数据
                        $scope.vm.selectAllCheck = false;
                        $scope.vm.selectAllCheckDialog = false;
                        $scope.vm.seleceAddAll = [];
                        $scope.vm.listKnoData = [];
                        $scope.vm.knowledge = "";
                        $scope.vm.listKnoDataTotal = 0,
                        $scope.vm.paginationConf1 = ''
                    }else{
                        //取消的同时清空数据
                        $scope.vm.selectAllCheckDialog = false;
                        $scope.vm.seleceAddAll = [];
                        $scope.vm.listKnoData = [];
                        $scope.vm.knowledge = "";
                        $scope.vm.listKnoDataTotal = 0,
                        $scope.vm.paginationConf1 = ''
                    }
                }
            });
        }
        function initChatPageConfig(){
            $scope.vm.deleteIds=[];
            $scope.vm.selectAllCheck = false;

        }
        //7.20-add
        function initChatPageConfigDialog(){
            $scope.vm.seleceAddAll=[];
            $scope.vm.selectAllCheckDialog = false;

        }
    }
]);
// Source: app/static/myApplication/js/controller/conceptCode_controller.js
angular.module('myApplicationSettingModule').controller('conceptCodeController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout",
    "$compile","FileUploader","$window","$stateParams","$interval",
    "$rootScope","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,
              $compile,FileUploader,$window,$stateParams,
              $interval,$rootScope,$filter) {
        $scope.vm = {
            interfaceCode : "",     //接口编码
            searchInterfaceCode: "",  //查询的接口编码
            interfaceList : [],   //接口列表
            conceptId : "", //概念编码Id
            conceptName : "",     //概念名称
            searchConceptName : "",     //查询的概念名称
            conceptCode : "", //概念编码
            dialogTitle : "" , //对话框标题
            editConceptCode: editConceptCode,  //编辑概念编码
            deleteConceptCode: deleteConceptCode, //删除概念编码
            addConceptCodeDialog: addConceptCodeDialog, //新增概念编码弹窗
            listConceptCodeData : listConceptCodeData, //分页查询编码
            batchDelete : batchDelete, //批量删除
            batchUpload : batchUpload, //批量导入
            exportAll : exportAll, //数据导出
            downloadTemplate : downloadTemplate, //下载模板
            allowSubmit: 0, //是否允许添加


            conceptCodeData : "",   // 概念编码列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //数据记录总数


            nameNullOrBeyondLimit:"概念名不能为空或超过长度限制50",
            codeNullOrBeyondLimit:"概念编码不能为空或超过长度限制50",
            interfaceNull:"概念编码的接口不能为空"

        };

        getInterfaceList();
        //加载接口列表
        function  getInterfaceList(){
            httpRequestPost("/webhook/interface/listEffectiveInterface",{},
                function(data){
                    if(data.status==200){
                        $scope.vm.interfaceList = data.data;
                    }else{
                        layer.msg("加载接口失败！")
                    }
                },function(){
                    layer.msg("加载接口失败！")
                });
        }

        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listConceptCodeData(1);
        //请求服务列表
        function listConceptCodeData(index){
            httpRequestPost("/webhook/conceptCode/listConceptCodeByPage",{
                "interfaceCode": $scope.vm.searchInterfaceCode,
                "conceptName": $scope.vm.searchConceptName,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.conceptCodeData = data.data;
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listConceptCodeData(current);
                }, 100)
            }
        },true);

        //删除概念编码
        function deleteConceptCode(conceptId){
            httpRequestPost("/webhook/conceptCode/delConceptCode",{
                    conceptId : conceptId
                },
                function(data){
                    if(data.status==200){
                        listConceptCodeData(1);
                    }else{
                        layer.msg("删除失败，请重新删除！");
                    }
                },function(){
                    layer.msg("删除失败，请重新删除！");
                });
        }

        //批量删除
        function batchDelete(){
            httpRequestPost("/webhook/conceptCode/batchDelConceptCode",{
                    conceptIds : $scope.selectedList
                },
                function(data){
                    if(data.status==200){
                        listConceptCodeData(1);
                    }else{
                        layer.msg("删除失败，请重新删除！");
                    }
                },function(){
                    layer.msg("删除失败，请重新删除！");
                });
        }

        //新增概念编码弹窗
        function addConceptCodeDialog(){
            $scope.vm.dialogTitle="新增概念编码";
            var dialog = ngDialog.openConfirm({
                                template:"/static/myApplication/serviceManagement/conceptCodeManageDialog.html",
                                scope: $scope,
                                closeByDocument:false,
                                closeByEscape: true,
                                showClose : true,
                                backdrop : 'static',
                                preCloseCallback:function(e){    //关闭回掉
                                    if(e === 1){
                                        var allowSubmit=0;
                                        if(nullCheck($scope.vm.interfaceCode)==false){
                                            $("#interfaceAddError").html("请选择接口");
                                            allowSubmit=0;
                                            return false;
                                        }else{
                                            $("#interfaceAddError").html("");
                                            allowSubmit=1;
                                        }
                                        if(lengthCheck($scope.vm.conceptName,0,50)==false){
                                            $("#nameAddError").html($scope.vm.nameNullOrBeyondLimit);
                                            allowSubmit=0;
                                            return false;
                                        }else{
                                            httpRequestPostAsync("/webhook/conceptCode/checkConceptCode",{
                                                    conceptName : $scope.vm.conceptName,
                                                    interfaceCode : $scope.vm.interfaceCode
                                                },
                                                function(data){
                                                    console.log(data);
                                                    if(data.data==880){
                                                        $("#nameAddError").html("概念名称已经存在！");
                                                        allowSubmit=0;
                                                        return false;
                                                    }else{
                                                        $("#nameAddError").html("");
                                                        if(lengthCheck($scope.vm.conceptCode,0,50)==false){
                                                            $("#codeAddError").html($scope.vm.codeNullOrBeyondLimit);
                                                            allowSubmit=0;
                                                            return false;
                                                        }else{
                                                            httpRequestPostAsync("/webhook/conceptCode/checkConceptCode",{
                                                                    conceptCode : $scope.vm.conceptCode,
                                                                    interfaceCode : $scope.vm.interfaceCode
                                                                },
                                                                function(data){
                                                                    console.log(data);
                                                                    if(data.data==880){
                                                                        $("#codeAddError").html("概念编码已经存在！");
                                                                        allowSubmit=0;
                                                                        return false;
                                                                    }else{
                                                                        $("#codeAddError").html("");
                                                                        allowSubmit=1;
                                                                    }
                                                                },function(){
                                                                    $("#codeAddError").html("概念编码校验失败！");
                                                                    allowSubmit=0;
                                                                    return false;
                                                                });
                                                        }
                                                    }
                                                },function(){
                                                    $("#nameAddError").html("概念名称校验失败！");
                                                    allowSubmit=0;
                                                    return false;
                                                });
                        }

                        if(allowSubmit==0){
                            return false;
                        }
                        httpRequestPostAsync("/webhook/conceptCode/addConceptCode",{
                                conceptName : $scope.vm.conceptName,
                                conceptCode : $scope.vm.conceptCode,
                                interfaceCode : $scope.vm.interfaceCode
                            },
                            function(data){
                                if(data.status==200){
                                    listConceptCodeData(1);
                                }else{
                                    layer.msg("添加失败，请重新添加！");
                                }
                            },function(){
                                layer.msg("添加失败，请重新添加！");
                            });
                        $scope.vm.conceptName = "";
                        $scope.vm.conceptCode = "";
                        $scope.vm.interfaceCode = "";
                    }else{
                        $scope.vm.conceptName = "";
                        $scope.vm.conceptCode = "";
                        $scope.vm.interfaceCode = "";
                    }
                }
            });
        }

        ////编辑概念编码弹出框
        function editConceptCode(item){
            $scope.vm.dialogTitle="修改概念编码";
            $scope.vm.conceptId = item.conceptId;//概念编码id
            $scope.vm.conceptName = item.conceptName;//概念名称
            $scope.vm.conceptCode = item.conceptCode; //概念编码
            $scope.vm.interfaceCode = item.interfaceCode; //接口编码
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/serviceManagement/conceptCodeManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        var allowSubmit=0;
                        if(nullCheck($scope.vm.interfaceCode)==false){
                            $("#interfaceAddError").html("请选择接口");
                            allowSubmit=0;
                            return false;
                        }else{
                            $("#interfaceAddError").html("");
                            allowSubmit=1;
                        }
                        if(lengthCheck($scope.vm.conceptName,0,50)==false){
                            $("#nameAddError").html($scope.vm.nameNullOrBeyondLimit);
                            allowSubmit=0;
                            return false;
                        }else{
                            httpRequestPostAsync("/webhook/conceptCode/checkConceptCode",{
                                    conceptName : $scope.vm.conceptName,
                                    interfaceCode : $scope.vm.interfaceCode,
                                    conceptId : $scope.vm.conceptId
                                },
                                function(data){
                                    console.log(data);
                                    if(data.data==880){
                                        $("#nameAddError").html("概念名称已经存在！");
                                        allowSubmit=0;
                                        return false;
                                    }else{
                                        $("#nameAddError").html("");
                                        if(lengthCheck($scope.vm.conceptCode,0,50)==false){
                                            $("#codeAddError").html($scope.vm.codeNullOrBeyondLimit);
                                            allowSubmit=0;
                                            return false;
                                        }else{
                                            httpRequestPostAsync("/webhook/conceptCode/checkConceptCode",{
                                                    conceptCode : $scope.vm.conceptCode,
                                                    interfaceCode : $scope.vm.interfaceCode,
                                                    conceptId : $scope.vm.conceptId
                                                },
                                                function(data){
                                                    console.log(data);
                                                    if(data.data==880){
                                                        $("#codeAddError").html("概念编码已经存在！");
                                                        allowSubmit=0;
                                                        return false;
                                                    }else{
                                                        $("#codeAddError").html("");
                                                        allowSubmit=1;
                                                    }
                                                },function(){
                                                    $("#codeAddError").html("概念编码校验失败！");
                                                    allowSubmit=0;
                                                    return false;
                                                });
                                        }
                                    }
                                },function(){
                                    $("#nameAddError").html("概念名称校验失败！");
                                    allowSubmit=0;
                                    return false;
                                });
                        }

                        if(allowSubmit==0){
                            return false;
                        }
                        httpRequestPostAsync("/webhook/conceptCode/modifyConceptCode",{
                                conceptName : $scope.vm.conceptName,
                                conceptCode : $scope.vm.conceptCode,
                                interfaceCode : $scope.vm.interfaceCode,
                                conceptId : $scope.vm.conceptId
                            },
                            function(data){
                                if(data.status==200){
                                    listConceptCodeData(1);
                                }else{
                                    layer.msg("修改失败，请重新修改！");
                                }
                            },function(){
                                layer.msg("修改失败，请重新修改！");
                            });
                        $scope.vm.conceptName = "";
                        $scope.vm.conceptCode = "";
                        $scope.vm.interfaceCode = "";
                        $scope.vm.conceptId = "";
                    }else{
                        $scope.vm.conceptName = "";
                        $scope.vm.conceptCode = "";
                        $scope.vm.interfaceCode = "";
                        $scope.vm.conceptId = "";
                    }
                }
            });
        }

        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/know_index/serviceManagement/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    listConceptCodeData($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/webhook/conceptCode/batchImport');
                }, 100);
            }
        }

        //下载模板
        function downloadTemplate(){
            downloadFile("/webhook/conceptCode/downloadWithPath","","weatherPlace.xlsx");
        }

        //返回状态显示
        function responseView(data){
            if(data==null){
                return false;
            }
            if(data.status==200){
                return true;
            }
            return false;
        }

        //全部导出
        function exportAll(){
            httpRequestPost("/webhook/conceptCode/batchExport",{
                "interfaceCode":$scope.vm.interfaceCode
            },function(data){
                if(responseView(data)==true){
                    var html = "";
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        console.log("====="+i);
                        html+='<a href="'+"/webhook/conceptCode/downloadWithPath?filePath="+data.filePath+"&fileName="+data.exportFileNameList[i]+'"><li title="'+data.exportFileNameList[i]+'">' +
                            '<p class="title"></p>' +
                            '<p class="imgWrap"><img src="../images/excel.png"></p>' +
                            '</li></a>';
                    }
                    var dialog = ngDialog.openConfirm({
                        template:"/static/myApplication/serviceManagement/downloadList.html",
                        scope: $scope,
                        closeByDocument:false,
                        closeByEscape: true,
                        showClose : true,
                        backdrop : 'static',
                        preCloseCallback:function(e){    //关闭回掉
                        }
                    });
                    if(dialog){
                        $timeout(function () {
                            $("#downloadList").append(html);
                        }, 100);
                    }
                }
            });
        }

        //页面加载接口列表
        //interfaceServer.listAllInterface({appid:1},
        //    function(data) {
        //        if(data.status==200){
        //            $scope.vm.interfaceList = data.data;
        //        }else{
        //            layer.msg("加载接口失败，请刷新页面");
        //        }
        //    }, function(error) {
        //        layer.msg("加载接口失败，请刷新页面");
        //    }
        //);


        //创建变量用来保存选中结果
        $scope.selectedList = [];
        $scope.updateSelection= updateSelection; //更新某一行数据的选择
        $scope.selectAll = selectAll; //全选
        $scope.isSelected = isSelected; //判断某一行是否已被选中
        $scope.isSelectedAll = isSelectedAll;  //判断是否已经全部选中
        function updateSelected(action, id){
            if (action == 'add' && $scope.selectedList.indexOf(id) == -1) $scope.selectedList.push(id);
            if (action == 'remove' && $scope.selectedList.indexOf(id) != -1) $scope.selectedList.splice($scope.selectedList.indexOf(id), 1);
        }

        //更新某一行数据的选择
        function updateSelection($event, id){
            var checkbox = $event.target;
            var action = (checkbox.checked ? 'add' : 'remove');
            updateSelected(action, id);
        }

        //判断某一行是否已被选中
        function isSelected(id) {
            return $scope.selectedList.indexOf(id) >= 0;
        };


        //全选
        function selectAll ($event){
            var checkbox = $event.target;
            var action = (checkbox.checked ? 'add' : 'remove');
            for (var i = 0; i < $scope.vm.conceptCodeData.length; i++) {
                var contact = $scope.vm.conceptCodeData[i];
                updateSelected(action, contact.conceptId);
            }
        }
        //判断是否已经全部选中
        function isSelectedAll() {
            return $scope.selectedList.length === $scope.vm.conceptCodeData.length;
        };
    }

]);
// Source: app/static/myApplication/js/controller/configuration_cotroller.js

angular.module('myApplicationSettingModule').controller('confingurationController', [
  '$scope', "$state", "$stateParams","$cookieStore",
  function ($scope,$state, $stateParams,$cookieStore) {

    $scope.vm = {
     applicationId: $cookieStore.get("applicationId"),
     addEmail:addEmail,
     deleteEmail:deleteEmail,
     save:save,
     addLine:'',
     flowThreshold:'',
     emailAddress:'',
     testValueOn:'',
     emailNull:'',
     emailRegular:'',
     concurrentRestrict:'',
     flowMonitorId:'',
     email:''
   };
   var applicationId = $cookieStore.get("applicationId");

   //默认报警人
   $scope.vm.addLine=[{
 
   }];
    

  //增加报警人
  function addEmail(){
    var emailReg=/^([a-zA-Z0-9_])+@([a-zA-Z0-9_])+(.[a-zA-Z0-9_])+/ ;
    if($scope.vm.email==''){
       layer.msg("请填写邮箱地址")
    }else if (!emailReg.test($scope.vm.email)) {
       layer.msg("请填写正确的邮箱地址")
    }else{
      $scope.vm.addLine.unshift({
       alarmName:'预警邮箱',
       emailAddress:$scope.vm.email,
       addNum:1
     });
    }
     $scope.vm.email='';
 }

  //删除报警人
  function deleteEmail(index){
    $scope.vm.addLine.splice(index,1);
    console.log($scope.vm.addLine)
  };

   //获取联系人的邮箱地址
   var email=[];
   var len=$scope.vm.addLine.length;
   for(var i=0;i<len;i++){
    var value=$('.email'+i).val()
    email.push(value)
  }
  var emailVal=email.join(";")
  httpRequestPost("/api/application/FlowMonitorSetting/findOne",{
    "applicationId": $scope.vm.applicationId,
    },function(data){
      if(data.status==200&&data.data!=null){
       $scope.vm.flowThreshold=data.data.flowThreshold;
       $scope.vm.emailAddress=data.data.email;
       $scope.vm.flowMonitorId=data.data.flowMonitorId;
       var list=$scope.vm.emailAddress;
       var listVal=list.split(";")
       $scope.vm.addLine.length=0;
       for(var i=0;i<listVal.length;i++){ 
        $scope.vm.addLine.push({
          alarmName:'预警邮箱',
          addNum:i+1,
          emailAddress:listVal[i]
        });
      }
      $scope.$apply();
    }else if(data.status==500){
      layer.msg(data.data);
    }
  }) 

     //保存参数
     function save(){
        console.log($scope.vm.addLine)
        //获取邮件数组
        var email=[];
        var len=$scope.vm.addLine.length;
        for(var i=0;i<len;i++){
          var value=$('.email'+i).val();
          email.push(value)
          console.log(value)
          var emailReg=/^([a-zA-Z0-9_])+@([a-zA-Z0-9_])+(.[a-zA-Z0-9_])+/ ;
          if(value==''||value==null){
           $scope.vm.emailNull=1; 
         }else if(value!=''||value!=null){
          $scope.vm.emailNull=0;
        }
        if(!emailReg.test(value)){
          $scope.vm.emailRegular=1; 
        }else if(emailReg.test(value)){
          $scope.vm.emailRegular=0; 
        }

      }
      var emailVal=email.join(";")
      var flowThreshold=$(".flowThreshold").val()
      if(flowThreshold==''){
         layer.msg("流量阈值不能为空"); 
      }else if($scope.vm.emailNull==1){
         layer.msg("预警邮箱不能为空");
      }else if($scope.vm.emailRegular==1){
         layer.msg("邮箱格式错误");
     }else{
      httpRequestPost("/api/application/FlowMonitorSetting/saveOrupdate",{
        "applicationId": $scope.vm.applicationId,
        "flowThreshold":flowThreshold,
        "flowMonitorId":$scope.vm.flowMonitorId,
        "email":emailVal
      },function(data){
        layer.msg("保存成功");
        $state.reload();
      }) 
  }

}

}]);
// Source: app/static/myApplication/js/controller/dimensionManage_controller.js
/**
 * Created by mileS on 2017/3/28.
 */

angular.module('knowledgeManagementModule').controller('dimensionManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$timeout","$interval","$cookieStore",
    function ($scope,localStorageService, $state,ngDialog,$timeout,$interval,$cookieStore) {
        $scope.vm = {
            addDimension : addDimension,
            editDimension : editDimension,
            pageSize : 5,
            listData : "",   // table 数据
            listDataTotal : "",
            deleteDimension:deleteDimension,
            deleteItem : deleteItem,
            findDimension : findDimension,
            getData : getData, //返回维度列表
            savePro : savePro, //x向数组中添加数据
            verifyRelease:verifyRelease,  //校验方法
            check:check,
            allowSubmit:1, //是否允许提交
            userId: $cookieStore.get("userId"),
            applicationId: $cookieStore.get("applicationId"),
            paginationConf : "", //分页条件
            switchTurn :10001,
            newDimensions : [],
            getDimensionVal : "",
            getDimension : "",
            dimension : "",
            dimensionVal : "",
            dimensionName : "",
            dimensionStatusId: "",
            dimensionParentId:"",
            dimensionId:"",
            dimensionNameArray: [],
            dimensionUpdateNameArray :[],
            dimensionIdArray:[],

            oldDimension : [],
            oldDimensionName : []
        };

        getData(1);
        function getData(index){
            httpRequestPost("/api/application/dimension/listDimension",{
                index:(index - 1)*$scope.vm.pageSize,
                pageSize:$scope.vm.pageSize,
                userId:$scope.vm.userId,
                applicationId:$scope.vm.applicationId,
                dimensionParentId:0
            },function(data){
              console.log(data);
                if(data.status == 10005){
                    layer.msg("查询到记录为空！");
                    return;
                }
                $scope.vm.listData = data.data.dimensionList;
                $scope.vm.listDataTotal = data.data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.data.total, //总条数
                    pageSize: $scope.vm.pageSize,//第页条目数
                    pagesLength: 8,//分页框数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    getData(current);
                }, 100)

            }
        },true);

        //删除维度
        function deleteDimension(dimensionId){
            var dialog = ngDialog.openConfirm({
                template:"/static/admin/deleteDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/api/application/dimension/deleteById",{
                            applicationId:$scope.vm.applicationId,
                            dimensionId:dimensionId
                        },function(data){
                            if(data.status == 10000){
                                layer.msg("存在知识使用该维度，请修改后删除");
                            }
                            if(data.status == 10013){
                                getData(1);
                                layer.msg("维度删除成功!");
                            }
                            //$state.reload();
                        },function(){
                            layer.msg("请求失败");
                        })
                    }
                }
            });
        }

        //删除子集维度
        function deleteItem(item){
            console.log(item.dimensionId);
            httpRequestPost("/api/application/dimension/deleteChildDimensionById",{
                dimensionId:item.dimensionId
            },function(data){
                $scope.vm.oldDimension.remove(item);
            },function(){
                layer.msg("请求失败")
            })
        }

        function findDimension(){
            //为空查询判断
            if($scope.vm.getDimension == ''|| $scope.vm.getDimension == null){
                getData(1);
            }else {
                httpRequestPost("/api/application/dimension/findByDimensionName", {
                    dimensionName: $scope.vm.getDimension,
                    applicationId: $scope.vm.applicationId,
                    dimensionParentId: 0
                }, function (data) {
                    if (data.status == 10005) {
                        $scope.vm.listData = "";
                        $scope.vm.listDataTotal = 0;
                        layer.msg("没有查询到记录!");
                        $scope.$apply();
                        return;
                    }
                    $scope.vm.listData = data.data.dimensionList;
                    $scope.vm.listDataTotal = data.data.total;
                    $scope.$apply()
                }, function () {
                    layer.msg("请求失败")
                })
            }
        }

        //添加添加校验
        function verifyRelease(){
            if($scope.vm.dimension == null || $scope.vm.dimension == ""){
                layer.msg("维度名称不能为空!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.dimension.length > 50){
                layer.msg("维度名称长度不能超过50个字符!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.newDimensions.length == 0){
                layer.msg("请至少添加一个维度表示!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            return 1;
        }

        function addDimension(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/dimensionManageDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if($scope.vm.allowSubmit) {
                            httpRequestPost("/api/application/dimension/addDimension", {
                                applicationId: $scope.vm.applicationId,
                                userId: $scope.vm.userId,
                                dimensionName: $scope.vm.dimension,
                                dimensionStatusId: $scope.vm.switchTurn,
                                dimensionParentId: 0,
                                dimensionNameArray: $scope.vm.newDimensions,

                            }, function (data) {
                                //$state.reload();
                                if (data.status == 10002) {
                                    layer.msg("维度名称重复，请重新添加！")
                                } else {
                                    layer.msg("维度添加成功！")
                                    getData(1);
                                }
                            }, function () {
                                layer.msg("请求失败")
                            });
                        }
                        //添加成功，清空数据
                        $scope.vm.newDimensions = [];
                        $scope.vm.dimension = "";
                        $scope.vm.getDimensionVal = "";
                    }else{
                        $scope.vm.newDimensions = [];
                        $scope.vm.dimension = "";
                        $scope.vm.getDimensionVal = "";
                    }
                }
            });
        }
        //编辑添加校验
        function check(){
            if($scope.vm.dimensionName == null || $scope.vm.dimensionName == ""){
                layer.msg("维度名称不能为空!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.dimensionName.length > 50){
                layer.msg("维度名称长度不能超过50个字符!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            return 1;
        }

        function editDimension(data){
            console.log(data);
            $scope.vm.applicationId = data.applicationId;
            $scope.vm.dimensionName = data.dimensionName;
            $scope.vm.dimensionId = data.dimensionId;
            console.log(data.dimensionId);
            angular.forEach(data.dimensionChildList,function(data1){
                var obj = {};
                obj.dimensionName = data1.dimensionName;
                obj.dimensionId = data1.dimensionId;
                $scope.vm.oldDimension.push(obj);

                $scope.vm.oldDimensionName.push(data1.dimensionName);
            });
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/dimensionManageDialog2.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if($scope.vm.allowSubmit) {
                            httpRequestPost("/api/application/dimension/updateDimensionById", {
                                dimensionName: $scope.vm.dimensionName,
                                userId: $scope.vm.userId,
                                applicationId: $scope.vm.applicationId,
                                dimensionId: $scope.vm.dimensionId,
                                dimensionStatusId: $scope.vm.switchTurn,
                                dimensionNameArray: $scope.vm.newDimensions,
                                dimensionParentId: 0
                            }, function (data) {
                                if (data.status == 10002) {
                                    layer.msg("该维度已经存在，请重新编辑!");
                                    return;
                                }
                                getData(1);
                                layer.msg("维度修改成功!");
                            }, function () {
                                layer.msg("请求失败")
                            })
                        }
                        //添加成功后清空数组数据
                        $scope.vm.newDimensions = [];
                        $scope.vm.oldDimension = [];
                    }else{
                        $scope.vm.oldDimension = [];
                        $scope.vm.newDimensions = [];
                    }
                }
            });
        }
        //数组中添加数据
        function savePro(vm,arr){
            if(arr.length > 0 && arr.indexOf(vm) != -1){
                layer.msg("该维度表示已经存在，请重新添加");
                return;
            }
            if($scope.vm.oldDimensionName.indexOf(vm) != -1){
                layer.msg("该维度表示已经存在，请重新添加!");
                return;
            }
            if(vm.length == 0){
                layer.msg("请添加维度表示!");
                return;
            }
            if(arr.indexOf(vm)){
                arr.push(vm)
            }
            //添加
            $scope.vm.getDimensionVal = "";
            //编辑
            $scope.vm.dimensionVal = "";
        }
    }
]);
// Source: app/static/myApplication/js/controller/errorSetting_cotroller.js

angular.module('myApplicationSettingModule').controller('errorSettingController', [
  '$scope', "$state", "$stateParams","$cookieStore",
  function ($scope,$state, $stateParams,$cookieStore) {
    $scope.vm = {
        applicationId:$cookieStore.get("applicationId"),
        errorSettingNum:'',
        errorSettingMsg:'',
        errorSettingId:'',
        secondErrorSettingMsg:'',
        errorSave:errorSave    //保存按钮
    };

   //错误管理查询
    httpRequestPost("/api/application/errorSetting/findOne",{
    "applicationId": $scope.vm.applicationId,
    },function(data){
      if(data.status==200&&data.data!=null)
         if(data.data!=null){
           $scope.vm.errorSettingNum=data.data.errorSettingNum;
           $scope.vm.errorSettingMsg=data.data.errorSettingMsg;
           $scope.vm.errorSettingId=data.data.errorSettingId;
           $scope.vm.secondErrorSettingMsg=data.data.secondErrorSettingMsg;
           $scope.$apply();
         }
         
    })

  //错误管理保存
    function errorSave(){
      if($scope.vm.errorSettingNum<=2){
         layer.msg("错误提示错误数量不小于2次")
      }else{
           httpRequestPost("/api/application/errorSetting/save ",{
           "errorSettingId":$scope.vm.errorSettingId,
           "applicationId": $scope.vm.applicationId,
           "errorSettingNum":$scope.vm.errorSettingNum,
           "errorSettingMsg":$scope.vm.errorSettingMsg,
           "secondErrorSettingMsg":$scope.vm.secondErrorSettingMsg
        },function(data){
             if(data.status==200){
               layer.msg(data.data)
               $scope.$apply();
               $state.reload();
             }
        })
      }
     
    }
}]);
// Source: app/static/myApplication/js/controller/interface_controller.js
angular.module('myApplicationSettingModule').controller('interfaceController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout",
    "$compile","FileUploader","$window","$stateParams","$interval",
    "$rootScope","$filter",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,
              $compile,FileUploader,$window,$stateParams,
              $interval,$rootScope,$filter) {
        $scope.vm = {
            searchInterfaceName: "",  //查询的接口名称
            interfaceCode : "",     //接口编码
            interfaceId : "",     //接口id
            interfaceName : "",   //接口名称
            interfaceDesc : "",   //接口描述
            interfaceUrl : "",    //接口url
            interfaceFormat : "", //返回的数据格式
            requestType : "", //接口请求类型
            requestExample : "", //接口请求样例
            applicationId : "", //应用id
            categoryName : "",  //所属分类
            interfaceKey : "",  //接口调用key
            responseExample : "", //返回结果样例

            interfaceParamData : [], //接口参数列表
            tableRow : "",  //当前所在表格的行数
            tableColumn : "", //当前所在表格的列数
            addRow : addRow, //添加行
            deleteRow : deleteRow, //删除行
            tableChange : tableChange, //修改表格的值

            dialogTitle : "" , //对话框标题
            allowSubmit : 1, //是否允许提交
            editInterface: editInterface,  //编辑接口
            deleteInterface: deleteInterface, //删除接口
            addInterfaceDialog: addInterfaceDialog, //新增接口弹窗
            listInterfaceData : listInterfaceData, //分页查询接口
            verifyInterface : verifyInterface, //添加验证

            batchUpload : batchUpload, //批量导入
            exportAll : exportAll, //数据导出
            downloadTemplate : downloadTemplate, //下载模板


            interfaceData : "",   // 接口列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //数据记录总数

        };

        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listInterfaceData(1);
        //请求接口列表
        function listInterfaceData(index){
            httpRequestPost("/webhook/interface/listInterfaceByPage",{
                "interfaceName": $scope.vm.searchInterfaceName,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.interfaceData = data.data;
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listInterfaceData(current);
                }, 100)
            }
        },true);

        //删除接口
        function deleteInterface(interfaceCode){
            httpRequestPost("/webhook/interface/del",{
                    interfaceCode : interfaceCode
                },
                function(data){
                    if(data.status==200){
                        listInterfaceData(1);
                    }else{
                        layer.msg("删除失败，请重新删除！");
                    }
                },function(){
                    layer.msg("删除失败，请重新删除！");
                });
        }

        //添加校验
        function verifyInterface(){
            console.log("是否必须："+$scope.vm.paramIf);
            console.log($scope.vm.interfaceParamData);
            if($scope.vm.interfaceName==null||$scope.vm.interfaceName==""){
                layer.msg("接口名称不能为空!");
                return 0;
            }
            if($scope.vm.interfaceCode==null||$scope.vm.interfaceCode==""){
                layer.msg("接口编码不能为空!");
                return 0;
            }
            if($scope.vm.interfaceUrl==null||$scope.vm.interfaceUrl==""){
                layer.msg("接口地址不能为空!");
                return 0;
            }
            if($scope.vm.interfaceFormat==null||$scope.vm.interfaceFormat==""){
                layer.msg("接口返回的数据格式不能为空!");
                return 0;
            }
            if($scope.vm.requestType==null||$scope.vm.requestType==""){
                layer.msg("接口请求的方式不能为空!");
                return 0;
            }
            if($scope.vm.categoryName==null||$scope.vm.categoryName==""){
                layer.msg("接口所属分类不能为空!");
                return 0;
            }
            var check=true;
            angular.forEach($scope.vm.interfaceParamData,function(param,index){
                if(param.paramAsk==null||param.paramAsk==""){
                    layer.msg("接口的参数反问不能为空！");
                    check=false;
                }
                if(param.conceptName==null||param.conceptName==""){
                    layer.msg("接口的参数对应的概念库名称不能为空！");
                    check=false;
                }
                if(param.paramType==null||param.paramType==""){
                    layer.msg("接口的参数类型不能为空！");
                    check=false;
                }
                if(param.paramName==null||param.paramName==""){
                    layer.msg("接口的参数名称不能为空！");
                    check=false;
                }
                if(param.paramIf){
                    param.paramIf=1;
                }else{
                    param.paramIf=0;
                }
            });
            if(check){
                return 1;
            }else{
                return 0;
            }
        }

        //新增接口弹窗
        function addInterfaceDialog(){
            $scope.vm.dialogTitle="新增接口";
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/serviceManagement/interfaceDialog.html",
                scope: $scope,
                width: 600,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){
                    //关闭回掉
                    if(e === 1){
                        $scope.vm.jsonParam="";
                        httpRequestPost("/webhook/interface/add",{
                                interfaceCode : $scope.vm.interfaceCode,     //接口编码
                                interfaceName : $scope.vm.interfaceName,   //接口名称
                                interfaceDesc : $scope.vm.interfaceDesc,   //接口描述
                                interfaceUrl : $scope.vm.interfaceUrl,    //接口url
                                interfaceFormat : $scope.vm.interfaceFormat, //返回的数据格式
                                requestType : $scope.vm.requestType, //接口请求类型
                                requestExample : $scope.vm.requestExample, //接口请求样例
                                applicationId : 0, //应用id,默认先设置都为0
                                categoryName : $scope.vm.categoryName,  //所属分类
                                interfaceKey : $scope.vm.interfaceKey,  //接口调用key
                                interfaceParamses : $scope.vm.interfaceParamData,     //接口参数
                                responseExample : $scope.vm.responseExample  //返回结果样例
                            },
                            function(data){
                                if(data.status==200){
                                    listInterfaceData(1);
                                }else{
                                    layer.msg("添加失败，请重新添加！");
                                }
                                initDialog();
                            },function(){
                                layer.msg("添加失败，请重新添加！");
                                initDialog();
                            });
                    }else{
                        initDialog();
                    }
                }
            });
        }

        //初始化弹窗
        function initDialog(){
            $scope.vm.interfaceCode="";     //接口编码
            $scope.vm.interfaceName="";  //接口名称
            $scope.vm.interfaceDesc=""; //接口描述
            $scope.vm.interfaceUrl="";   //接口url
            $scope.vm.interfaceFormat=""; //返回的数据格式
            $scope.vm.requestType=""; //接口请求类型
            $scope.vm.requestExample=""; //接口请求样例
            $scope.vm.categoryName="";  //所属分类
            $scope.vm.interfaceKey="";  //接口调用key
            $scope.vm.responseExample=""; //返回结果样例
            $scope.vm.interfaceId=""; //接口id
            $scope.vm.interfaceParamData=[];//接口参数列表
        }

        //编辑接口弹出框
        function editInterface(item){
            $scope.vm.dialogTitle="修改接口信息";
            $scope.vm.interfaceCode=item.interfaceCode;     //接口编码
            $scope.vm.interfaceName=item.interfaceName;  //接口名称
            $scope.vm.interfaceDesc=item.interfaceDesc; //接口描述
            $scope.vm.interfaceUrl=item.interfaceUrl;   //接口url
            $scope.vm.interfaceFormat=item.interfaceFormat; //返回的数据格式
            $scope.vm.requestType=item.requestType; //接口请求类型
            $scope.vm.requestExample=item.requestExample; //接口请求样例
            $scope.vm.categoryName=item.categoryName;  //所属分类
            $scope.vm.interfaceKey=item.interfaceKey;  //接口调用key
            $scope.vm.responseExample=item.responseExample; //返回结果样例
            $scope.vm.interfaceId=item.interfaceId; //接口id

            //根据接口的编码获取接口的参数信息
            httpRequestPost("/webhook/interface/searchParam",{
                    interfaceCode : $scope.vm.interfaceCode     //接口编码
                },
                function(data){
                    if(data.status==200){
                        $scope.vm.interfaceParamData=data.data;
                        angular.forEach($scope.vm.interfaceParamData,function(param,index){
                            if(param.paramIf==1){
                                param.paramIf=true;
                            }else{
                                param.paramIf=false;
                            }
                        });
                        var dialog = ngDialog.openConfirm({
                            template:"/static/myApplication/serviceManagement/interfaceDialog.html",
                            scope: $scope,
                            width: 600,
                            closeByDocument:false,
                            closeByEscape: true,
                            showClose : true,
                            backdrop : 'static',
                            preCloseCallback:function(e){    //关闭回掉
                                if(e === 1){
                                    httpRequestPost("/webhook/interface/modify",{
                                            interfaceId : $scope.vm.interfaceId,     //接口id
                                            interfaceCode : $scope.vm.interfaceCode,     //接口编码
                                            interfaceName : $scope.vm.interfaceName,   //接口名称
                                            interfaceDesc : $scope.vm.interfaceDesc,   //接口描述
                                            interfaceUrl : $scope.vm.interfaceUrl,    //接口url
                                            interfaceFormat : $scope.vm.interfaceFormat, //返回的数据格式
                                            requestType : $scope.vm.requestType, //接口请求类型
                                            requestExample : $scope.vm.requestExample, //接口请求样例
                                            applicationId : 0, //应用id,默认先设置都为0
                                            categoryName : $scope.vm.categoryName,  //所属分类
                                            interfaceKey : $scope.vm.interfaceKey,  //接口调用key
                                            interfaceParamses : $scope.vm.interfaceParamData,     //接口参数
                                            responseExample : $scope.vm.responseExample  //返回结果样例
                                        },
                                        function(data){
                                            if(data.status==200){
                                                listInterfaceData(1);
                                            }else{
                                                layer.msg("修改失败，请重新修改！");
                                            }
                                            initDialog();
                                        },function(){
                                            layer.msg("修改失败，请重新修改！");
                                            initDialog();
                                        });
                                }else{
                                    initDialog();
                                }
                            }
                        });
                    }else{
                        layer.msg("加载接口参数失败！");
                    }
                },function(){
                    layer.msg("加载接口参数失败！");
                });

        }

        //参数添加行
        function addRow(){
            var newParam = {};
            newParam.paramName = "";
            newParam.paramType = "string";
            newParam.paramDesc = "";
            newParam.paramAsk = "";
            newParam.paramIf = 0;
            newParam.conceptName = "";
            $scope.vm.interfaceParamData.push(newParam);
        }

        //参数删除行
        function deleteRow(){
            if($scope.vm.tableRow==null){
                layer.msg("请先选择要删除的行");
            }else{
                $scope.vm.interfaceParamData.splice($scope.vm.tableRow,1);
                $scope.vm.tableRow = null
            }
        }

        //显示表格的数据
        function tableChange(row, col ,val){
            console.log(row+"|"+col+"|"+val);
            console.log($scope.vm.interfaceParamData);
        }

        //批量导入
        function batchUpload(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/serviceManagement/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    listInterfaceData($scope.vm.paginationConf.currentPage);
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/webhook/interface/batchImport');
                }, 100);
            }
        }

        //下载模板
        function downloadTemplate(){
            downloadFile("/webhook/interface/downloadWithPath","","interface.xlsx");
        }

        //返回状态显示
        function responseView(data){
            if(data==null){
                return false;
            }
            if(data.status==200){
                return true;
            }
            return false;
        }

        //全部导出
        function exportAll(){
            httpRequestPost("/webhook/interface/batchExport",{
                "interfaceCode":$scope.vm.interfaceCode
            },function(data){
                if(responseView(data)==true){
                    var html = "";
                    for(var i=0;i<data.exportFileNameList.length;i++){
                        console.log("====="+i);
                        html+='<a href="'+"/webhook/interface/downloadWithPath?filePath="+data.filePath+"&fileName="+data.exportFileNameList[i]+'"><li title="'+data.exportFileNameList[i]+'">' +
                            '<p class="title"></p>' +
                            '<p class="imgWrap"><img src="../images/excel.png"></p>' +
                            '</li></a>';
                    }
                    var dialog = ngDialog.openConfirm({
                        template:"/know_index/serviceManagement/downloadList.html",
                        scope: $scope,
                        closeByDocument:false,
                        closeByEscape: true,
                        showClose : true,
                        backdrop : 'static',
                        preCloseCallback:function(e){    //关闭回掉
                        }
                    });
                    if(dialog){
                        $timeout(function () {
                            $("#downloadList").append(html);
                        }, 100);
                    }
                }
            });
        }




    }

]).directive('checkInterfaceName', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                httpRequestPost("/webhook/interface/checkInterface",{
                        interfaceName: scope.vm.interfaceName,
                        interfaceId : scope.vm.interfaceId
                    },
                    function(data){
                        if(data.data){
                            c.$setValidity('unique', true);
                            scope.vm.allowSubmit=1;
                        }else{
                            c.$setValidity('unique', false);
                            scope.vm.allowSubmit=0;
                        }
                    },function(){
                        c.$setValidity('unique', false);
                        scope.vm.allowSubmit=0;
                    });
            });
        }
    }
}).directive('checkInterfaceCode', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                httpRequestPost("/webhook/interface/checkInterface",{
                        interfaceCode: scope.vm.interfaceCode,
                        interfaceId : scope.vm.interfaceId
                    },
                    function(data){
                        console.log(data);
                        if(data.data){
                            c.$setValidity('unique', true);
                            scope.vm.allowSubmit=1;
                        }else{
                            c.$setValidity('unique', false);
                            scope.vm.allowSubmit=0;
                        }
                    },function(){
                        c.$setValidity('unique', false);
                        scope.vm.allowSubmit=0;
                    });
            });
        }
    }
});
// Source: app/static/myApplication/js/controller/nodeManage_controller.js
/**
 * Description:节点管理控制器
 * Author: chengjianhua@ultrapower.com.cn
 * Date: 2017/4/10 14:52
 */
angular.module('myApplicationSettingModule').controller('nodeManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog", "$cookieStore","$timeout",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout) {
        $scope.vm = {
            applicationId : $cookieStore.get("applicationId"),
            nodeData : "",   // 节点列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //节点数据记录总数

            nodeCode : "", //节点编号
            nodeId : "", //父级节点id
            nodeAccessIp : "", //父级节点访问地址
            statusId : "", //父级节点状态
            nodeType : "", //父级节点类型
            nodes : [], //新增子集节点集合
            newNodes : [], //去除$$hashkey
            deleteNodes : [], //待删除的子节点
            delNodes : [], //待删除的子节点去除$$hashkey
            subNode : "", //子节点的id
            subNodeAccessIp : "" , //子节点的访问地址
            nodeCreateId : $cookieStore.get("userId"), //用户id
            statusData : "", //节点状态数据
            typeData : "", //节点类型数据

            addNode : addNode, //添加节点
            editNode : editNode, //编辑节点
            disabledAndEnabledNode : disabledAndEnabledNode, //禁用或者启用节点
            deleteNode : deleteNode, //删除节点
            findNodeInfo : findNodeInfo, //查找节点信息

            listTypeData : listTypeData, //查询节点类型数据
            listStatusData : listStatusData, //查询状态数据

            addSubNode : addSubNode, //添加子节点到子节点集合中
            removeOldSubNode : removeOldSubNode, //从旧的子节点中删除子节点

            dialogTitle : "",  //对话框标题
            allowSubmit : 0, //是否允许提交
            errorTip : "", //错误访问地址提示
            errorNodeIdTip : "" //错误节点id提示

        };


        listTypeData(); //查询节点类型数据
        listStatusData(); //查询状态数据

        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listNodeData(1);
        //请求节点列表
        function listNodeData(index){
            httpRequestPost("/api/application/node/listNodeByPage",{
                "applicationId": $scope.vm.applicationId,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.nodeData = data.data;
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listNodeData(current);
                }, 100)

            }
        },true);
        //查询节点的基本信息
        function findNodeInfo(nodeCode){
            httpRequestPostAsync("/api/application/node/findNodeInfo",{
                "nodeCode" : nodeCode
            },function(data){
                if(data.status==200){
                    $scope.vm.nodeId = data.data.nodeId;//父级节点id
                    $scope.vm.nodeAccessIp = data.data.nodeAccessIp;//父级节点访问地址
                    $scope.vm.statusId = data.data.statusId; //父级节点状态
                    $scope.vm.nodeType = data.data.nodeType; //父级节点类型
                    $scope.vm.nodeCode = data.data.nodeCode; //父级节点编号
                    $scope.vm.nodes = data.data.nodes; //新增子集节点集合

                    //$scope.$apply();
                }else{
                    layer.msg("查询节点信息失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //编辑节点弹出框
        function editNode(nodeCode){
            findNodeInfo(nodeCode);
            //如果当前节点正在使用中
            if($scope.vm.statusId==60002){
                layer.msg("当前节点正在使用中!");
                return;
            }
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationRelease/NodeManageDialog.html",
                width:"550px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if($scope.vm.allowSubmit){
                            console.log(JSON.stringify($scope.vm.nodes));
                            angular.forEach($scope.vm.nodes,function(data1){
                                var obj = {};
                                obj.nodeId = data1.nodeId;
                                obj.nodeAccessIp = data1.nodeAccessIp;
                                obj.nodeCode = data1.nodeCode;
                                console.log("节点编号"+data1.nodeCode);
                                $scope.vm.newNodes.push(obj);
                            });

                            angular.forEach($scope.vm.deleteNodes,function(data1){
                                var obj = {};
                                obj.nodeId = data1.nodeId;
                                obj.nodeAccessIp = data1.nodeAccessIp;
                                obj.nodeCode = data1.nodeCode;
                                $scope.vm.delNodes.push(obj);
                            });

                            httpRequestPost("/api/application/node/editNode",{
                                "nodeId" : $scope.vm.nodeId, //父级节点id
                                "nodeAccessIp" : $scope.vm.nodeAccessIp, //父级节点访问地址
                                "statusId" : $scope.vm.statusId, //父级节点状态
                                "nodeType" : $scope.vm.nodeType, //父级节点类型
                                "nodes" : $scope.vm.newNodes, //新增子集节点集合
                                "nodeCreateId" : $scope.vm.nodeCreateId, //操作用户id
                                "nodeCode" : $scope.vm.nodeCode, //父级节点编号
                                "deleteNodes" : $scope.vm.delNodes, //待删除的子节点
                                "userId": $scope.vm.nodeCreateId
                            },function(data){
                                if(data.status==200){
                                    layer.msg("编辑成功");
                                    listNodeData(1);
                                }else{
                                    layer.msg("编辑出错了");
                                }
                            },function(){
                                layer.msg("请求失败");
                            })
                        }else{
                            layer.msg("访问地址或者节点编号不合法！");
                        }
                    }
                    initNodeInput();
                }
            });
        }

        //添加节点
        function addNode(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationRelease/NodeManageDialog.html",
                width:"550px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        if($scope.vm.allowSubmit){
                            angular.forEach($scope.vm.nodes,function(data1){
                                var obj = {};
                                obj.nodeId = data1.nodeId;
                                obj.nodeAccessIp = data1.nodeAccessIp;
                                $scope.vm.newNodes.push(obj);
                            });
                            httpRequestPost("/api/application/node/addNode",{
                                "nodeId" : $scope.vm.nodeId==""?0:$scope.vm.nodeId, //父级节点id
                                "nodeAccessIp" : $scope.vm.nodeAccessIp, //父级节点访问地址
                                "statusId" : $scope.vm.statusId, //父级节点状态
                                "nodeType" : $scope.vm.nodeType, //父级节点类型
                                "nodes" : $scope.vm.newNodes, //新增子集节点集合
                                "nodeCreateId" : $scope.vm.nodeCreateId,  //操作用户id
                                "userId": $scope.vm.nodeCreateId
                            },function(data){
                                if(data.status==200){
                                    layer.msg("添加成功");
                                    listNodeData(1);
                                }else{
                                    layer.msg("添加出错了！");
                                }
                            },function(){
                                layer.msg("添加失败");
                            })
                        }else{
                            layer.msg("访问地址或者节点编号不合法！");
                        }
                    }
                    initNodeInput();
                }
            });
        }

        //初始化添加节点页面相应的输入值
        function initNodeInput(){
            $scope.vm.nodeType = $scope.vm.typeData[0].statusId ;
            $scope.vm.channelName = "";
            $scope.vm.nodeId=""; //父级节点id
            $scope.vm.nodeAccessIp=""; //父级节点访问地址
            $scope.vm.nodes=[]; //新增子集节点集合
            $scope.vm.subNode=""; //子节点的id
            $scope.vm.subNodeAccessIp=""; //子节点的访问地址
            $scope.vm.nodeCode=""; //父级节点编号
        }



        //查询节点类型数据
        function listTypeData(){
            httpRequestPost("/api/application/node/findNodeType",{
            },function(data){
                if(data.status==200){
                    $scope.vm.typeData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询节点类型失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //查询状态数据
        function listStatusData(){
            httpRequestPost("/api/application/node/findNodeStatus",{
            },function(data){
                if(data.status==200){
                    $scope.vm.statusData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询节点类型失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //禁用节点
        function disabledAndEnabledNode(nodeCode,operator){
            layer.confirm("确认"+operator+"？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/node/disabledAndEnabledNode",{
                    "nodeCode": nodeCode
                },function(data){
                    if(data.status==200){
                        layer.msg(data.info);
                        listNodeData(1);
                    }else{
                        layer.msg("操作失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //删除节点
        function deleteNode(nodeCode){
            layer.confirm("确认删除？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/node/deleteNode",{
                    "nodeCode": nodeCode
                },function(data){
                    if(data.status==200){
                        layer.msg("删除节点成功");
                        listNodeData(1);
                    }else{
                        layer.msg("删除节点失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //从原有的子节点中删除子节点
        function removeOldSubNode(node){
            if(node!=null&&node.nodeCode!=null){
                $scope.vm.deleteNodes.push(node);
            }
        }

        //添加子节点信息到子节点集合中并进行校验
        function addSubNode(nodeId,nodeAccessIp){
            if($scope.vm.nodeAccessIp==nodeAccessIp){
                layer.msg("子节点IP与集群节点IP重复了");
                $scope.vm.allowSubmit=0;
                return ;
            }
            var obj = {};
            obj.nodeId = nodeId;
            obj.nodeAccessIp = nodeAccessIp;
            var repeatFlag=false;
            if(nodeId!=null&&nodeAccessIp!=null&&nodeId!=""&&nodeAccessIp!=""){
                console.log("添加前："+$scope.vm.nodes);
                angular.forEach($scope.vm.nodes,function(data1){
                    if(data1.nodeId==nodeId&&data1.nodeAccessIp==nodeAccessIp){
                        repeatFlag=true;
                    }
                });
                if(repeatFlag){
                    layer.msg("重复添加了");
                }else{
                    httpRequestPost("/api/application/node/checkNode",{
                        nodeId : nodeId,
                        nodeAccessIp : nodeAccessIp
                    },function(data){
                        if(data.status==200){
                            $scope.vm.nodes.push(obj);
                            $scope.vm.subNodeId="";
                            $scope.vm.subNodeAccessIp="";
                            $scope.vm.allowSubmit=1;
                            $scope.$apply();
                        }else{
                            $scope.vm.allowSubmit=0;
                            layer.msg(data.info);
                        }
                    },function(){
                        layer.msg("校验失败");
                    })
                }

            }else{
                layer.msg("节点信息不能为空");
            }
        }
    }

]).directive('checkIp', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                //httpRequestPost("/api/application/node/checkNode",{
                //    nodeAccessIp: scope.vm.nodeAccessIp,
                //    nodeCode: scope.vm.nodeCode
                //},function(data){
                //    console.log(data);
                //    if(data.status==200){
                //        c.$setValidity('unique', true);
                //        scope.vm.allowSubmit=1;
                //    }else{
                //        c.$setValidity('unique', false);
                //        scope.vm.allowSubmit=0;
                //        scope.vm.errorTip=data.info;
                //    }
                //},function(){
                //    c.$setValidity('unique', false);
                //    scope.vm.allowSubmit=0;
                //});
                $http({
                    method: 'POST',
                    url: '/api/application/node/checkNode',
                    data:{
                        nodeAccessIp: scope.vm.nodeAccessIp,
                        nodeCode: scope.vm.nodeCode
                    }
                }).success(function(data){
                    if(data.status==200){
                        c.$setValidity('unique', true);
                        scope.vm.allowSubmit=1;
                    }else{
                        c.$setValidity('unique', false);
                        scope.vm.allowSubmit=0;
                        scope.vm.errorTip=data.info;
                    }
                }).error(function(data){
                    c.$setValidity('unique', false);
                    scope.vm.allowSubmit=0;
                })
            });
        }
    }
}).directive('checkNode', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                $http({
                    method: 'POST',
                    url: '/api/application/node/checkNode',
                    data:{
                        nodeId: scope.vm.nodeId,
                        nodeAccessIp: scope.vm.nodeAccessIp,
                        nodeCode: scope.vm.nodeCode
                    }
                }).success(function(data){
                    if(data.status==200){
                        c.$setValidity('unique', true);
                        scope.vm.allowSubmit=1;
                    }else{
                        c.$setValidity('unique', false);
                        scope.vm.allowSubmit=0;
                        scope.vm.errorNodeIdTip=data.info;
                    }
                }).error(function(data){
                    c.$setValidity('unique', false);
                    scope.vm.allowSubmit=0;
                })
            });
        }
    }
});
// Source: app/static/myApplication/js/controller/relationalCatalog_controller.js

/**
 * Created by Administrator on 2016/6/3.
 * 控制器
 */
angular.module('myApplicationModule').controller('relationalCatalogController',[
    '$scope','localStorageService','$timeout', '$state','$stateParams','ngDialog','$cookieStore','$interval',function ($scope,localStorageService,$timeout,$state,$stateParams,ngDialog,$cookieStore,$interval) {
        $scope.vm = {
            success : 10000,
            illegal : 10003,
            failed : 10004,
            empty : 10005,
            botSelectValue:"root",
            categoryNode:"node",
            categoryEdge:"edge",
            botRoot : "",     //根节点
            knowledgeBotVal:"",  //bot 内容
            botInfo:null,  //bot信息
            addBot:addBot, //添加点击时间
            editBot:editBot,
            deleteBot:deleteBot,
            categoryId: "",
            categoryTypeId: 163,
            botSelectType:163,
            categorySceneId: 0,
            categoryAttributeName: "edge",
            categoryName: "",
            categoryPid: "",
            categoryApplicationId: "",
            categoryLeaf: 1,
            botInfoToCategoryAttribute:botInfoToCategoryAttribute,
            clearColor:clearColor,
            repeatCheck:repeatCheck,
            categoryNameNullOrBeyondLimit:"类目名称为空或超过长度限制50",
            notContainHtmlLabel:"不能包含HTML标签",
            categoryDescribeBeyondLimit:"描述内容超过长度限制2000",
            searchNode:searchNode,
            recursion:recursion,
            location:location,
            autoHeight:autoHeight,
            downloadTemplate:downloadTemplate,
            exportAll:exportAll,
            batchUpload:batchUpload,
            categoryDescribe:"",
            suggestionValue:"",
            suggestionData:"",
            winHeight:0
        };
        var categoryApplicationId = $cookieStore.get("applicationId");
        var categoryModifierId = $cookieStore.get("userId");
        var categorySceneId = $cookieStore.get("sceneId");

        autoHeight();

        function autoHeight(){
            var $win = $(window);
            var winHeight = $win.height()*0.75;
            $scope.vm.winHeight=winHeight+5;
            $(".libraryFt").attr("style","width: 450px;height: "+winHeight+"px;overflow-y: auto;background: #fff;float: left;");
            $(".libraryRth").attr("style","width: 720px;height: "+winHeight+"px;overflow-y: auto;background: #fff;float: right;padding: 30px;");
        }

        var params = {
            "categoryName":$("#category-autocomplete").val(),
            "categoryAttributeName":"node",
            "categoryApplicationId":categoryApplicationId
        };
        //类目查找自动补全
        $('#category-autocomplete').autocomplete({
            serviceUrl: "/api/ms/modeling/category/searchbycategoryname",
            type:'POST',
            params:params,
            paramName:'categoryName',
            dataType:'json',
            transformResult:function(data){
                var result = new Object();
                var array = [];
                if(data.data){
                    for(var i=0;i<data.data.length;i++){
                        array[i]={
                            data:data.data[i].categoryId,
                            value:data.data[i].categoryName
                        }
                    }
                }
                result.suggestions = array;
                return result;
            },
            onSelect: function(suggestion) {
                searchNode(suggestion);
                $scope.vm.suggestionValue=suggestion.value;
                $scope.vm.suggestionData=suggestion.data;
            }
        });
        $interval(function(){
            if(nullCheck($scope.vm.suggestionData)==true){
                var suggestion = new Object();
                suggestion.value=$scope.vm.suggestionValue;
                suggestion.data=$scope.vm.suggestionData;
                if(locationFlag(suggestion)){
                    location(suggestion);
                    $scope.vm.suggestionValue="";
                    $scope.vm.suggestionData="";
                }
            }
        },2000);
        //搜寻节点
        function searchNode(suggestion){
            var currentNodeId = suggestion.data;
            var firstNode = $(".aside-navs").find("i").filter(":eq(0)");
            if($(firstNode).css("backgroundPosition")=="0% 0%"){
                appendTree(firstNode);
            }else if($(firstNode).parent().parent().next()==null){
                appendTree(firstNode);
            }
            if($(firstNode).attr("data-option")==currentNodeId){
                clearColor();
                $scope.vm.knowledgeBotVal = $(firstNode).next().html();
                $scope.vm.botSelectValue = $(firstNode).next().attr("data-option");
                $scope.vm.botSelectType = $(firstNode).next().attr("type-option");
                $scope.vm.categoryAttributeName = $(firstNode).next().attr("node-option");
                $(firstNode).next().attr("style","color:black;font-weight:bold;");
                updateCreateMethod($scope.vm.knowledgeBotVal,$scope.vm.categoryAttributeName);
                disableAttributeType();
                $scope.$apply();
            }else{
                recursion(suggestion,firstNode);
            }
        }
        function recursion(suggestion,node){
            var list = $(".aside-navs").find("li");
            var flag = false;
            $.each(list,function(index,value){
                if($(value).attr("data-option")==$(node).attr("data-option")){
                    var currNode = $(value).find("i").filter(":eq(0)");
                    if($(currNode).attr("data-option")==suggestion.data){
                        clearColor();
                        $scope.vm.knowledgeBotVal = $(currNode).next().html();
                        $scope.vm.botSelectValue = $(currNode).next().attr("data-option");
                        $scope.vm.botSelectType = $(currNode).next().attr("type-option");
                        $scope.vm.categoryAttributeName = $(currNode).next().attr("node-option");
                        $(currNode).next().attr("style","color:black;font-weight:bold;");
                        updateCreateMethod($scope.vm.knowledgeBotVal,$scope.vm.categoryAttributeName);
                        disableAttributeType();
                        $scope.$apply();
                        flag = true;
                        //跳出
                        return false;
                    }else{
                        //展开
                        if($(currNode).css("backgroundPosition")=="0% 0%"){
                            appendTree(currNode);
                        }else if($(currNode).parent().parent().next()==null){
                            appendTree(currNode);
                        }
                        if(flag==true){
                            return false;
                        }
                        //递归
                        recursion(suggestion,currNode);
                    }
                }
            });
        }
        //定位
        function location(suggestion){
            var currentNodeId = suggestion.data;
            var initHeight = 0;
            var sum = $(".aside-navs").find("i").length;
            $.each($(".aside-navs").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    var offset = 0;
                    if(scrollHeight-100>0){
                        offset = (((initHeight+1)/sum)*(scrollHeight-100));
                    }
                    $(".libraryFt").animate({
                        scrollTop:offset+"px"
                    },800);
                    return false;
                }else{
                    initHeight++;
                }
            });
        }
        function locationFlag(suggestion){
            var currentNodeId = suggestion.data;
            var flag = false;
            var sum = $(".aside-navs").find("i").length;
            $.each($(".aside-navs").find("i"),function(index,value){
                if($(value).attr("data-option")==currentNodeId){
                    var lib = $(".libraryFt");
                    var scrollHeight=0;
                    if(lib.length>0){
                        scrollHeight = lib[0].scrollHeight;
                    }
                    if(sum>=10 && scrollHeight>=$scope.vm.winHeight){
                        flag = true;
                    }else if(sum<10){
                        flag = true;
                    }
                    return false;
                }
            });
            return flag;
        }
        //加载业务树
        initBot();

        //获取root 数据
        function initBot(){
            $(".aside-navs").empty();
            httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                "categoryApplicationId": categoryApplicationId,
                "categoryPid": "root"
            },function(data){
                var html =  '<ul class="menus show">';
                for(var i=0;data.data != null && i<data.data.length;i++){
                    html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                        '<div class="slide-a">'+
                        '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                        '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                        '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' node-option="'+data.data[i].categoryAttributeName+'" type-option="'+data.data[i].categoryTypeId+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                        '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[i])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                        '</a>' +
                        '</div>' +
                        '</li>';
                }
                html+='</ul>';
                $(".aside-navs").append(html);
                var firstNode = $(".aside-navs").find("i").filter(":eq(0)");
                if($(firstNode).css("backgroundPosition")=="0% 0%"){
                    appendTree(firstNode);
                }else if($(firstNode).parent().parent().next()==null){
                    appendTree(firstNode);
                }
            },function(){
            });
        }
        $(".aside-navs").on("click","span",function(){
            clearColor();
            $scope.vm.knowledgeBotVal = $(this).html();
            $scope.vm.botSelectValue = $(this).attr("data-option");
            $scope.vm.botSelectType = $(this).attr("type-option");
            $scope.vm.categoryAttributeName = $(this).attr("node-option");
            if($scope.vm.categoryAttributeName=="node"){
                $(this).attr("style","color:black;font-weight:bold;");
            }else if($scope.vm.categoryAttributeName=="edge"){
                $(this).attr("style","color:#ED7D31;font-weight:bold;");
            }
            updateCreateMethod($scope.vm.knowledgeBotVal,$scope.vm.categoryAttributeName);
            disableAttributeType();
            $scope.$apply();
        });
        //更新新建方法
        function updateCreateMethod(knowledgeBotVal,categoryAttributeName){
            if(categoryAttributeName=="node"){
                $("#createMethod").html("新建关系到"+knowledgeBotVal+"下面");
            }else if(categoryAttributeName=="edge"){
                $("#createMethod").html("新建节点到"+knowledgeBotVal+"下面");
            }
        }
        $(".aside-navs").on("click",".edit",function(){
            $scope.vm.botInfo = $(this).parent().attr("bot-info");
            botInfoToCategoryAttribute();
            editBot();
        });
        function editBot(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationDevelopment/editCategory.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){  //关闭回调
                    if(e===1){
                        if(lengthCheck($("#categoryName").val(),0,50)==false){
                            $("#editErrorView").html($scope.vm.categoryNameNullOrBeyondLimit);
                            return false;
                        }
                        if(repeatCheck("#editErrorView",1)==false){
                            return false;
                        }
                        if(isHtmlLabel($("#categoryName").val())){
                            $("#editErrorView").html($scope.vm.notContainHtmlLabel);
                            return false;
                        }
                        if(nullCheck($("#categoryDescribe").val())==true){
                            if(lengthCheck($("#categoryDescribe").val(),0,2000)==false){
                                $("#categoryDescribeError").html($scope.vm.categoryDescribeBeyondLimit);
                                return false;
                            }else if(isHtmlLabel($("#categoryDescribe").val())){
                                $("#categoryDescribeError").html($scope.vm.notContainHtmlLabel);
                                return false;
                            }else{
                                $scope.vm.categoryDescribe=$("#categoryDescribe").val();
                            }
                        }
                        console.log(1)
                        httpRequestPost("/api/ms/modeling/category/updatebycategoryid",{
                            "categoryId": $scope.vm.categoryId,
                            "categoryApplicationId": $scope.vm.categoryApplicationId,
                            "applicationId": categoryApplicationId,
                            "categoryPid": $scope.vm.categoryPid,
                            "categoryAttributeName": $scope.vm.categoryAttributeName,
                            "categoryName": $("#categoryName").val().trim(),
                            "categoryTypeId": $("#categoryTypeId").val(),
                            "categoryModifierId": categoryModifierId,
                            "categoryDescribe": $scope.vm.categoryDescribe.trim(),
                            "categorySceneId": categorySceneId,
                            "categoryLeaf": $scope.vm.categoryLeaf
                        },function(data){
                            if(responseView(data)==true){
                                //重新加载
                                reloadBot(data,2);
                            }
                        },function(err){
                        });
                    }else{
                    }
                    //还原类目属性类型
                    $scope.vm.categoryDescribe="";
                    $scope.vm.categoryAttributeName="edge";
                }
            });
            if(dialog){
                $timeout(function () {
                    $("#categoryName").blur(function(){
                        if(lengthCheck($("#categoryName").val(),0,50)==false){
                            $("#editErrorView").html($scope.vm.categoryNameNullOrBeyondLimit);
                        }else{
                            $("#editErrorView").html('');
                            repeatCheck("#editErrorView",1);
                        }
                    });
                    $.each($("#categoryTypeId").find("option"),function(index,value){
                        if($scope.vm.categoryAttributeName=="edge"){
                            $(value).attr("disabled",null);
                            $(value).attr("style","");
                        }else{
                            if(($(value).val()==$scope.vm.categoryTypeId)>0){
                                $("#categoryTypeId").val($scope.vm.categoryTypeId);
                                $(value).attr("disabled",null);
                                $(value).attr("style","");
                            }else{
                                $(value).attr("disabled","disabled");
                                $(value).attr("style","background-color: lightgrey");
                            }
                        }
                    });
                }, 100);
            }
        }
        $(".aside-navs").on("click",".delete",function(){
            $scope.vm.botInfo = $(this).parent().attr("bot-info");
            botInfoToCategoryAttribute();
            deleteBot();
        });
        function deleteBot(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationDevelopment/deleteCategory.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回调
                    if(e === 1){
                        httpRequestPost("/api/ms/modeling/category/deletebycategoryid",{
                            "categoryId": $scope.vm.categoryId,
                            "categoryApplicationId": $scope.vm.categoryApplicationId,
                            "categoryPid": $scope.vm.categoryPid,
                            "categoryLeaf": $scope.vm.categoryLeaf
                        },function(data){
                            if(responseView(data)==true){
                                //重新加载
                                reloadBot(data,1);
                            }
                        },function(err){
                        });
                    }else{
                    }
                    //还原类目属性类型
                    $scope.vm.categoryAttributeName="edge";
                }
            });
        }
        //点击下一级 bot 下拉数据填充以及下拉效果
        $(".aside-navs").on("click",'i',function(){
            appendTree(this);
        });
        //加载子树
        function appendTree(obj){
            var id = $(obj).attr("data-option");
            var that = $(obj);
            if(!that.parent().parent().siblings().length){
                that.css("backgroundPosition","0% 100%");
                httpRequestPostAsync("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId": categoryApplicationId,
                    "categoryPid": id
                },function(data){
                    if(data.data){
                        var html = '<ul class="menus">';
                        for(var i=0;i<data.data.length;i++){
                            html+= '<li data-option="'+data.data[i].categoryPid+'">' +
                                '<div class="slide-a">'+
                                '<a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[i].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[i].categoryTypeId,data.data[i].categoryLeaf,data.data[i].categoryAttributeName)+' data-option="'+data.data[i].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[i].categoryAttributeName)+' node-option="'+data.data[i].categoryAttributeName+'" type-option="'+data.data[i].categoryTypeId+'" data-option="'+data.data[i].categoryId+'" title="'+data.data[i].categoryName+'">'+subStringWithTail(data.data[i].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[i])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                        }
                        html+="</ul>";
                        $(html).appendTo((that.parent().parent().parent()));
                        that.parent().parent().next().slideDown();
                    }
                },function(err){
                });
            }else{
                if(that.css("backgroundPosition")=="0% 0%"){
                    that.css("backgroundPosition","0% 100%");
                    that.parent().parent().next().slideDown();
                }else{
                    that.css("backgroundPosition","0% 0%");
                    that.parent().parent().next().slideUp();
                }
            }
        }
        //类目新增
        function addBot(){
            //数据校验
            if($scope.vm.botSelectValue==""){
                return;
            }
            if(lengthCheck($("#category-name").val(),0,50)==false){
                $("#category-name-error").html($scope.vm.categoryNameNullOrBeyondLimit);
                return;
            }
            if(isHtmlLabel($("#category-name").val())){
                $("#category-name-error").html($scope.vm.notContainHtmlLabel);
                return;
            }
            if(repeatCheck("#category-name-error",0)==false){
                return;
            }
            if(nullCheck($("#category-describe").val())==true){
                if(lengthCheck($("#category-describe").val(),0,2000)==false){
                    $("#category-describe-error").html($scope.vm.categoryDescribeBeyondLimit);
                    return;
                }else if(isHtmlLabel($("#category-describe").val())){
                    $("#category-describe-error").html($scope.vm.notContainHtmlLabel);
                    return;
                }else{
                    $scope.vm.categoryDescribe=$("#category-describe").val();
                }
            }
            httpRequestPost("/api/ms/modeling/category/add",{
                "categoryApplicationId": categoryApplicationId,
                "applicationId": categoryApplicationId,
                "categoryPid": $scope.vm.botSelectValue,
                "categoryAttributeName": $scope.vm.categoryAttributeName,
                "categoryName": $("#category-name").val(),
                "categoryTypeId": $("#category-type").val(),
                "categoryModifierId": categoryModifierId,
                "categorySceneId": categorySceneId,
                "categoryDescribe": $scope.vm.categoryDescribe,
                "categoryLeaf": 0
            },function(data){
                if(responseView(data)==true){
                    //重新加载
                    $("#category-name").val('');
                    reloadBot(data,0);
                }
                $("#category-describe").val('')
            },function(err){
            });
            $scope.vm.categoryDescribe="";
        }

        /**
         * 类目名称城府判断  0:添加时的重复判断 1:修改时的重复判断
         * @param type
         * @returns {boolean}
         */
        function repeatCheck(selector,type){
            var flag = false;
            var request = new Object();
            if(type==1){
                request.categoryId=$scope.vm.categoryId;
                request.categoryApplicationId=$scope.vm.categoryApplicationId;
                request.categoryPid=$scope.vm.categoryPid;
                request.categoryAttributeName=$scope.vm.categoryAttributeName;
                request.categoryName=$("#categoryName").val();
                request.categorySceneId=categorySceneId;
            }else{
                request.categoryApplicationId=categoryApplicationId;
                request.categoryPid=$scope.vm.botSelectValue;
                request.categoryAttributeName=$scope.vm.categoryAttributeName;
                request.categoryName=$("#category-name").val();
                request.categorySceneId=categorySceneId;
            }
            httpRequestPostAsync("/api/ms/modeling/category/repeatcheck",request,function(data){
                if(responseWithoutView(data)==false){
                    if(data){
                        $(selector).html(data.info);
                    }
                }else{
                    flag = true;
                }
            },function(err){
            });
            return flag;
        }
        //局部加载 type:0->添加 1:删除 2:修改
        function reloadBot(data,type){
            if(type!=0){
                $.each($(".aside-navs").find("li"),function(index,value){
                    if($(value).find("i").attr("data-option")==$scope.vm.categoryId){
                        var length = $(value).parent().find("li").length-1;
                        //删除以后判断 子级以下是否还有节点 如果没有隐藏下拉开关
                        if(length==0 && type==1){
                            $(value).parent().prev().find("i").attr("style","display:none");
                        }
                        //移除指定元素
                        $(value).remove();
                    }
                });
            }

            if(type==1){
                return;
            }

            if($scope.vm.botSelectValue=="root"){
                initBot();
            }else{
                var count=0;
                $.each($(".aside-navs").find("i"),function(index,value){
                    if(type==2){
                        if($(value).attr("data-option")==data.data[0].categoryPid){
                            count++;
                            var html = '<li data-option="'+data.data[0].categoryPid+'">' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[0].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[0].categoryTypeId,data.data[0].categoryLeaf,data.data[0].categoryAttributeName)+' data-option="'+data.data[0].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[0].categoryAttributeName)+' node-option="'+data.data[0].categoryAttributeName+'" type-option="'+data.data[0].categoryTypeId+'" data-option="'+data.data[0].categoryId+'" title="'+data.data[0].categoryName+'">'+subStringWithTail(data.data[0].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[0])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                            //按照修改时间排序 把数据添加到前面
                            $(value).parent().parent().next().append(html);
                        }
                    }else if(type==0){
                        if($(value).attr("data-option")==data.data[0].categoryPid){
                            count++;
                            var html = '<li data-option="'+data.data[0].categoryPid+'">' +
                                '<div class="slide-a">'+
                                ' <a class="ellipsis" href="javascript:;" '+categoryDescribeView(data.data[0].categoryDescribe)+'>'+
                                '<i '+styleSwitch(data.data[0].categoryTypeId,data.data[0].categoryLeaf,data.data[0].categoryAttributeName)+' data-option="'+data.data[0].categoryId+'"></i>'+
                                '<span '+nodeStyleSwitch(data.data[0].categoryAttributeName)+' node-option="'+data.data[0].categoryAttributeName+'" type-option="'+data.data[0].categoryTypeId+'" data-option="'+data.data[0].categoryId+'" title="'+data.data[0].categoryName+'">'+subStringWithTail(data.data[0].categoryName,10,"...")+'</span>'+
                                '&nbsp;<p class="treeEdit" bot-info='+toCategoryString(data.data[0])+'><img class="edit" src="images/bot-edit.png"/><img class="delete" style="width: 12px;" src="images/detel.png"/></p>'+
                                '</a>' +
                                '</div>' +
                                '</li>';
                            //按照修改时间排序 把数据添加到前面
                            var obj = $(value).parent().parent().next();
                            var nodeType = "edge";
                            if(data.data[0].categoryAttributeName=="node"){
                                nodeType = "edge";
                            }else if(data.data[0].categoryAttributeName=="edge"){
                                nodeType = "node";
                            }
                            var sty = styleSwitch(data.data[0].categoryTypeId,1,nodeType);
                            sty = sty.substring(7,sty.length-1);
                            if($(value).parent().parent().next()!=null){
                                var len = $(value).parent().parent().next().find("li").length;
                                if(len>0){
                                    $(value).parent().parent().next().append(html);
                                }else{
                                    $(value).parent().parent().next().append(html);
                                    $(value).attr("style",sty);
                                }
                            }else{
                                var htmlAppend='<ul class="menus show">'+html+'</ul>';
                                $(value).parent().parent().parent().append(htmlAppend);
                                //加上子节点之后 把开关按钮显示
                                $(value).attr("style",sty);
                            }
                        }
                    }
                });
                if(count==0){
                    initBot();
                }
            }
        }
        //返回状态显示
        function responseView(data){
            if(data==null){
                return false;
            }
            layer.msg(data.info);
            if(data.status==$scope.vm.success){
                return true;
            }
            return false;
        }
        //返回状态显示
        function responseWithoutView(data){
            if(data==null){
                return false;
            }
            if(data.status==$scope.vm.success){
                return true;
            }
            return false;
        }
        //属性填充
        function botInfoToCategoryAttribute(){
            if($scope.vm.botInfo){
                var category = JSON.parse($scope.vm.botInfo);
                $scope.vm.botSelectValue=category.categoryId;
                $scope.vm.categoryId=category.categoryId;
                $scope.vm.categoryTypeId=category.categoryTypeId;
                categorySceneId=category.categorySceneId;
                $scope.vm.categoryName=category.categoryName;
                $scope.vm.categoryAttributeName=category.categoryAttributeName;
                $scope.vm.categoryPid=category.categoryPid;
                $scope.vm.categoryApplicationId=category.categoryApplicationId;
                if(nullCheck(category.categoryDescribe)==true){
                    $scope.vm.categoryDescribe=underlineToWhiteSpace(category.categoryDescribe);
                }
                $scope.vm.categoryLeaf=category.categoryLeaf;
            }
        }
        //禁用指定属性类型
        function disableAttributeType(){
            $.each($("#category-type").find("option"),function(index,value){
                if($scope.vm.categoryAttributeName=="node"){
                    $(value).attr("disabled",null);
                    $(value).attr("style","");
                }else{
                    if(($(value).val()==$scope.vm.botSelectType)>0){
                        $("#category-type").val($scope.vm.botSelectType);
                        $(value).attr("disabled",null);
                        $(value).attr("style","");
                    }else{
                        $(value).attr("disabled","disabled");
                        $(value).attr("style","background-color: lightgrey");
                    }
                }
            });
        }
        //清除已选颜色
        function clearColor(){
            $.each($(".aside-navs").find("span"),function(index,value){
                if($(this).attr("node-option")=="node"){
                    $(this).attr("style","");
                }else if($(this).attr("node-option")=="edge"){
                    $(this).attr("style","color:#ED7D31;");
                }
            });
        }
        //自动转换图标类型
        function styleSwitch(type,leaf,attrType){
            var styleHidden = "display: inline-block;";
            if(leaf==0){
                styleHidden="display:none;";
            }
            if(attrType=="node"){
                return "style='"+styleHidden+"position: relative;top: -1px;margin-right: 2px;width: 15px;height: 15px;vertical-align: middle;background-position: left top;background-repeat: no-repeat;background-image: url(../../images/images/aside-nav-icon.png);'";
            }
            var style ='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-rq.png);"';
            switch (type){
                case 161:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-sx.png);"';break;
                case 160:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-lc.png);"';break;
                case 162:
                    style='style="'+styleHidden+'position: relative;top: -1px; margin-right: 5px; width: 15px; height: 15px; vertical-align: middle; background-position: left top; background-repeat: no-repeat;background-image:url(../../images/pic-navs-dy.png);"';break;
            }
            return style;
        }
        //节点样式转换
        function nodeStyleSwitch(attrType){
            if(attrType=="edge"){
                return "style='color:#ED7D31;'";
            }else{
                return "";
            }
        }
        //显示节点描述
        function categoryDescribeView(describeStr){
            if(nullCheck(describeStr)==true){
                return "title='"+describeStr+"'";
            }
            return "";
        }
        $("#category-name").blur(function(){
            if(lengthCheck($("#category-name").val(),0,50)==false){
                $("#category-name-error").html($scope.vm.categoryNameNullOrBeyondLimit);
            }else{
                $("#category-name-error").html('');
                repeatCheck("#category-name-error",0);
            }
        });
        function downloadTemplate(){
            downloadFile("/api/ms/knowledgeManage/downloadKnowledgeTemplate","","business_ontology_tree_template.xlsx");
        }
        function exportAll(){
            httpRequestPost("/api/ms/modeling/category/export",{
                "categoryApplicationId":categoryApplicationId
            },function(data){
                if(responseView(data)==true){
                    if(data.exportFileNameList.length>0){
                        downloadFile("/api/ms/modeling/downloadWithPath",data.filePath,data.exportFileNameList[0]);
                    }
                }
            });
        }
        function batchUpload(){
            var pid = 'root';
            var dialog = ngDialog.openConfirm({
                template:"/static/businessModeling/batchUpload.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    //refresh
                    initBot();
                }
            });
            if(dialog){
                $timeout(function () {
                    initUpload('/api/ms/modeling/category/batchAdd?applicationId='+categoryApplicationId+'&modifierId='+categoryModifierId+'&sceneId='+categorySceneId+'&pid='+pid);
                }, 100);
            }
        }
    }
]);
// Source: app/static/myApplication/js/controller/robotSetting_controller.js
/**
 * Created by dinfo on 2017/3/28.
 */

angular.module('myApplicationSettingModule').controller('robotSettingController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog",'$http', "$cookieStore","$rootScope",
    function ($scope,localStorageService, $state,ngDialog,$http,$cookieStore,$rootScope) {
        $scope.robot = {
            classicHead:['touxiang1.png','touxiang2.png','touxiang3.png','touxiang4.png', 'touxiang5.png','touxiang6.png','touxiang7.png','touxiang8.png'], //经典头像列表
            applicationId: $cookieStore.get("applicationId"),
            userId :  $cookieStore.get("userId"),   //用户id
            robotExpire : "", //时间到期回复
            robotHead : "",//头像
            imgUrl : "", //文件服务器地址
            newRobotHead : "", //新的头像
            robotHotQuestionTimeout : "",//热点问题更新频率
            robotLearned : "",//学到新知识回答
            robotName : "", //名称
            robotRepeat : "",//重复问答回复
            robotRepeatNumber : "",//重复问答次数
            robotSensitive : "",// 敏感问答回复
            robotTimeout : "",//超时提示回复
            robotTimeoutLimit : "",//超时时长
            robotUnknown : "",//未知问答回复
            robotUpdateId :  $cookieStore.get("userId"),//更新人员id
            robotWelcome : "",//欢迎语
            settingId : "",//机器人参数ID
            editRobot : editRobot,  //编辑机器人参数
            findRobotSetting : findRobotSetting, //查询机器人参数
            addClassic : addClassic,  //弹出经典头像对话框
            addCustom : addCustom,  //弹出自定义头像对话框
            selectClassic : selectClassic, //选择经典头像

            myFile : "" ,//上传的图片
            //x : "", //坐标x
            //y : "", //坐标y
            //w : "", //截取的宽度
            //h : "", //截取的高度
            isHeadPicSize : isHeadPicSize  //头像大小是否合格 1Mb
        };

        //弹出经典头像对话框
        function addClassic(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/settingContentDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        $scope.robot.robotHead=$scope.robot.newRobotHead;
                        httpRequestPost("/api/application/application/saveClassicHead",{
                            "robotHead": $scope.robot.robotHead,
                            "settingId": $scope.robot.settingId
                        },function(data){
                            if(data.status===200){
                                layer.msg("修改头像成功");
                                $state.reload();
                            }else{
                                layer.msg("修改头像失敗");
                            }
                        },function(){
                            layer.msg("修改头像请求失败");
                        })
                    }
                }
            });
        }

        //选择经典头像
        function selectClassic(item){
            console.log("点击"+item); 
            $scope.robot.newRobotHead=item;
        }
        //确定头像 大小检测
        function isHeadPicSize(){
            var file = document.querySelector('input[type=file]').files[0];
            console.log(file)
            //if(!file){
            //    layer.msg("请选择要上传的头像")
            //}else if(file.size>1024){
            //    layer.msg("头像尺寸不能超过1Mb")
            //}else{
                ngDialog.closeAll(1)
            //}
        }
        //弹出自定义头像对话框
        function addCustom(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/settingContentDialog2.html",
                width:"500px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        var file = document.querySelector('input[type=file]').files[0];
                        //if(file.size>1024){
                        //    layer.msg("头像尺寸不能超过1Mb")
                        //}else{
                            var fd = new FormData();
                            //var file =$scope.robot.myFile
                            fd.append('file', file);
                            fd.append('settingId',$scope.robot.settingId);
                            fd.append('x',$('#x').val()) ;
                            fd.append('y',$('#y').val());
                            fd.append('w',$('#w').val());
                            fd.append('h',$('#h').val());
                        console.log(fd)
                            $http({
                                method:'POST',
                                url:"/api/application/application/uploadHead",
                                data: fd,
                                headers: {'Content-Type':undefined},
                                transformRequest: angular.identity
                            }).success( function (response){
                                if(response.status==200){
                                    layer.msg("修改头像成功");
                                    //$state.go("setting.robot");
                                    $state.reload();
                                }else{
                                    layer.msg("上传头像失敗");
                                }
                            });
                        }
                    //}
                }
            });
        }

        $scope.app = {
            applicationId: $cookieStore.get("applicationId"),
            userId : $cookieStore.get("userId"),   //用户id
            settingCommentOn : 1,   //评价开关
            settingDataTimeoutLimit : "",//获取数据时间
            settingGreetingOn : 1,//寒暄开关
            settingGreetingThreshold : "",//寒暄阈值
            settingId : "",//应用参数id
            settingLowerLimit : "",//下限阈值
            settingRecommendNumber : "",//推荐问题数量
            settingRelateNumber : "",//关联问题数量
            settingTurnRoundOn : 1,//话轮识别开关
            settingUpperLimit : "",//上限阈值
            openDL : false,
            dlUpperLimit: 0,
            dlLowerLimit: 0,
            settingUpdateId : $cookieStore.get("userId"),//更新人员
            editApplication : editApplication,  //编辑应用参数
            findApplicationSetting : findApplicationSetting, //查询应用参数
            turnOn : turnOn,//开关函数
            turnOnBoolean : turnOnBoolean,
            parameterLimit : parameterLimit
        };
        function parameterLimit(type,val){
            // type 0   lt1
            //type 1    0-1
           if(type){
               if($scope.app[val]<1){
                   $scope.app[val] = 1 ;
               }
           }else{
               if($scope.app[val]>1 ){
                   $scope.app[val] = 1
               }else if($scope.app[val]<0){
                   $scope.app[val] = 0
               }
           }
        }

        //查看应用参数设置
        findApplicationSetting();
        //查看机器人设置
        findRobotSetting();

        //$scope.$watch('robot.robotName', function(current){
        //    if(current==""){
        //        $scope.robot.robotName="小富机器人";
        //    }
        //});

        //查看机器人参数
        function findRobotSetting(){
            httpRequestPost("/api/application/application/findRobotSetting",{
                "applicationId": $scope.robot.applicationId
            },function(data){          //类名重複
                if(data.data===10005){
                    $scope.robot.robotExpire=""; //过期知识回答
                    $scope.robot.robotHead= "";//头像
                    $scope.robot.robotHotQuestionTimeout = "";//热点问题更新频率
                    $scope.robot.robotLearned = "";//学到新知识回答
                    $scope.robot.robotName = ""; //名称
                    $scope.robot.robotRepeat = "";//重复问答回复
                    $scope.robot.robotRepeatNumber = "";//重复问答次数
                    $scope.robot.robotSensitive = "";// 敏感问答回复
                    $scope.robot.robotTimeout = "";//超时提示回复
                    $scope.robot.robotTimeoutLimit = "";//超时时长
                    $scope.robot.robotUnknown = "";//未知问答回复
                    $scope.robot.robotWelcome = "";//欢迎语
                    $scope.robot.settingId = "" ;  //机器人参数ID
                    $scope.robot.newRobotHead =""; //新的头像
                    $scope.robot.imgUrl =""; //文件服务器地址
                }else{
                    $scope.robot.robotExpire= data.data.robotExpire; //过期知识回答
                    $scope.robot.robotHead= data.data.robotHead;//头像
                    $scope.robot.imgUrl = data.data.imgUrl; //文件服务器地址
                    $scope.robot.robotHotQuestionTimeout = data.data.robotHotQuestionTimeout;//热点问题更新频率
                    $scope.robot.robotLearned = data.data.robotLearned;//学到新知识回答
                    $scope.robot.robotName = data.data.robotName; //名称
                    $scope.robot.robotRepeat = data.data.robotRepeat;//重复问答回复
                    $scope.robot.robotRepeatNumber = data.data.robotRepeatNumber;//重复问答次数
                    $scope.robot.robotSensitive = data.data.robotSensitive;// 敏感问答回复
                    $scope.robot.robotTimeout = data.data.robotTimeout;//超时提示回复
                    $scope.robot.robotTimeoutLimit = data.data.robotTimeoutLimit;//超时时长
                    $scope.robot.robotUnknown = data.data.robotUnknown;//未知问答回复
                    $scope.robot.robotWelcome = data.data.robotWelcome;//欢迎语
                    $scope.robot.settingId = data.data.settingId;//机器人参数ID
                    $scope.robot.newRobotHead = data.data.robotHead; //新的头像
                    $scope.$apply();
                }
            },function(){
                layer.msg("查询失敗");
            })
        }

        //查看应用参数
        function findApplicationSetting(){
            httpRequestPost("/api/application/application/findApplicationSetting",{
                "applicationId": $scope.app.applicationId
            },function(data){
                if(data.data===10005){
                    $scope.app.settingCommentOn = 1;   //评价开关
                    $scope.app.settingDataTimeoutLimit = "";//获取数据时间
                    $scope.app.settingGreetingOn = 1;//寒暄开关
                    $scope.app.settingId = "";//应用参数id
                    $scope.app.settingLowerLimit = "";//下限阈值
                    $scope.app.settingRecommendNumber = "";//推荐问题数量
                    $scope.app.settingRelateNumber = "";//关联问题数量
                    $scope.app.settingTurnRoundOn = 1;//话轮识别开关
                    $scope.app.settingUpperLimit = "";//上限阈值
                    $scope.app.settingGreetingThreshold = "";//寒暄阈值

                    $scope.app.openDL = false ;//深度学习开关
                    $scope.app.dlUpperLimit = 0; //上限阈值
                    $scope.app.dlLowerLimit = 0; //下限阈值
                }else{
                    $scope.app.settingCommentOn = data.data.settingCommentOn;   //评价开关
                    $scope.app.settingDataTimeoutLimit = data.data.settingDataTimeoutLimit;//获取数据时间
                    $scope.app.settingGreetingOn = data.data.settingGreetingOn;//寒暄开关
                    $scope.app.settingGreetingThreshold = data.data.settingGreetingThreshold;//寒暄阈值
                    $scope.app.settingId = data.data.settingId;//应用参数id
                    $scope.app.settingLowerLimit = data.data.settingLowerLimit;//下限阈值
                    $scope.app.settingRecommendNumber = data.data.settingRecommendNumber;//推荐问题数量
                    $scope.app.settingRelateNumber = data.data.settingRelateNumber;//关联问题数量
                    $scope.app.settingTurnRoundOn = data.data.settingTurnRoundOn;//话轮识别开关
                    $scope.app.settingUpperLimit = data.data.settingUpperLimit ;//上限阈值

                    $scope.app.openDL = data.data.openDL ;//深度学习开关
                    $scope.app.dlUpperLimit = data.data.dlUpperLimit ;//上限阈值
                    $scope.app.dlLowerLimit = data.data.dlLowerLimit ;//下限阈值

                    $scope.$apply();
                }
            },function(){
                layer.msg("查询失敗");
            })
        }


        //编辑机器人参数
        function editRobot(flag){
            if(flag){
                httpRequestPost("/api/application/application/saveRobotSetting",{
                    "applicationId": $scope.robot.applicationId,
                    "robotExpire": $scope.robot.robotExpire,
                    "robotHead": $scope.robot.robotHead,
                    "robotHotQuestionTimeout": $scope.robot.robotHotQuestionTimeout,
                    "robotLearned": $scope.robot.robotLearned,
                    "robotName": $scope.robot.robotName,
                    "robotRepeat": $scope.robot.robotRepeat,
                    "robotRepeatNumber": $scope.robot.robotRepeatNumber,
                    "robotSensitive": $scope.robot.robotSensitive,
                    "robotTimeout": $scope.robot.robotTimeout,
                    "robotTimeoutLimit": $scope.robot.robotTimeoutLimit,
                    "robotUnknown": $scope.robot.robotUnknown,
                    "robotUpdateId":$scope.robot.settingUpdateId ,
                    "robotWelcome": $scope.robot.robotWelcome,
                    "settingId": $scope.robot.settingId
                },function(data){
                    if(data.status===200){
                        layer.msg("保存成功");
                        //$state.reload();
                    }else{
                        layer.msg("保存失敗");
                    }
                },function(){
                    layer.msg("保存失敗");
                })
            }
        }

        //编辑应用参数
        function editApplication(){
            if($scope.app.dlUpperLimit < $scope.app.dlLowerLimit){
                layer.msg("保存失敗, 深度学习上限阈值必须大于下限阈值");
                return ;
            }
            httpRequestPost("/api/application/application/saveApplicationSetting",{
                "applicationId": $scope.app.applicationId,
                "settingCommentOn": $scope.app.settingCommentOn,
                "settingDataTimeoutLimit": $scope.app.settingDataTimeoutLimit,
                "settingGreetingOn": $scope.app.settingGreetingOn,
                "settingGreetingThreshold": $scope.app.settingGreetingThreshold,
                "settingId": $scope.app.settingId,
                "settingLowerLimit": $scope.app.settingLowerLimit,
                "settingRecommendNumber": $scope.app.settingRecommendNumber,
                "settingRelateNumber": $scope.app.settingRelateNumber,
                "settingTurnRoundOn": $scope.app.settingTurnRoundOn,
                "settingUpdateId": $scope.app.settingUpdateId,
                "settingUpperLimit": $scope.app.settingUpperLimit,
                "openDL" : $scope.app.openDL, //深度学习开关
                "dlUpperLimit": $scope.app.dlUpperLimit, //上限阈值
                "dlLowerLimit": $scope.app.dlLowerLimit  //下限阈值
            },function(data){
                if(data.status===200){
                    layer.msg("保存成功");
                    //$state.reload();
                }else{
                    layer.msg("保存失敗");
                }
            },function(){
                layer.msg("保存失敗");
            })
        }

        //开关
        function turnOn(targetValue,targetName){
            $scope.app[targetName] = targetValue ? 0 : 1 ;
        }

        function turnOnBoolean(targetValue,targetName){
            $scope.app[targetName] = targetValue ? false :true ;
        }


    }
]).directive('checkWelcome', function($http){
    return {
        require: 'ngModel',
        link: function(scope, ele, attrs, c){
            scope.$watch(attrs.ngModel, function(n){
                if(!n) return;
                console.log(scope.robot.robotWelcome);
                var welcomes=scope.robot.robotWelcome.split("\n");
                console.log(welcomes.length);
                if(welcomes.length>10){
                    c.$setValidity('len', false);
                }else{
                    c.$setValidity('len', true);
                }
            });
        }
    }
});
// Source: app/static/myApplication/js/controller/sceneManage_controller.js
/**
 * Description:场景管理控制器
 * Author: chengjianhua@ultrapower.com.cn
 * Date: 2017/4/5 15:39
 */
angular.module('myApplicationSettingModule').controller('sceneManageController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore) {
        $scope.vm = {
            applicationId : $cookieStore.get("applicationId"),
            keyword: "",  //检索条件
            exchangeModeId: "", //交互方式的Id
            knowledgeTypeId: "", //知识类型的Id
            statusId: "", //状态
            knowledgeTypeData: "", //知识类型列表
            exchangeModeData: "",  //交互方式列表

            listKnowledgeType: listKnowledgeType, //查询知识类型
            listExchangeMode: listExchangeMode,  //查询交互方式
            updateKnowledgeType:  updateKnowledgeType, //禁用或者启用知识类型
            updateExchangeMode: updateExchangeMode, //禁用或者启用交互方式
            saveMultiInteractive: saveMultiInteractive,  //多轮交互设置
            findMultiInteractive: findMultiInteractive, //查询多轮交互设置

            turnOn : turnOn,//开关函数
            turnOn2 : turnOn2,
    
            settingId: "", //配置id
            categoryFuzzyOn: 1,  //类目模糊开关
            recommendedSimilarity: 0.5, //推荐问相似度
            subjectMissingOn: 1, //主题缺失开关
            subjectMemoryRounds: 3, //主题记忆轮数
            memoryMethod: 1, //记忆方法
            elementMissingOn: 1, //要素缺失开关
            elementRecommendationOrder: 1,  //要素推荐顺序
            nonZeroStartOn: 1, //非零点启动开关
            matchCompleteOn: 1, //完全匹配开关
            matchTagOn: 1,  //标签匹配开关
            userId: $cookieStore.get("userId"),
            sceneId : $cookieStore.get("sceneId")
        };




        //加载知识类型
        listKnowledgeType();
        //加载交互方式
        listExchangeMode();

        //查询多轮交互设置
        function findMultiInteractive(){
            httpRequestPost("/api/application/scene/findMultiInteractiveSetting",{
                "applicationId": $scope.vm.applicationId
            },function(data){
                if(data.status==200){
                    $scope.vm.settingId= data.data.settingId; //配置id
                    $scope.vm.categoryFuzzyOn= data.data.categoryFuzzyOn;  //类目模糊开关
                    $scope.vm.recommendedSimilarity= data.data.recommendedSimilarity; //推荐问相似度
                    $scope.vm.subjectMissingOn= data.data.subjectMissingOn; //主题缺失开关
                    $scope.vm.subjectMemoryRounds= data.data.subjectMemoryRounds; //主题记忆轮数
                    $scope.vm.memoryMethod= data.data.memoryMethod; //记忆方法
                    $scope.vm.elementMissingOn= data.data.elementMissingOn; //要素缺失开关
                    $scope.vm.elementRecommendationOrder= data.data.elementRecommendationOrder;  //要素推荐顺序
                    $scope.vm.nonZeroStartOn= data.data.nonZeroStartOn; //非零点启动开关
                    $scope.vm.matchCompleteOn= data.data.matchCompleteOn; //完全匹配开关
                    $scope.vm.matchTagOn= data.data.matchTagOn; //标签匹配开关
                    $scope.$apply();
                }else{
                    layer.msg("目前还没有进行多轮会话设置");
                }
            },function(err){
                console.log(err);
                layer.msg("请求失败")
            })
        }

        //多轮交互设置对话框
        function saveMultiInteractive(){
            //查询多轮会话设置
            findMultiInteractive();
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationConfig/sceneManageDialog.html",
                width:"600px",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        httpRequestPost("/api/application/scene/saveMultiInteractiveSetting",{
                            "applicationId": $scope.vm.applicationId,
                            "categoryFuzzyOn": $scope.vm.categoryFuzzyOn,
                            "elementMissingOn": $scope.vm.elementMissingOn,
                            "elementRecommendationOrder": $scope.vm.elementRecommendationOrder,
                            "matchCompleteOn": $scope.vm.matchCompleteOn,
                            "matchTagOn": $scope.vm.matchTagOn,
                            "memoryMethod": $scope.vm.memoryMethod,
                            "nonZeroStartOn": $scope.vm.nonZeroStartOn,
                            "recommendedSimilarity": $scope.vm.recommendedSimilarity,
                            "settingId": $scope.vm.settingId,
                            "subjectMemoryRounds": $scope.vm.subjectMemoryRounds,
                            "subjectMissingOn": $scope.vm.subjectMissingOn,
                            "userId": $scope.vm.userId
                        },function(data){
                            if(data.status==200){
                                $scope.vm.settingId= data.data.settingId; //配置id
                                $scope.vm.categoryFuzzyOn= data.data.categoryFuzzyOn;  //类目模糊开关
                                $scope.vm.recommendedSimilarity= data.data.recommendedSimilarity; //推荐问相似度
                                $scope.vm.subjectMissingOn= data.data.subjectMissingOn; //主题缺失开关
                                $scope.vm.subjectMemoryRounds= data.data.subjectMemoryRounds; //主题记忆轮数
                                $scope.vm.memoryMethod= data.data.memoryMethod; //记忆方法
                                $scope.vm.elementMissingOn= data.data.elementMissingOn; //要素缺失开关
                                $scope.vm.elementRecommendationOrder= data.data.elementRecommendationOrder;  //要素推荐顺序
                                $scope.vm.nonZeroStartOn= data.data.nonZeroStartOn; //非零点启动开关
                                $scope.vm.matchCompleteOn= data.data.matchCompleteOn; //完全匹配开关
                                $scope.vm.matchTagOn= data.data.matchTagOn; //标签匹配开关
                                $scope.$apply();
                            }else{
                                layer.msg("目前还没有进行多轮会话设置");
                            }
                        },function(err){
                            console.log(err);
                            layer.msg("请求失败")
                        })
                    }
                }
            });
        }


        //请求知识类型列表
        function listKnowledgeType(){
            httpRequestPost("/api/application/scene/listKnowledgeTypeByApplicationId",{
                "applicationId": $scope.vm.applicationId,
                "keyword": $scope.vm.keyword
            },function(data){
                $scope.vm.knowledgeTypeData = data.data;
                //console.log(data)
                $scope.$apply();
            },function(err){
                console.log(err);
                layer.msg("请求失败")
            })
        }
        //请求交互方式列表
        function listExchangeMode(){
            httpRequestPost("/api/application/scene/listExchangeModeByApplicationId",{
                "applicationId": $scope.vm.applicationId,
                "keyword": $scope.vm.keyword
            },function(data){
                $scope.vm.exchangeModeData = data.data;
                //console.log(data)
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }


        function updateKnowledgeType(item){
            httpRequestPost("/api/application/scene/updateKnowledgeTypeByApplicationId",{
                "applicationId": $scope.vm.applicationId,
                "statusId": item.statusId,
                "knowledgeTypeId": item.knowledgeTypeId
            },function(data){
                //$state.reload();
                layer.msg("更新知识类型成功！");
                listExchangeMode();
                listKnowledgeType();
            },function(){
                layer.msg("请求失败")
            })
        }

        function updateExchangeMode(item){
            httpRequestPost("/api/application/scene/updateExchangeModeByApplicationId",{
                "applicationId": $scope.vm.applicationId,
                "statusId": item.statusId,
                "exchangeModeId": item.exchangeModeId
            },function(data){
                //$state.reload();
                layer.msg("更新交互方式成功！");
                listExchangeMode();
                listKnowledgeType();
                $("#exchangeMode").click();
            },function(){
                layer.msg("请求失败")
            })
        }

        //开关
        function turnOn(targetValue,targetName){
            $scope.vm[targetName] = targetValue ? 0 : 1 ;
        }

        //nnf-7.3-add
        function turnOn2(targetValue,targetName){
            $scope.vm[targetName] = targetValue ? 0 : 1 ;
            //添加判断，如果为关，后面两项不可用
            if($scope.vm[targetName]==0){
                $scope.vm.subjectMemoryRounds='';
                $scope.vm.memoryMethod='';
            }else{
                $scope.vm.subjectMemoryRounds=3;
                $scope.vm.memoryMethod=1;
            }

        }
    }
]);
// Source: app/static/myApplication/js/controller/serviceRelease_controller.js
/**
 * Description:发布服务管理页面的控制器
 * Author: chengjianhua@ultrapower.com.cn
 * Date: 2017/4/10 9:59
 */
angular.module('myApplicationSettingModule').controller('serviceReleaseController', [
    '$scope', 'localStorageService' ,"$state" ,"ngDialog","$cookieStore","$timeout","$interval",
    function ($scope,localStorageService, $state,ngDialog,$cookieStore,$timeout,$interval) {
        $scope.vm = {
            applicationId: $cookieStore.get("applicationId"),
            serviceData : "",   // 服务列表数据
            paginationConf : ""  ,//分页条件
            pageSize : 5 , //默认每页数量
            dataTotal: "", //发布服务数据记录总数

            publishService : publishService,  //发布服务
            startService : startService, //上线服务
            stopService : stopService, //下线服务
            restartService : restartService, //重启服务
            deleteService : deleteService, //删除服务

            editService : editService, //编辑服务
            addAndPublishService : addAndPublishService, //发布及编辑服务弹窗

            appName : "", //应用名称
            categoryIds : [], //分类id列表
            channels : [], //渠道id列表
            dimensionSelected : [], //选中的维度列表
            dimensionAll : [],//所有的维度列表
            originDimensionAll : [], //原始所有的维度列表，同上
            dimensions: [], //选中的维度id
            nodeCode : "", //节点编号
            serviceId : "", //服务id
            serviceName: "", //服务名称
            serviceStatus : 0, //服务状态
            serviceType : 10, //服务类型
            userId : $cookieStore.get("userId"), //获取用户id
            userName : $cookieStore.get("userLoginName"), //获取用户id

            categoryData : "", //分类数据
            channelData : "", //渠道数据
            dimensionData : "", //维度数据
            typeData : "", //类型数据
            nodeData : "", //节点数据

            dialogTitle : "",  //对话框标题
            allowSubmit : 1, //是否允许提交

            selectChannel : selectChannel, //选择渠道
            listCategory : listCategory,  //弹出分类对话框
            listNodeData : listNodeData, //获取可用节点数据
            listChannelData : listChannelData, //获取渠道数据
            listTypeData : listTypeData,//获取发布类型数据
            listDimensionData : listDimensionData, //获取维度数据


            findServiceByServiceId : findServiceByServiceId, //根据服务id查询服务信息

            botRoot : "",     //根节点
            newCategoryIds : [],  //选中的分类节点

            //flagDialog : true, //发布按钮是否可点击，默认不可点击

            verifyRelease : verifyRelease //发布服务校验
        };


        listDimensionData(); //获取维度数据
        listChannelData();  //获取渠道数据
        listTypeData();//获取发布类型数据


        //根据服务id查询服务信息
        function findServiceByServiceId(serviceId){
            $scope.vm.dialogTitle="编辑服务";
            httpRequestPost("/api/application/service/findServiceById",{
                "serviceId": serviceId
            },function(data){
                if(data.status==200){
                    console.log(data)
                    $scope.vm.appName=data.data.appName;//应用名称
                    $scope.vm.categoryIds=data.data.categoryIds;//分类id列表
                    $scope.vm.newCategoryIds=data.data.categoryIds;//选中的分类初始化
                    $scope.vm.channels=data.data.channels;//渠道id列表
                    console.log("查询结果"+data.data.channels);
                    //$scope.vm.dimensions=data.data.dimensions;//维度id列表
                    $scope.vm.nodeCode=data.data.nodeCode;//节点编号
                    $scope.vm.serviceName=data.data.serviceName;//服务名称
                    $scope.vm.serviceStatus=data.data.serviceStatus;//服务状态
                    $scope.vm.serviceType=data.data.serviceType;//服务类型
                    $scope.vm.serviceId=data.data.serviceId;//服务id
                    var dimensionSelected=[];
                    $scope.vm.dimensionAll=$scope.vm.originDimensionAll;  //所有的维度
                    //console.log(dimensionSelected);
                    //console.log($scope.vm.originDimensionAll);
                    angular.forEach(data.data.dimensions,function(dimensionId){
                        angular.forEach($scope.vm.dimensionAll,function(dimension){
                            if(dimensionId==dimension.dimensionId){
                                dimensionSelected.push(dimension);
                            }
                        });
                    });
                    $scope.vm.dimensionSelected=dimensionSelected;
                    $scope.$apply();

                    httpRequestPost("/api/application/node/findParentNodeInfo",{
                        "nodeCode" : data.data.nodeCode
                    },function(data){
                        if(data.status==200){
                            $scope.vm.nodeData.push(data.data);
                            $scope.$apply();
                        }else{
                            layer.msg("查询节点信息失败");
                        }
                    },function(){
                        layer.msg("请求失败");
                    }) ;
                }else{
                    layer.msg("查询服务失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //校验服务发布
        function verifyRelease(){
            if($scope.vm.serviceName==null||$scope.vm.serviceName==""){
                layer.msg("发布服务的名称不能为空!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.categoryIds==null||$scope.vm.categoryIds.length==0){
                layer.msg("发布服务时未选择分类!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.nodeCode==null||$scope.vm.nodeCode==""){
                layer.msg("发布服务时未选择发布节点!");
                $scope.vm.allowSubmit=0;
                return 0;
            }
            if($scope.vm.serviceType==null||$scope.vm.serviceType==""){
                layer.msg("发布服务时未选择发布类型!");
                $scope.vm.allowSubmit=0;
                return 0;
            }

            return 1;
        }
        //添加并发布服务
        function addAndPublishService(){
            listDimensionData();
            initPublishServiceInput();
            listNodeData(); //获取可用节点数据
            $scope.vm.dialogTitle="发布新服务";
            var edit = $interval(function() {
                if ($scope.vm.channels) {
                    $interval.cancel(edit);
                    var dialog = ngDialog.openConfirm({
                        template:"/static/myApplication/applicationRelease/NewServiceRelease.html",
                        width:"700px",
                        scope: $scope,
                        closeByDocument:false,
                        closeByEscape: true,
                        showClose : true,
                        backdrop : 'static',
                        preCloseCallback:function(e){    //关闭回掉
                            if(e === 1) {
                                $scope.vm.dimensions=$scope.vm.dimensionSelected.id;

                                if($scope.vm.channels==null||$scope.vm.channels.length==0){
                                    angular.forEach($scope.vm.channelData,function(channel){
                                        $scope.vm.channels.push(channel.channelCode);
                                    });
                                    //layer.msg("发布服务时未选择渠道!");
                                    //$scope.vm.allowSubmit=0;
                                    //return;
                                }
                                if($scope.vm.dimensions==null||$scope.vm.dimensions.length==0){
                                    $scope.vm.dimensionAll=$scope.vm.originDimensionAll;
                                    angular.forEach($scope.vm.dimensionAll,function(dimension){
                                        $scope.vm.dimensions.push(dimension.dimensionId);
                                    });
                                }

                                if($scope.vm.allowSubmit){  //服务名称验证没有错误
                                    httpRequestPost("/api/application/service/addAndPublishService",{
                                        "applicationId": $scope.vm.applicationId,
                                        "categoryIds" : $scope.vm.categoryIds, //分类id列表
                                        "channels" : $scope.vm.channels, //渠道id列表
                                        "dimensions" : $scope.vm.dimensions, //维度id列表
                                        "nodeCode" : $scope.vm.nodeCode, //节点编号
                                        "serviceName": $scope.vm.serviceName, //服务名称
                                        "serviceType" : $scope.vm.serviceType, //服务类型
                                        "userId" : $scope.vm.userId, //获取用户id
                                        "userName" : $scope.vm.userName //获取用户名称
                                    },function(data){
                                        if(data.status==200){
                                            listServiceData(1);
                                        }else{
                                            layer.msg("新增发布服务失败");
                                        }
                                    },function(){
                                        layer.msg("请求失败")
                                    })
                                }
                            }
                            initPublishServiceInput();
                        }
                    });
                }
            },5) ;

        }



        function initPublishServiceInput(){
            $scope.vm.categoryIds=[]; //分类id列表
            $scope.vm.newCategoryIds=[]; //选择的分类id
            $scope.vm.channels=[]; //渠道id列表
            $scope.vm.dimensions=[]; //维度id列表
            $scope.vm.nodeCode=""; //节点编号
            $scope.vm.serviceName=""; //服务名称
            $scope.vm.serviceType=""; //服务类型
            $scope.vm.dimensionSelected=[];  //选中的维度
            $scope.vm.dimensionAll=$scope.vm.originDimensionAll;  //所有的维度
        }

        //编辑服务
        function editService(serviceId){
            listDimensionData();
            initPublishServiceInput();
            findServiceByServiceId(serviceId);
            listNodeData(); //获取可用节点数据
            var edit = $interval(function(){
                if($scope.vm.channels){
                    $interval.cancel(edit) ;
                    var dialog = ngDialog.openConfirm({
                        template:"/static/myApplication/applicationRelease/NewServiceRelease.html",
                        width:'700px',
                        scope: $scope,
                        closeByDocument:false,
                        closeByEscape: true,
                        showClose : true,
                        backdrop : 'static',
                        preCloseCallback:function(e){    //关闭回掉
                            if(e === 1) {
                                console.log($scope.vm.allowSubmit);
                                if($scope.vm.allowSubmit){  //服务名称验证没有错误
                                    if($scope.vm.dimensionSelected.id.length==0){
                                        angular.forEach($scope.vm.originDimensionAll,function(item){
                                            $scope.vm.dimensions.push(item.dimensionId)
                                        })
                                    }else{
                                        $scope.vm.dimensions=$scope.vm.dimensionSelected.id;
                                    }
                                    httpRequestPost("/api/application/service/editService",{
                                        "applicationId": $scope.vm.applicationId,
                                        "categoryIds" : $scope.vm.categoryIds, //分类id列表
                                        "channels" : $scope.vm.channels, //渠道id列表
                                        "dimensions" : $scope.vm.dimensions, //维度id列表
                                        "nodeCode" : $scope.vm.nodeCode, //节点编号
                                        "serviceName": $scope.vm.serviceName, //服务名称
                                        "serviceType" : $scope.vm.serviceType, //服务类型
                                        "userId" : $scope.vm.userId, //获取用户id
                                        "serviceId" : $scope.vm.serviceId //服务id
                                    },function(data){
                                        if(data.status==200){
                                            listServiceData(1);
                                        }else{
                                            layer.msg("新增发布服务失败");
                                        }
                                    },function(){
                                        layer.msg("请求失败")
                                    })
                                }
                            }
                            initPublishServiceInput();
                        }
                    });
                }

            },5) ;




        }

        /**
         * 加载分页条
         * @type {{currentPage: number, totalItems: number, itemsPerPage: number, pagesLength: number, perPageOptions: number[]}}
         */
        listServiceData(1);
        //请求服务列表
        function listServiceData(index){
            httpRequestPost("/api/application/service/listServiceByPage",{
                "applicationId": $scope.vm.applicationId,
                "index" : (index-1)*$scope.vm.pageSize,
                "pageSize": $scope.vm.pageSize
            },function(data){
                $scope.vm.serviceData = data.data;
                $scope.vm.dataTotal =data.total;
                $scope.vm.paginationConf = {
                    currentPage: index,//当前页
                    totalItems: data.total, //总记录数
                    pageSize: $scope.vm.pageSize,//每页记录数
                    pagesLength: 8,//分页框显示数量
                };
                $scope.$apply();
            },function(){
                layer.msg("请求失败")
            })
        }
        var timeout ;
        $scope.$watch('vm.paginationConf.currentPage', function(current){
            if(current){
                if (timeout) {
                    $timeout.cancel(timeout)
                }
                timeout = $timeout(function () {
                    listServiceData(current);
                }, 100)

            }
        },true);
        //发布服务
        function publishService(serviceId){
            layer.confirm("确认发布服务？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/publishService",{
                    "serviceId": serviceId,
                    "applicationId": $scope.vm.applicationId,
                    "userId" : $scope.vm.userId, //获取用户id
                    "userName" : $scope.vm.userName //获取用户名称
                },function(data){
                    if(data.status==200){
                        layer.msg("发布服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("发布服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //上线服务
        function startService(serviceId){
            layer.confirm("确认上线服务？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/startService",{
                    "serviceId": serviceId
                },function(data){
                    if(data.status==200){
                        layer.msg("上线服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("上线服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }
        //下线服务
        function stopService(serviceId){
            layer.confirm("确认下线服务？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/stopService",{
                    "serviceId": serviceId
                },function(data){
                    if(data.status==200){
                        layer.msg("下线服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("下线服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //重启服务
        function restartService(serviceId){
            layer.confirm("确认重启？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/restartService",{
                    "serviceId": serviceId
                },function(data){
                    if(data.status==200){
                        layer.msg("重启服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("重启服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //删除服务
        function deleteService(serviceId){
            layer.confirm("确认删除当前服务？",{
                btn:['确认','取消'],
                shade:false
            },function(index){
                layer.close(index);
                httpRequestPost("/api/application/service/deleteService",{
                    "serviceId": serviceId,
                    "applicationId": $scope.vm.applicationId,
                    "userId" : $scope.vm.userId, //获取用户id
                    "userName" : $scope.vm.userName //获取用户名称
                },function(data){
                    if(data.status==200){
                        layer.msg("删除服务成功");
                        listServiceData(1);
                    }else{
                        layer.msg("删除服务失败");
                    }
                },function(){
                    layer.msg("请求失败");
                });
            },function(){
                console.log("cancel");
            });
        }

        //获取渠道数据
        function listChannelData(){
            httpRequestPost("/api/application/channel/listChannels",{
                "applicationId": $scope.vm.applicationId
            },function(data){
                if(data.status==200){
                    $scope.vm.channelData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询渠道失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //获取发布类型数据
        function listTypeData(){
            httpRequestPost("/api/application/service/listServiceType",{
            },function(data){
                if(data.status==200){
                    $scope.vm.typeData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询服务类型失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //获取可用节点数据
        function listNodeData(){
            httpRequestPost("/api/application/node/listNoUsingNode",{
            },function(data){
                if(data.status==200){
                    $scope.vm.nodeData=data.data;
                    $scope.$apply();
                }else{
                    layer.msg("查询可用节点失败");
                }
            },function(){
                layer.msg("请求失败");
            })
        }

        //获取维度
        function listDimensionData(){
            httpRequestPost("/api/application/dimension/list",{
                "applicationId" : $scope.vm.applicationId
            },function(data){
                if(data.data){
                    $scope.vm.dimensionAll = data.data;
                    $scope.vm.originDimensionAll=data.data;
                    $scope.$apply();
                }
            },function(err){
                layer.msg("获取维度失败，请刷新页面");
            });

        }


        //选择渠道
        function selectChannel(channelId){
            if($scope.vm.channels==null){
                $scope.vm.channels=[];
            }
            var index=$scope.vm.channels.inArray(channelId);
            if(index){
                $scope.vm.channels.remove(channelId);
            }else{
                $scope.vm.channels.push(channelId);
            }
        }


        //弹出分类对话框
        function listCategory(){
            var dialog = ngDialog.openConfirm({
                template:"/static/myApplication/applicationRelease/NewServiceReleaseDialog.html",
                scope: $scope,
                closeByDocument:false,
                closeByEscape: true,
                showClose : true,
                backdrop : 'static',
                preCloseCallback:function(e){    //关闭回掉
                    if(e === 1){
                        $scope.vm.categoryIds=$scope.vm.newCategoryIds;
                    }
                }
            });
            $timeout(function(){
                relationBot()
            },200)
        }


        function relationBot(){
            getBotRoot();
            //点击 root 的下拉效果
            function  knowledgeBot(ev){
                var ele = ev.target;
                $timeout(function(){
                    $(ele).next().slideToggle();
                },200)
            }

            //获取root 数据
            function getBotRoot(){
                httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                    "categoryApplicationId": $scope.vm.applicationId,
                    "categoryPid": "root"
                },function(data){
                    //console.log(data);
                    $scope.vm.botRoot = data.data;
                    $scope.$apply()
                },function(){
                    layer.msg("获取BOT分类失败")
                });
            }
            //点击更改bot ids
            $(".aside-navs-cont").on("click",".botSelect",function(){
                var self = angular.element(this);
                var id = self.attr("data-option");
                if(self.prop("checked")){
                    $scope.vm.newCategoryIds.push(id);
                    $scope.$apply();
                    console.log($scope.vm.newCategoryIds);
                }else{
                    $scope.vm.newCategoryIds.remove(id);
                    $scope.$apply();
                    console.log($scope.vm.newCategoryIds);
                }
            });
            //点击下一级 bot 下拉数据填充以及下拉效果
            $(".aside-navs-cont").on("click",'.icon-jj',function(){
                var id = $(this).attr("data-option");
                console.log("点击的节点："+id);
                var that = $(this);
                if(!that.parent().parent().siblings().length){
                    that.css("backgroundPosition","0% 100%");
                    httpRequestPost("/api/ms/modeling/category/listbycategorypid",{
                        "categoryApplicationId": $scope.vm.applicationId,
                        "categoryPid": id
                    },function(data){
                        if(data.data){
                            var  html = '<ul class="menus">';
                            for(var i=0;i<data.data.length;i++){
                                var checkbox="";
                                if($scope.vm.categoryIds!=null){
                                    //判断选中的分类是否为空
                                    checkbox = $scope.vm.categoryIds.inArray(data.data[i].categoryId);
                                }
                                html+= '<li>' +
                                    '<div class="slide-a">'+
                                    ' <a class="ellipsis" href="javascript:;">'+
                                    '<i class="icon-jj" data-option="'+data.data[i].categoryId+'"></i>'+
                                    '<input type="checkbox" class="botSelect" ';
                                if(checkbox){
                                    html+=' checked ';
                                }
                                html+='data-option="'+data.data[i].categoryId+'"/>'+
                                    '<span>'+data.data[i].categoryName+'</span>'+
                                    '</a>' +
                                    '</div>' +
                                    '</li>'
                            }
                            html+="</ul>";
                            $(html).appendTo((that.parent().parent().parent()));
                            that.parent().parent().next().slideDown()
                        }
                    },function(err){
                        alert(err)
                    });
                }else{
                    if(that.css("backgroundPosition")=="0% 0%"){
                        that.css("backgroundPosition","0% 100%");
                        that.parent().parent().next().slideDown()
                    }else{
                        that.css("backgroundPosition","0% 0%");
                        that.parent().parent().next().slideUp()
                    }
                }
            });
        }

    }
]);
// Source: app/static/myApplication/js/controller/setting_cotroller.js

angular.module('myApplicationSettingModule').controller('myApplicationSettingController', [
    '$scope', "$state", "$stateParams","$cookieStore","$rootScope",
    function ($scope,$state, $stateParams,$cookieStore,$rootScope) {
        //$state.go("admin.manage",{userPermission:$stateParams.userPermission});
        $scope.vm = {
            isSlide : isSlide,
            isSlide2 : isSlide2,
            sceneId : $cookieStore.get('sceneId'),
            applicationName : $cookieStore.get("applicationName"),
            robotName : "" //机器人名称
        };
        //获取应用的头像
        findRobotHead();

        function isSlide(event){
            var self=event.target;
            if($(self).hasClass("slideActive")){
                $(self).removeClass("slideActive").next(".menu_1").stop().slideToggle();
            }else{
                $(self).addClass("slideActive").next(".menu_1").stop().slideToggle();
            }
        }
        function isSlide2(event){
            var self=event.target;
            if($(self).hasClass("slideActive")){
                $(self).removeClass("slideActive").parent().next(".menu_1").stop().slideToggle();
            }else{
                $(self).addClass("slideActive").parent().next(".menu_1").stop().slideToggle();
            }
        }
        //获取应用的头像
        function findRobotHead(){
            httpRequestPost("/api/application/application/findRobotSetting",{
                "applicationId": APPLICATION_ID
            },function(data){          //类名重複
                if(data.data===10005){
                    $scope.master.headImage= "";//头像
                }else{
                    $cookieStore.put('robotHead','/images/'+data.data.robotHead);
                    $scope.master.headImage = '/images/'+data.data.robotHead ;
                    $scope.vm.robotName = data.data.robotName; //机器人名称
                    $scope.$apply();
                }
            },function(){
                console.log("获取头像失敗");
            })
        }
    }
]);

